name: "Setup Toolchain"
description: "Setup the toolchain for an action"
inputs:
  pnpm_dest:
    description: "the location where to install pnpm"
    required: false
  upgrade_npm:
    description: "should update npm (windows support)"
    required: false

runs:
  using: "composite"
  steps:
    # ⚠️ We have issues with the runners and proto,
    # so for the moment we're not using it at all in the CI.
    - uses: pnpm/action-setup@v2
      if: inputs.pnpm_dest != ''
      # if: ${{ runner.os == 'Windows' }}
      with:
        version: 8.1
        dest: ${{ inputs.pnpm_dest }}
    - uses: pnpm/action-setup@v2
      if: inputs.pnpm_dest == ''
      # if: ${{ runner.os == 'Windows' }}
      with:
        version: 8.1
    - uses: actions/setup-node@v3
      # if: ${{ runner.os == 'Windows' }}
      with:
        node-version: 18
        cache: pnpm
        cache-dependency-path: "**/pnpm-lock.yaml"
        registry-url: "https://registry.npmjs.org"
    - name: upgrade npm
      if: inputs.upgrade_npm == 'true'
      run: |
        npm i -g npm
      shell: bash
    ## Using the proto toolchain manager:
    # - name: Setup proto
    #   if: ${{ runner.os != 'Windows' }}
    #   shell: bash
    #   run: |
    #     curl -fsSL https://moonrepo.dev/install/proto.sh | bash
    #     echo "Adding $HOME/.proto/bin to GITHUB_PATH"
    #     echo "$HOME/.proto/bin" >> $GITHUB_PATH
    #     if [[ -z "${HOME}" ]]; then
    #       # EC2 runners don't have a HOME variable
    #       echo "Adding /root/.proto/bin to PATH"
    #       echo "/root/.proto/bin" >> $GITHUB_PATH
    #     fi
    # # - name: Setup proto (Windows)
    # #   if: ${{ runner.os == 'Windows' }}
    # #   shell: powershell
    # #   run: |
    # #     irm https://moonrepo.dev/install/proto.ps1 | iex
    # #     Set-ExecutionPolicy -Scope CurrentUser RemoteSigned
    # #     echo "Adding ${Home}\.proto\bin to GITHUB_PATH"
    # #     echo "${Home}\.proto\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    # - name: Use proto (bash)
    #   if: ${{ runner.os == != 'Windows' }}
    #   shell: bash
    #   run: |
    #     proto use
    #     which node
    #     proto run node -- --version
    #     node --version
    #     which pnpm
    #     proto run pnpm -- --version
    #     pnpm --version
    #     which npm
    #     proto run npm -- --version
    #     npm --version
    # # - name: Use proto (powershell)
    # #   if: ${{ runner.os == 'Windows' }}
    # #   shell: powershell
    # #   run: |
    # #     proto use
    # #     echo ${env:PATH}
    # #     Get-Command node
    # #     node --version
    # #     Get-Command pnpm
    # #     pnpm --version
    # #     Get-Command npm
    # #     npm --version
    # - name: Get pnpm store directory
    #   if: ${{ runner.os != 'Windows' }}
    #   id: pnpm-cache
    #   shell: bash
    #   run: |
    #     echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
    # - name: Setup pnpm cache
    #   if: ${{ runner.os != 'Windows' }}
    #   uses: actions/cache@v3
    #   with:
    #     path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
    #     key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
