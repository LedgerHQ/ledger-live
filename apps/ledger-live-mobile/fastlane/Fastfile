# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
#
fastlane_require "dotenv"
fastlane_require "semver"

PROJECT_NAME = "ledgerlivemobile"
XCODE_PROJECT = "./ios/#{PROJECT_NAME}.xcodeproj"
XCODE_WORKSPACE = "./ios/#{PROJECT_NAME}.xcworkspace"
OUTPUT_DIRECTORY = "./ios"
IPA_DIRECTORY = "#{OUTPUT_DIRECTORY}/#{PROJECT_NAME}.ipa"

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)
package = load_json(json_path: "./package.json")

def infer_android_version_code
  # Checks all relevant tracks in the play console and take the highest (plus one).
  ["Nightly", "internal", "beta", "alpha", "production"].map { |track|
    google_play_track_version_codes(
      package_name: "com.ledger.live",
      track: track,
      json_key_data: ENV["ANDROID_SERVICE_KEY_CONTENT"]
    ).map(&:to_i).max
  }.max + 1
end

def trim_version_number(version)
  SemVer.parse(version).format "%M.%m.%p"
end

lane :beta do |options|
  ensure_git_status_clean

  # system "yarn --frozen-lockfile --network-timeout 100000"

  Fastlane::LaneManager.cruise_lane('ios', 'ci_testflight', nil, 'production')
  Fastlane::LaneManager.cruise_lane('android', 'ci_playstore', nil, 'production')
end

platform :ios do

  before_all do
    set_version_number
  end

  # =============================== PRIVATE ===============================

  desc "private: set version number from package.json"
  private_lane :set_version_number do
    increment_version_number(
      version_number: trim_version_number(package["version"]),
      xcodeproj: XCODE_PROJECT
    )
  end

  desc "private: set app store connect api key"
  private_lane :set_api_key do
    app_store_connect_api_key(
      key_id: ENV["APPLECONNECT_API_KEY_ID"],
      issuer_id: ENV["APPLECONNECT_API_ISSUER_ID"],
      key_content: ENV["APPLECONNECT_API_KEY_CONTENT"],
      is_key_content_base64: true
    )
  end

  desc "private: setup ci for iOS build"
  private_lane :setup_ios_ci do
    create_keychain(
      name: ENV["CI_KEYCHAIN_NAME"],
      password: ENV["CI_KEYCHAIN_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )
    set_api_key
  end

  desc "private: refresh profiles"
  private_lane :refresh_ios_profiles do
    match(
      type: "development",
      app_identifier: ["com.ledger.live", "com.ledger.live.dev", "com.ledger.live.ledgerconnect"],
      force_for_new_devices: true,
      git_url: ENV["GIT_REPO_URL"],
      username: ENV["APPLE_ID"],
      team_id: ENV["DEVELOPER_TEAM_ID"],
      keychain_name: ENV["CI_KEYCHAIN_NAME"],
      keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
      git_basic_authorization: Base64.strict_encode64("#{ENV["GIT_REPO_USER"]}:#{ENV["GH_TOKEN"]}"),
    )
    match(
      type: "adhoc",
      app_identifier: ["com.ledger.live", "com.ledger.live.dev", "com.ledger.live.ledgerconnect"],
      force_for_new_devices: true,
      git_url: ENV["GIT_REPO_URL"],
      username: ENV["APPLE_ID"],
      team_id: ENV["DEVELOPER_TEAM_ID"],
      keychain_name: ENV["CI_KEYCHAIN_NAME"],
      keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
      git_basic_authorization: Base64.strict_encode64("#{ENV["GIT_REPO_USER"]}:#{ENV["GH_TOKEN"]}"),
    )
    match(
      type: "appstore",
      app_identifier: "com.ledger.live",
      git_url: ENV["GIT_REPO_URL"],
      username: ENV["APPLE_ID"],
      team_id: ENV["DEVELOPER_TEAM_ID"],
      keychain_name: ENV["CI_KEYCHAIN_NAME"],
      keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
      git_basic_authorization: Base64.strict_encode64("#{ENV["GIT_REPO_USER"]}:#{ENV["GH_TOKEN"]}"),
    )
  end

  desc "buid for deployment (app-store or ad-hoc)"
  private_lane :build do |options|
    export_options_method = options[:local] ? "development" : (options[:adhoc] ? "ad-hoc" : "app-store")
    code_sign_identity = "iPhone Distribution"
    MY_APP_BUNDLE_ID = ENV["MY_APP_BUNDLE_ID"]
    MY_APP_ID = ENV["APP_IDENTIFIER"]

    MY_PROFILE = (options[:adhoc] ? "match AdHoc #{MY_APP_BUNDLE_ID}" : "match AppStore #{MY_APP_BUNDLE_ID}")
    MY_TEAM = ENV["DEVELOPER_TEAM_ID"]

    if (!options[:local])
      settings_to_override = {
        :BUNDLE_IDENTIFIER => MY_APP_ID,
        :PROVISIONING_PROFILE_SPECIFIER => MY_PROFILE,
        :DEVELOPMENT_TEAM => MY_TEAM,
      }

      build_number = latest_testflight_build_number(
        version: trim_version_number(package["version"]),
        app_identifier: "com.ledger.live"
      )

      increment_build_number({
        build_number: build_number + 1,
        xcodeproj: XCODE_PROJECT
      })

      if (options[:ci])
        sh(
          <<-SHELL
          echo "IOS_BUILD_NUMBER=#{build_number+1}" >> $GITHUB_ENV
          SHELL
        )
      end
    end

    if (options[:ci])
      match(
        app_identifier: MY_APP_BUNDLE_ID,
        git_url: ENV["GIT_REPO_URL"],
        type: (options[:adhoc] ? "adhoc" : "appstore"),
        username: ENV["APPLE_ID"],
        team_id: ENV["DEVELOPER_TEAM_ID"],
        keychain_name: ENV["CI_KEYCHAIN_NAME"],
        keychain_password: ENV["CI_KEYCHAIN_PASSWORD"],
        git_basic_authorization: Base64.strict_encode64("#{ENV["GIT_REPO_USER"]}:#{ENV["GH_TOKEN"]}"),
        readonly: true,
        output_path: "./fastlane/certs"
      )
      begin
        sh(
        <<~SHELL
        curl -f -o /tmp/AppleWWDRCA.cer https://developer.apple.com/certificationauthority/AppleWWDRCA.cer
        sudo security import /tmp/AppleWWDRCA.cer -k /Library/Keychains/System.keychain -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/productbuild

        curl -f -o /tmp/AppleWWDRCAG3.cer https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer
        sudo security import /tmp/AppleWWDRCAG3.cer -k /Library/Keychains/System.keychain -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/productbuild
        SHELL
        )
      rescue
        # Ignore
      end
    else
      if (!options[:local])
        match(
          app_identifier: MY_APP_BUNDLE_ID,
          git_url: ENV["GIT_REPO_URL"],
          type: (options[:adhoc] ? "adhoc" : "appstore"),
          username: ENV["APPLE_ID"],
          team_id: ENV["DEVELOPER_TEAM_ID"],
          git_basic_authorization: Base64.strict_encode64("#{ENV["GIT_REPO_USER"]}:#{ENV["GH_TOKEN"]}"),
          readonly: true,
          output_path: "./fastlane/certs"
        )
      end
    end

    update_info_plist(
      xcodeproj: XCODE_PROJECT,
      plist_path: "ledgerlivemobile/Info.plist",
      display_name: ENV["APP_NAME"],
    )

    if (!options[:local])
      update_code_signing_settings(
        use_automatic_signing: false,
        path: XCODE_PROJECT,
        code_sign_identity: code_sign_identity,
        bundle_identifier: MY_APP_ID,
        profile_name: MY_PROFILE
      )
    end

    begin
      if (options[:local])
        gym(
          scheme: PROJECT_NAME,
          workspace: XCODE_WORKSPACE,
          silent: true,
          xcargs: `-UseNewBuildSystem=YES`,
          output_directory: OUTPUT_DIRECTORY,
          output_name: "#{PROJECT_NAME}.ipa",
          export_options: {
            method: export_options_method,
            signingStyle: "automatic",
          },
        )
      else
        gym(
          scheme: PROJECT_NAME,
          workspace: XCODE_WORKSPACE,
          silent: true,
          xcargs: `#{settings_to_override} -UseNewBuildSystem=YES`,
          output_directory: OUTPUT_DIRECTORY,
          output_name: "#{PROJECT_NAME}.ipa",
          export_options: {
            method: export_options_method,
            signingStyle: "manual",
            provisioningProfiles: {
                MY_APP_ID => MY_PROFILE
            }
          },
        )
      end
    rescue => e
      xcode_log_path = '~/Library/Logs/gym/ledgerlivemobile-ledgerlivemobile.log'
      p "Xcode build failed. Here's the logs from #{xcode_log_path}"
      sh "cat #{xcode_log_path}"

      raise 'Xcode build failed.'
    end
    if (!options[:local])
      update_code_signing_settings(
        use_automatic_signing: true,
        path: XCODE_PROJECT
      )
    end
  end

  desc "upload to Testflight (only to be run after an app-store build)"
  private_lane :upload do |options|
    build_number = get_build_number(xcodeproj: "ios/ledgerlivemobile.xcodeproj")

    if (options[:nightly])
      begin
        pilot(
          skip_submission: false,
          app_identifier: "com.ledger.live",
          skip_waiting_for_build_processing: true,
          # wait_processing_timeout_duration: 1800, # 30mn
          ipa: IPA_DIRECTORY,
          changelog: "Nightly Build v#{package['version']} (#{build_number})",
          beta_app_review_info: {
            contact_email: "team-live@ledger.fr",
            contact_first_name: "Ledger Live",
            notes: "test nightly builds"
          }
        )

        # pilot(
        #   distribute_only: true,
        #   groups: ["External Nightly"],
        #   distribute_external: true,
        #   app_identifier: "com.ledger.live",
        #   app_platform: 'ios',
        #   app_version: package["version"],
        #   build_number: get_build_number(xcodeproj: "ios/ledgerlivemobile.xcodeproj"),
        #   notify_external_testers: true,
        #   reject_build_waiting_for_review: !options[:ci],
        #   skip_waiting_for_build_processing: false,
        #   wait_processing_timeout_duration: 1800, # 30mn
        # )
      rescue => e
        raise unless e.message.include? "Another build is in review"

        UI.important("Another build is already in external beta review. Skipping external beta review submission")
      end
    else
      pilot(
        skip_submission: true,
        app_identifier: "com.ledger.live",
        skip_waiting_for_build_processing: true,
        ipa: IPA_DIRECTORY,
        changelog: "v#{package['version']} (#{build_number})",
      )
    end
  end

  # ============================= END PRIVATE =============================
  # ============================= LOCAL BUILD =============================

  desc "build adhoc version"
  lane :local_ipa do
    build(local: true)
  end

  # =========================== END LOCAL BUILD ===========================
  # ============================== CI BUILD ===============================

  desc "ci: create testflight version"
  lane :ci_testflight do |options|
    setup_ios_ci
    build(ci: true)
    upload(ci: true)
  end

  desc "ci: create nightly version"
  lane :ci_nightly do |options|
    setup_ios_ci
    build(ci: true)
    upload(
      nightly: true,
      ci: true
    )
  end

  desc "ci: create adhoc version"
  lane :ci_adhoc do |options|
    setup_ios_ci
    build(
      adhoc: true,
      ci: true
    )
  end

  desc "ci: add a device to apple profiles"
  lane :add_ios_device do
    setup_ios_ci
    register_devices(
      devices: {
        ENV["DEVICE_NAME"] => ENV["UDID"]
      }
    )
    refresh_ios_profiles
  end

  desc "ci: sync apple profiles"
  lane :sync_ios_profiles do
    setup_ios_ci
    refresh_ios_profiles
  end

  # ============================ END CI BUILD =============================
end

platform :android do
  before_all do
    set_version_name
    # Without the .pnpm path expo autolinking script will fail to locate transitive dependencies.
    platform_separator = Gem.win_platform? ? ";" : ":"
    pnpm_hoisted_node_modules = File.expand_path(
      File.join(
        File.dirname(__FILE__), "..", "..", "..", "node_modules", ".pnpm", "node_modules"
      )
    )
    common_node_modules = File.expand_path(
      File.join(
        File.dirname(__FILE__), "..", "..", "..", "libs", "ledger-live-common", "node_modules"
      )
    )

    ENV["NODE_PATH"] ||= pnpm_hoisted_node_modules + platform_separator + common_node_modules
  end

  # =============================== PRIVATE ===============================

  desc "private: set version name from package.json"
  private_lane :set_version_name do
    version_name = package["version"]
    android_set_version_name(
      gradle_file: 'android/app/build.gradle',
      version_name: version_name,
    )
  end

  desc "private: bump version code"
  private_lane :bump_version_code do
    android_set_version_code(
      version_code: infer_android_version_code,
      gradle_file: 'android/app/build.gradle'
    )
  end

  desc "private: prepare android for internal"
  private_lane :prepare_android_internal do |options|
    bump_version_code
  end

  desc "private: build the app apk for the specified build `type`. Defaults to `Release`"
  private_lane :build do |options|
    type = options.fetch(:type, "Release")
    task = options[:apk] ? "assemble" : "bundle"
    if(options[:ci])
      sh(
          <<-SHELL
          echo "ANDROID_BUILD_NUMBER=#{infer_android_version_code()}" >> $GITHUB_ENV
          SHELL
        )
    end

    gradle(task: "clean", project_dir: 'android/')
    if (options[:local])
      gradle(
        task: task,
        build_type: type,
        print_command: false,
        project_dir: 'android/'
      )
    else
      gradle(
        task: task,
        build_type: type,
        print_command: false,
        properties: {
          "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_FILE"],
          "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASS"],
          "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
          "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASS"],
        },
        project_dir: 'android/'
      )
    end
  end

  desc "upload to Play Store"
  private_lane :upload do |options|
    if(options[:ci])
      upload_to_play_store(
        track: options[:nightly] ? 'Nightly' : "internal",
        package_name: 'com.ledger.live',
        json_key_data: ENV["ANDROID_SERVICE_KEY_CONTENT"]
      )
    else
      upload_to_play_store(
        track: options[:nightly] ? 'Nightly' : "internal",
        package_name: "com.ledger.live",
        json_key: ENV["ANDROID_SERVICE_KEY_PATH"],
      )
    end
  end

  # ============================= END PRIVATE =============================
  # ============================= LOCAL BUILD =============================

  desc "build APK (local) (cannot be uploaded to Play Store)"
  lane :apk_local do
    build(
      type: "StagingRelease",
      apk: true,
      local: true
    )
  end

  # =========================== END LOCAL BUILD ===========================
  # ============================== CI BUILD ===============================

  desc "build APK (cannot be uploaded to Play Store)"
  lane :apk do
    build(
      type: "StagingRelease",
      apk: true
    )
  end

  desc "build APK and send to Google Play Store"
  lane :ci_playstore do
    prepare_android_internal
    build(
      type: "Release",
      ci: true
    )
    upload(ci: true)
  end

  desc "build nightly version"
  lane :ci_nightly do
    prepare_android_internal(nightly: true)
    build(
      type: "Release",
      ci: true
    )
    upload(
      nightly: true,
      ci: true
    )
  end

  # ============================ END CI BUILD =============================
end
