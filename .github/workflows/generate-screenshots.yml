name: "@Desktop • Generate Screenshots"
run-name: "@Desktop • Generate Screenshots triggered by ${{ inputs.login }} ${{ inputs.ref && format('on branch {0}', inputs.ref) || format('on PR {0}', inputs.number) }}"

on:
  workflow_dispatch:
    inputs:
      ref:
        description: The branch to generate screenshots for.
        required: false
      number:
        description: The pull request number.
        required: false
      login:
        description: The GitHub username that triggered the workflow
        required: true
      commentId:
        description: comment id to update
        required: false

concurrency:
  # See: https://github.com/orgs/community/discussions/35341
  group: ${{ github.workflow }}-${{ github.event.inputs.ref || github.event.inputs.number }}
  cancel-in-progress: true

jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: [ledger-live, linux]
    outputs:
      label: ${{ steps.start-ec2-linux-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-linux-runner.outputs.ec2-instance-id }}
    steps:
      - name: Start EC2 Linux Runner
        id: start-ec2-linux-runner
        uses: LedgerHQ/actions/ec2-linux-runner@main
        with:
          mode: start
          github-token: ${{ secrets.CI_BOT_TOKEN }}
          project: 2049
          aws-nfs-logging: true
          ami-name-filter: ledger-live-runner
          instance-volume-size: 30
          instance-type: c5.4xlarge

  stop-runner:
    name: Stop self-hosted EC2 runner
    if: ${{ always() && needs.start-runner.result == 'success' }}
    needs: [start-runner, generate-screenshots-linux]
    runs-on: [ledger-live, linux]
    steps:
      - name: Stop EC2 Linux Runner
        uses: LedgerHQ/actions/ec2-linux-runner@main
        with:
          mode: stop
          github-token: ${{ secrets.CI_BOT_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

  generate-screenshots-linux:
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    needs: [start-runner]
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - uses: actions/checkout@v3
        if: ${{ inputs.ref != null }}
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}
      - uses: actions/checkout@v3
        if: ${{ !inputs.ref }}
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
        with:
          skip_ruby: true
          install_playwright: true
      - name: Install gh
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      - name: Checkout PR
        if: ${{ inputs.number != null && inputs.ref == null }}
        run: gh pr checkout ${{ inputs.number }}
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: set git user
        run: |
          git config user.email "105061298+live-github-bot[bot]@users.noreply.github.com"
          git config user.name "live-github-bot[bot]"
      - uses: ./tools/actions/composites/update-snapshots-desktop
        id: update-snapshots
        with:
          os: ubuntu-latest

  # REWORK WINDOWS FOR OWN RUNNERS ? WAITING FOR KUBERNETES SOLUTION FROM INFRA ?
  generate-screenshots-windows:
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    runs-on: windows-latest
    steps:
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - uses: actions/checkout@v3
        if: ${{ inputs.ref != null }}
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}
      - uses: actions/checkout@v3
        if: ${{ !inputs.ref }}
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
        with:
          install_playwright: true
          install_node_gyp: true
          upgrade_npm: true
      - name: Checkout PR
        if: ${{ inputs.number != null && inputs.ref == null }}
        run: gh pr checkout ${{ inputs.number }}
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: set git user
        run: |
          git config user.email "105061298+live-github-bot[bot]@users.noreply.github.com"
          git config user.name "live-github-bot[bot]"
      - uses: ./tools/actions/composites/update-snapshots-desktop
        id: update-snapshots
        with:
          os: windows-latest

  generate-screenshots-mac:
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    runs-on: [m1, ARM64]
    steps:
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - uses: actions/checkout@v3
        if: ${{ inputs.ref != null }}
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}
      - uses: actions/checkout@v3
        if: ${{ !inputs.ref }}
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
        with:
          skip_python: true
          skip_ruby: true
          install_playwright: true
          pnpm_dest: ${{ runner.temp }}/setup-pnpm
      - name: Checkout PR
        if: ${{ inputs.number != null && inputs.ref == null }}
        run: gh pr checkout ${{ inputs.number }}
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: set git user
        run: |
          git config user.email "105061298+live-github-bot[bot]@users.noreply.github.com"
          git config user.name "live-github-bot[bot]"
      - uses: ./tools/actions/composites/update-snapshots-desktop
        id: update-snapshots
        with:
          os: macos-latest

  report-start:
    name: Report start
    runs-on: ubuntu-latest
    if: inputs.commentId != ''
    steps:
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - name: report start
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          result-encoding: string
          retries: 3
          script: |
            const {repo: {owner, repo}, run_id} = context
            const issue_number = ${{ inputs.number }}
            const body = `\
            @${{ inputs.login }}

            [Generating screenshots: workflow started](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: "${{ inputs.commentId }}",
              body,
            });

  report-end:
    needs:
      [
        "generate-screenshots-linux",
        "generate-screenshots-windows",
        "generate-screenshots-mac",
        "report-start",
      ]
    if: always()
    name: Report end
    runs-on: "ubuntu-latest"
    steps:
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - name: report jobs status
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          result-encoding: string
          retries: 3
          script: |
            const fs = require("fs");
            const {repo: {owner, repo}} = context;
            const {data: {jobs}} = await github.rest.actions.listJobsForWorkflowRun({
              owner,
              repo,
              run_id: ${{ github.run_id }},
            });

            const jobsStatusString = jobs
              .filter(job => job.name.startsWith("generate-screenshots"))
              .map(job => `${job.conclusion === "success" ? "✅" : "❌"} - [${job.name}](${job.html_url})`)
              .join("\n")

            const body = `\
            @${{ inputs.login }}

            [Generating screenshots: workflow ended](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            **Jobs status:**
            ${jobsStatusString}
            `

            const output = {
              summary: body,
            };

            fs.writeFileSync("summary.json", JSON.stringify(output), "utf-8");

            if(${{ inputs.commentId != '' }}) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: "${{ inputs.commentId }}",
                body
              });
            }
      - uses: actions/upload-artifact@v3
        name: upload summary
        with:
          name: summary.json
          path: ${{ github.workspace }}/summary.json
