name: "[EXT-Desktop] - Test (External) - Called"

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: |
          If you run this manually, and want to run on a PR, the correct ref should be refs/pull/{PR_NUMBER}/merge to
          have the "normal" scenario involving checking out a merge commit between your branch and the base branch.
          If you want to run only on a branch or specific commit, you can use either the sha or the branch name instead (prefer the first verion for PRs).
        required: true
      repository:
        description: The repository to checkout the code from
        type: string
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  codechecks:
    name: "Desktop Code Check (External)"
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
      CI_OS: ubuntu-22.04
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          repository: ${{ inputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
      - name: Setup the caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        id: setup-caches
        with:
          install-proto: true
      - uses: LedgerHQ/ledger-live/tools/actions/composites/setup-test-desktop@develop
        id: setup-test-desktop
        with:
          skip_builds: true
      - name: lint
        run: pnpm desktop lint:ci:external
      - name: prettier
        run: pnpm desktop prettier:check
      - name: typecheck
        run: pnpm desktop typecheck
      - uses: actions/upload-artifact@v4
        name: upload eslint json output
        if: ${{ !cancelled() }}
        with:
          name: lint-desktop-external
          path: ${{ github.workspace }}/apps/ledger-live-desktop/lint-desktop-external.json
      - name: check for dead code
        run: pnpm desktop unimported
        shell: bash

  unit-tests:
    name: "Desktop Unit Tests (External)"
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
      CI_OS: ubuntu-22.04
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          repository: ${{ inputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
      - name: Setup the caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        id: setup-caches
        with:
          install-proto: true
      - uses: LedgerHQ/ledger-live/tools/actions/composites/setup-test-desktop@develop
        id: setup-test-desktop
        with:
          skip_builds: true
      - name: Run unit tests
        run: pnpm desktop test:jest

  e2e-tests-linux:
    name: "Desktop E2E (External)"
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
      CI_OS: ubuntu-22.04
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      # DEBUG: "pw:browser*"
      # DEBUG_LOGS: 1
    runs-on: ubuntu-22.04
    outputs:
      status: ${{ steps.tests.outcome }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          repository: ${{ inputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
      - name: Setup the caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        id: setup-caches
        with:
          install-proto: true
      - uses: LedgerHQ/ledger-live/tools/actions/composites/setup-test-desktop@develop
        id: setup-test-desktop
        with:
          skip_ruby: true
          install_playwright: true
      - name: Run playwright tests [Linux => xvfb-run]
        id: tests
        run: |
          xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- pnpm desktop test:playwright
      - name: upload ci suggested screenshots
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: images
          path: images-linux.json
      - name: Upload playwright test results [On Failure]
        uses: actions/upload-artifact@v4
        if: failure() && !cancelled()
        with:
          name: playwright-results-linux
          path: |
            apps/ledger-live-desktop/tests/artifacts/test-results
            apps/ledger-live-desktop/tests/artifacts/html-report
            apps/ledger-live-desktop/tests/artifacts/coverage
            apps/ledger-live-desktop/tests/artifacts/videos
            apps/ledger-live-desktop/tests/artifacts/logs
      - name: Upload Allure Report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-linux
          path: apps/ledger-live-desktop/allure-results

  report:
    needs: [codechecks, unit-tests, e2e-tests-linux]
    name: "Test Desktop (External) > Report"
    runs-on: ubuntu-22.04
    if: ${{ !cancelled() && github.event_name == 'workflow_dispatch' && needs.codechecks.result == 'success' && needs.unit-tests.result == 'success' && needs.e2e-tests-linux.outputs.status == 'success' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          repository: ${{ inputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
      - name: "download linter results"
        uses: actions/download-artifact@v4
        with:
          name: lint-desktop-external
      - name: download images artifacts
        uses: actions/download-artifact@v4
        with:
          name: images
      - name: parse images
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const files = ["images-linux"];
            let result = {};
            for (const file of files) {
              try {
                const raw = JSON.parse(fs.readFileSync("${{github.workspace}}/" + file + ".json"));
                const key = file.replace("images-", "").replace("-latest", "").trim()
                result[key] = raw;
              } catch (err) {
                console.log(err);
              }
            }
            fs.writeFileSync("./images.json", JSON.stringify(result, null, 2));
      - name: prepare comment with screenshots
        id: comment
        uses: LedgerHQ/ledger-live/tools/actions/prepare-comment-screenshots@develop
        with:
          images: images.json
          no-actor: true
