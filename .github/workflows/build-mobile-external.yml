name: "@Mobile ‚Ä¢ Build App (external)"
run-name: "@Mobile ‚Ä¢ Build App (external) triggered by ${{ inputs.login }} ${{ format('on ref {0}', github.ref_name) }}"

on:
  workflow_dispatch:
    inputs:
      ref:
        description: the branch which triggered this workflow
        required: false
      login:
        description: The GitHub username that triggered the workflow
        required: true
      base_ref:
        description: The base branch to merge the head into when checking out the code

concurrency:
  # See: https://github.com/orgs/community/discussions/35341
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref_name != 'develop' }}

jobs:
  build-mobile-app-android:
    name: "Build Ledger Live Mobile (Android)"
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
    steps:
      - uses: LedgerHQ/ledger-live/tools/actions/composites/checkout-merge@develop
        with:
          ref: ${{ github.ref_name }}
          base_ref: ${{ inputs.base_ref }}
      - name: set git user
        run: |
          git config user.email "105061298+live-github-bot[bot]@users.noreply.github.com"
          git config user.name "live-github-bot[bot]"
      - name: Setup the toolchain
        uses: ./tools/actions/composites/setup-toolchain
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2
        env:
          ImageOS: ubuntu20
      - uses: actions/setup-java@v3
        with:
          distribution: "zulu" # See 'Supported distributions' for available options
          java-version: "11"
      - name: setup Android SDK
        uses: android-actions/setup-android@v2.0.6
      - name: install dependencies
        run: pnpm i --filter="live-mobile..." --filter="ledger-live" --no-frozen-lockfile --unsafe-perm
      - uses: ./tools/actions/get-package-infos
        id: version
        with:
          path: ${{ github.workspace }}/apps/ledger-live-mobile
      - name: set beta name
        uses: ./tools/actions/change-product-name
        with:
          path: ${{ github.workspace }}/apps/ledger-live-mobile
      - name: Get short SHA
        id: slug
        run: echo "sha8=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: make local version
        env:
          VERSION: ${{ steps.version.outputs.clean }}-sha.${{ steps.slug.outputs.sha8 }}
        run: cd apps/ledger-live-mobile && npm version $VERSION
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - name: build the app
        env:
          ANDROID_KEYSTORE_PASS: staging
          ANDROID_KEY_ALIAS: staging
          ANDROID_KEY_PASS: staging
          NODE_OPTIONS: "--max-old-space-size=7168"
          ANDROID_KEYSTORE_FILE: ${{ github.workspace }}/apps/ledger-live-mobile/android/app/staging.kstr
        run: pnpm build:llm:android --api="http://127.0.0.1:${{ steps.turborepo-cache-server.outputs.port }}" --token="yolo" --team="foo"
      - uses: ./tools/actions/get-package-infos
        id: post-version
        with:
          path: ${{ github.workspace }}/apps/ledger-live-mobile
      - name: upload Android app
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.post-version.outputs.version }}-release
          path: ${{ github.workspace }}/apps/ledger-live-mobile/android/app/build/outputs/apk/release

  build-mobile-app-ios:
    runs-on: macos-latest
    name: "Build Ledger Live Mobile (Mac OS X)"
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
    steps:
      - uses: LedgerHQ/ledger-live/tools/actions/composites/checkout-merge@develop
        with:
          ref: ${{ github.ref_name }}
          base_ref: ${{ inputs.base_ref }}
      - name: set git user
        run: |
          git config user.email "105061298+live-github-bot[bot]@users.noreply.github.com"
          git config user.name "live-github-bot[bot]"
      - name: Setup the toolchain
        uses: ./tools/actions/composites/setup-toolchain
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2
      - name: Cache LLM pods
        uses: actions/cache@v3
        with:
          path: |
            apps/ledger-live-mobile/ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('apps/ledger-live-mobile/ios/Podfile.lock') }}
      - name: install dependencies
        run: pnpm i --filter="live-mobile..." --filter="ledger-live" --no-frozen-lockfile --unsafe-perm

  report:
    runs-on: ubuntu-latest
    needs: [build-mobile-app-android, build-mobile-app-ios]
    if: always() && !cancelled() && github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/github-script@v6
        name: get statuses of runs
        id: status
        with:
          script: |
            const fs = require("fs");
            const statuses = [
              "${{ needs.build-mobile-app-android.result }}",
              "${{ needs.build-mobile-app-ios.result }}",
            ];

            const [ owner, repo ] = "${{ github.repository }}".split("/");

            const jobs = await github.paginate(github.rest.actions.listJobsForWorkflowRunAttempt, {
              owner,
              repo,
              run_id: "${{ github.run_id }}",
              attempt_number: "${{ github.run_attempt }}",
            });

            const findJobUrl = os =>
              jobs.find(job => job.name == `Build Ledger Live Mobile (${os})`)?.html_url;

            const keys = {
              ios: {
                symbol: "üçè",
                name: "iOS",
                jobUrl: findJobUrl("Mac OS X")
              },
              android: {
                symbol: "ü§ñ",
                name: "Android",
                jobUrl: findJobUrl("Android")
              },
            };

            const report = {
              android: {
                pass: ${{ needs.build-mobile-app-android.result == 'success' }},
                status: "${{ needs.build-mobile-app-android.result }}",
              },
              ios: {
                pass: ${{ needs.build-mobile-app-ios.result == 'success' }},
                status: "${{ needs.build-mobile-app-ios.result }}",
              },
            };
            const isFailed = statuses.some(e => e === "failure");
            const isCancelled = statuses.some(e => e === "cancelled");

            const iosSuccess = report.ios.pass;

            let summary = ``;

            summary += `|`

            const reportKeys = Object.keys(report);

            reportKeys.forEach((k) => {
              summary += ` [${keys[k].symbol} ${keys[k].name}](${keys[k].jobUrl}) |`;
            });

            summary += `
            |`;

            for (let i = 0; i < reportKeys.length; i++) {
              summary += ` :--: |`;
            }

            summary += `
            |`;

            Object.entries(report).forEach(([os, values]) => {
              summary += ` ${values.pass ? "‚úÖ" : "‚ùå"} (${values.status}) |`;
            });

            summary += `

            [‚öôÔ∏è Summary](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }})
            `;

            const output = {
              summary,
              actions: iosSuccess ? [] : [{
                // 20 chars max
                label: "Regen. Pods",
                // 20 chars max
                identifier: "regen_pods",
                // 40 chars max
                description: "Will regenerate cocoapods lockfile",
              }],
            }
            fs.writeFileSync("summary.json", JSON.stringify(output), "utf-8");
      - uses: actions/upload-artifact@v3
        name: upload output
        with:
          path: ${{ github.workspace }}/summary.json
          name: summary.json
