name: "@Mobile • Regen Pods"
run-name: "@${{ inputs.login }} triggered @Mobile • Regen Pods ${{ inputs.ref && format('on branch {0}', inputs.ref) || format('on PR {0}', inputs.number) }}"

on:
  workflow_dispatch:
    inputs:
      ref:
        description: The branch to generate pods for.
        required: false
      number:
        description: The pull request number.
        required: false
      login:
        description: The GitHub username that triggered the workflow
        required: true
      comment:
        description: Update the workflow status in a pull request comment
        type: boolean
        required: false
        default: false

env:
  comment_header: <!-- regen-pods-report:${{ github.run_id }} -->

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref_name != 'develop' }}

jobs:
  regen-pods:
    runs-on: macos-latest
    name: "Regenerate Podfile"
    env:
      SKIP_BUNDLE_CHECK: 1
    steps:
      - uses: actions/checkout@v3
        if: ${{ github.event.inputs.ref != null }}
        with:
          ref: ${{ github.event.inputs.ref }}
      - uses: actions/checkout@v3
        if: ${{ !github.event.inputs.ref }}
      - name: Checkout PR
        if: ${{ github.event.inputs.number != null }}
        run: gh pr checkout ${{ github.event.inputs.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: set git user
        run: |
          git config user.email "team-live@ledger.fr"
          git config user.name "Team Live"
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: pnpm
          cache-dependency-path: "**/pnpm-lock.yaml"
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2
      - name: Cache LLM pods
        uses: actions/cache@v3
        with:
          path: |
            apps/ledger-live-mobile/ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('apps/ledger-live-mobile/ios/Podfile.lock') }}
      - name: install dependencies
        run: pnpm i --filter="live-mobile..." --filter="ledger-live" --no-frozen-lockfile --unsafe-perm
      - name: regenerate pods
        run: pnpm mobile pod
      - name: status
        id: check-status
        run: echo "status=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT
      - name: commit and push changes
        if: steps.check-status.outputs.status != 0
        run: >
          git add ./apps/ledger-live-mobile/ios &&
          git commit -m 'chore(🍏): regenerate podfile' &&
          git restore . &&
          git pull --rebase &&
          git push
      - uses: ./tools/actions/composites/pr-comment
        if: failure() && github.event.inputs.number != null
        with:
          number: ${{ github.event.inputs.number }}
          body: |
            #### ❌ Podfile regeneration failed

            @${{ github.event.inputs.login }}: you can check [the action logs](https://github.com/LedgerHQ/ledger-live/runs/${{ github.run_id }}) for more information.
      - uses: ./tools/actions/composites/pr-comment
        if: github.event.inputs.number != null && steps.check-status.outputs.status != 0
        with:
          number: ${{ github.event.inputs.number }}
          body: |
            #### 🚀 Podfile regenerated

            @${{ github.event.inputs.login }}: the podfile has been regenerated and a commit has been pushed to your branch.
      - uses: ./tools/actions/composites/pr-comment
        if: github.event.inputs.number != null && steps.check-status.outputs.status == 0
        with:
          number: ${{ github.event.inputs.number }}
          body: |
            #### ✨ No changes detected

            @${{ github.event.inputs.login }}: the podfile is already up to date.

  report-start:
    name: Report start
    runs-on: ubuntu-latest
    steps:
      - name: report start
        uses: actions/github-script@v6
        if: github.event.inputs.comment
        with:
          result-encoding: string
          retries: 3
          script: |
            const {repo: {owner, repo}, run_id} = context
            const issue_number = ${{ github.event.inputs.number }}
            const body = `\
            ${{ env.comment_header }}
            @${{ github.event.inputs.login }}

            [Regenerating Pods: workflow started](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body,
            });

  report-end:
    name: Report end
    needs: [regen-pods, report-start]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: report job status
        uses: actions/github-script@v6
        with:
          result-encoding: string
          retries: 3
          script: |
            const fs = require("fs");
            const {repo: {owner, repo}} = context;
            const {data: {jobs}} = await github.rest.actions.listJobsForWorkflowRun({
              owner,
              repo,
              run_id: ${{ github.run_id }},
            });
            console.log("jobs", jobs);

            const jobsStatusString = jobs
              .filter(job => job.name.startsWith("regen-pods"))
              .map(job => `${job.conclusion === "success" ? "✅" : "❌"} - [${job.name}](${job.html_url})`)
              .join("\n")

            const body = `\
            ${{ env.comment_header }}
            @${{ github.event.inputs.login }}

            [Regenerating Pods: workflow ended](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            **Jobs status:**
            ${jobsStatusString}
            `

            const output = {
              summary: body,
            };

            fs.writeFileSync("summary.json", JSON.stringify(output), "utf-8");

            if(${{ github.event.inputs.comment }}) {
              const existingComment = await github.paginate(
                github.rest.issues.listComments,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: ${{ github.event.inputs.number }},
                },
                (response, done) => {
                  const comments = response.data
                  const existingComment = comments
                    .find(comment =>
                      comment.user.login === 'github-actions[bot]' &&
                      comment.body.startsWith(`${{ env.comment_header }}`));
                  if (existingComment) {
                    done()
                    return existingComment;
                  };
                }
              ).then(resPerPage => resPerPage.find(res => !!res));

              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: existingComment?.id,
                  body
                });
              } else {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: ${{ github.event.inputs.number }},
                  body,
                })
              }
            }
      - uses: actions/upload-artifact@v3
        name: upload summary
        with:
          name: summary.json
          path: ${{ github.workspace }}/summary.json
