name: "[Test] Mobile App"

on:
  push:
    branches:
      - main
      - develop
      - release
      - hotfix
  workflow_dispatch:
    inputs:
      check_run_id:
        description: id to update the check run on PR
        required: false
      sha:
        description: the head sha to target the correct check run
        required: false
      ref:
        description: the branch which triggered this workflow
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.ref || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'workflow_dispatch' && github.events.inputs.ref != 'develop' || github.ref_name != 'develop' }}

jobs:
  update-check:
    name: "Update Checks on PR"
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.check_run_id != '' && github.event.inputs.sha != ''
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const previous = await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: "${{ github.event.inputs.sha }}",
              check_run_id: "${{ github.event.inputs.check_run_id }}",
            });
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: previous.data.name,
              head_sha: "${{ github.event.inputs.sha }}",
              check_run_id: "${{ github.event.inputs.check_run_id }}",
              details_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`,
              status: "in_progress",
              started_at: new Date().toISOString(),
              output: {
                title: "⚙️ Testing",
                summary: `You can follow the progress of the tests [here](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }})`
              }
            });

  codecheck:
    name: "Ledger Live Mobile CodeCheck"
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha || github.event.inputs.ref || github.ref }}
      - uses: pnpm/action-setup@v2
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: pnpm
          cache-dependency-path: "**/pnpm-lock.yaml"
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - name: Install dependencies
        run: pnpm i --filter="live-mobile..." --filter="ledger-live" --no-frozen-lockfile --unsafe-perm
      - name: Run linter
        run: pnpm lint --filter="live-mobile" --api="http://127.0.0.1:${{ steps.turborepo-cache-server.outputs.port }}" --token="yolo" --team="foo" -- --format="json" -o="lint.json"
      - name: Run code checkers
        run: pnpm typecheck --filter="live-mobile" --api="http://127.0.0.1:${{ steps.turborepo-cache-server.outputs.port }}" --token="yolo" --team="foo"
      - name: ls and git
        run: |
          git status
          ls ./apps/ledger-live-mobile
      - uses: actions/upload-artifact@v3
        name: "uploads LINTER results"
        with:
          name: lint
          path: ${{ github.workspace }}/apps/ledger-live-mobile/lint.json

  report:
    needs: codecheck
    if: always() && github.event_name == 'workflow_dispatch' && github.event.inputs.check_run_id != '' && github.event.inputs.sha != ''
    runs-on: ubuntu-latest
    steps:
      - name: "download linter results"
        uses: actions/download-artifact@v3
        with:
          name: lint
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - uses: actions/github-script@v6
        name: "format report"
        id: status
        with:
          script: |
            const statuses = [
              "${{ needs.codecheck.result }}"
            ];

            const isSuccess = Boolean(${{ needs.codecheck.result == 'success' }});

            const isFailed = statuses.some(e => e === "failure");
            const isCancelled = statuses.some(e => e === "cancelled");

            let summary = `### Codechecks
            ${ isSuccess ? "💚 Everything is fine" : "❌ Unfortunately some checks did not pass"}
            **Code checks** ended with status => ${{needs.codecheck.result}}
            `;

            return {
              isFailed,
              isCancelled,
              summary
            };
      - uses: actions/github-script@v6
        name: update checks
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const path = require("path");
            const lintResult = require("./lint.json");
            const status = ${{ steps.status.outputs.result }};
            const title = status.isFailed ? "🔴 Failed" : status.isCancelled ? "♾ Cancelled" : "💚 Success";

            const LEVELS = {
              0: "notice",
              1: "warning",
              2: "failure"
            };

            const withErrorOrWarning = lintResult.filter(r => r.errorCount > 0 || r.fatalErrorCount > 0 || r.warningCount > 0);
            let annotations = withErrorOrWarning.flatMap(({ filePath, messages }) =>
              messages.map((m) => ({
                path: path.relative(process.env.GITHUB_WORKSPACE, filePath),
                start_line: m.line,
                end_line: m.endLine,
                start_column: m.column,
                end_column: m.endColumn,
                annotation_level: LEVELS[m.severity],
                message: m.message,
                title: m.ruleId,
              }))
            );

            const split = Math.ceil(annotations.length / 50);
            const extras = {
              conclusion: status.isFailed ? 'failure' : status.isCancelled ? 'cancelled' : 'success',
              completed_at: new Date().toISOString(),
            };

            for (let i = 0; i < split; i++) {
              const batchedAnnotations = annotations.splice(0, 50);
              const previous = await github.rest.checks.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head_sha: "${{ github.event.inputs.sha }}",
                check_run_id: "${{ github.event.inputs.check_run_id }}",
              });
              await github.rest.checks.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: previous.data.name,
                details_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }}`,
                head_sha: "${{ github.event.inputs.sha }}",
                check_run_id: "${{ github.event.inputs.check_run_id }}",
                status: annotations.length === 0 ? "completed" : "in_progress",
                output: {
                  title,
                  annotations: batchedAnnotations,
                  summary: `${status.summary}

            ---
            [⚙️ Summary](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }})`
                },
                ...(annotations.length === 0 ? extras : {}),
              });
            }
