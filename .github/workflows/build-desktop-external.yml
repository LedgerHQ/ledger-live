name: "[Build] Desktop App (external)"

on:
  workflow_dispatch:
    inputs:
      sha:
        description: the head sha to target the correct check run
        required: false
      ref:
        description: the branch which triggered this workflow
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.ref }}
  cancel-in-progress: ${{ github.event.inputs.ref != 'develop' }}

jobs:
  build-desktop-app:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    name: "Build Ledger Live Desktop"
    runs-on: ${{ matrix.os }}
    outputs:
      linux: ${{ steps.save-result.outputs.ubuntu-latest }}
      windows: ${{ steps.save-result.outputs.windows-latest }}
      mac: ${{ steps.save-result.outputs.macos-latest }}
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
    steps:
      - name: Format os name
        id: os
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            if ("${{ matrix.os }}" === "ubuntu-latest") {
              return "linux"
            } else if ("${{ matrix.os }}" === "macos-latest") {
              return "mac"
            } else if ("${{ matrix.os }}" === "windows-latest") {
              return "win"
            }
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.push.head.sha }}
      - name: Set git user
        run: |
          git config user.email "team-live@ledger.fr"
          git config user.name "Team Live"
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2
          bundler-cache: true
      - uses: pnpm/action-setup@v2
        with:
          version: latest
          dest: ${{ runner.temp }}/setup-pnpm
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: pnpm
          cache-dependency-path: "**/pnpm-lock.yaml"
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - uses: ./tools/actions/composites/build-desktop
        id: build-desktop
        with:
          os: ${{ steps.os.outputs.result }}
      - name: Build the app
        id: build-app
        run: pnpm build:lld --api="http://127.0.0.1:${{ steps.turborepo-cache-server.outputs.port }}" --token="yolo" --team="foo"
      - name: Save result
        id: save-result
        shell: bash
        if: always()
        run: |
          echo "${{matrix.os}}=${{steps.build-app.outcome}}" >> $GITHUB_OUTPUT
      - name: Upload linux app
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build-desktop.outputs.version }}-linux-x86_64.AppImage
          path: ${{ github.workspace }}/apps/ledger-live-desktop/dist/${{ steps.build-desktop.outputs.name }}-${{ steps.build-desktop.outputs.version }}-linux-x86_64.AppImage
      - name: Upload macOS app
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build-desktop.outputs.version }}-mac.dmg
          path: ${{ github.workspace }}/apps/ledger-live-desktop/dist/${{ steps.build-desktop.outputs.name }}-${{ steps.build-desktop.outputs.version }}-mac.dmg
      - name: Upload windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build-desktop.outputs.version }}-win-x64.exe
          path: ${{ github.workspace }}/apps/ledger-live-desktop/dist/${{ steps.build-desktop.outputs.name }}-${{ steps.build-desktop.outputs.version }}-win-x64.exe

  report:
    needs: build-desktop-app
    runs-on: ubuntu-latest
    if: always() && !cancelled() && github.event_name == 'workflow_dispatch' && github.event.inputs.sha != ''
    steps:
      - name: Echo outputs
        run: |
          echo "${{ toJSON(needs.build-desktop-app) }}"
      - uses: actions/github-script@v6
        name: Get statuses of runs
        id: status
        with:
          script: |
            const fs = require("fs");
            const keys = {
              mac: {
                symbol: "üçè",
                name: "macOS"
              },
              windows: {
                symbol: "ü™ü",
                name: "Windows"
              },
              linux: {
                symbol: "üêß",
                name: "Linux"
              },
            };
            const report = {
              mac: {
                pass: ${{ needs.build-desktop-app.outputs.mac == 'success' }},
                status: "${{ needs.build-desktop-app.outputs.mac }}",
              },
              linux: {
                pass: ${{ needs.build-desktop-app.outputs.linux == 'success' }},
                status: "${{ needs.build-desktop-app.outputs.linux }}",
              },
              windows: {
                pass: ${{ needs.build-desktop-app.outputs.windows == 'success' }},
                status: "${{ needs.build-desktop-app.outputs.windows }}",
              },
            };

            let summary = ``;

            summary += `|`

            const reportKeys = Object.keys(report);

            reportKeys.forEach((k) => {
              summary += ` ${keys[k].symbol} ${keys[k].name} |`;
            });

            summary += `
            |`;

            for (let i = 0; i < reportKeys.length; i++) {
              summary += ` :--: |`;
            }

            summary += `
            |`;

            Object.entries(report).forEach(([os, values]) => {
              summary += ` ${values.pass ? "‚úÖ" : "‚ùå"} (${values.status}) |`;
            });

            summary += `

            [‚öôÔ∏è Summary](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }})
            `;

            const data = {
              summary,
            }
            fs.writeFileSync("summary.json", JSON.stringify(data), "utf-8");
      - uses: actions/upload-artifact@v3
        name: Upload output
        with:
          path: ${{ github.workspace }}/summary.json
          name: summary.json
