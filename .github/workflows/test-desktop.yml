name: "[Test] Desktop App"

on:
  push:
    branches:
      - main
      - develop
      - release
      - hotfix
  workflow_dispatch:
    inputs:
      sha:
        description: the head sha to target the correct check run
        required: false
      ref:
        description: the branch which triggered this workflow
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.ref || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref != 'develop' || github.ref_name != 'develop' }}

env:
  comment_header: <!-- test-desktop-report -->

jobs:
  typecheck:
    name: "Ledger Live Desktop TypeCheck"
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
      CI_OS: ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha || github.event.inputs.ref || github.ref }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - name: Install dependencies
        run: pnpm i --filter="ledger-live-desktop..." --filter="ledger-live" --frozen-lockfile --unsafe-perm
      - name: Build dependencies
        run: pnpm build:lld:deps --api="http://127.0.0.1:${{ steps.turborepo-cache-server.outputs.port }}" --token="yolo" --team="foo"
      - name: Run code checkers
        run: pnpm desktop test:codecheck

  unit-tests:
    name: "Ledger Live Desktop Unit Tests"
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
      CI_OS: ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha || github.event.inputs.ref || github.ref }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - name: Install dependencies
        run: pnpm i --filter="ledger-live-desktop..." --filter="ledger-live" --frozen-lockfile --unsafe-perm
      - name: Build dependencies
        run: pnpm build:lld:deps --api="http://127.0.0.1:${{ steps.turborepo-cache-server.outputs.port }}" --token="yolo" --team="foo"
      - name: Run unit tests
        run: pnpm desktop test:jest

  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: [ledger-live, linux]
    outputs:
      label: ${{ steps.start-ec2-linux-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-linux-runner.outputs.ec2-instance-id }}
    steps:
      - name: Start EC2 Linux Runner
        id: start-ec2-linux-runner
        uses: LedgerHQ/actions/ec2-linux-runner@main
        with:
          mode: start
          github-token: ${{ secrets.CI_BOT_TOKEN }}
          project: 2049
          aws-nfs-logging: true
          ami-name-filter: ledger-live-runner
          instance-volume-size: 30
          instance-type: c5.4xlarge

  stop-runner:
    name: Stop self-hosted EC2 runner
    if: ${{ always() && needs.start-runner.result == 'success' }}
    needs: [start-runner, test-desktop-app-linux]
    runs-on: [ledger-live, linux]
    steps:
      - name: Stop EC2 Linux Runner
        uses: LedgerHQ/actions/ec2-linux-runner@main
        with:
          mode: stop
          github-token: ${{ secrets.CI_BOT_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

  # REWORK WINDOWS FOR OWN RUNNERS ? WAITING FOR KUBERNETES SOLUTION FROM INFRA ?
  test-desktop-app-windows:
    name: "Live Desktop Tests (Windows)"
    outputs:
      status: ${{ steps.test-desktop.outputs.outcome }}
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
      CI_OS: "windows-latest"
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      # DEBUG: "pw:browser*"
      # DEBUG_LOGS: 1
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha || github.event.inputs.ref || github.ref }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
      - name: Install node-gyp globally
        run: |
          pnpm add -g node-gyp
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - uses: ./tools/actions/composites/test-desktop
        id: test-desktop
        with:
          os: windows
          turbo-server-port: ${{ steps.turborepo-cache-server.outputs.port }}

  test-desktop-app-linux:
    name: "Live Desktop Tests (Linux)"
    outputs:
      status: ${{ steps.test-desktop.outputs.outcome-linux }}
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      INSTRUMENT_BUILD: true
      FORCE_COLOR: 3
      CI_OS: "ubuntu-latest"
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      # DEBUG: "pw:browser*"
      # DEBUG_LOGS: 1
    needs: [start-runner]
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha || github.event.inputs.ref || github.ref }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
        with:
          skip_python: true
          skip_ruby: true
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - uses: ./tools/actions/composites/test-desktop
        id: test-desktop
        with:
          os: linux
          turbo-server-port: ${{ steps.turborepo-cache-server.outputs.port }}

  test-desktop-app-mac:
    name: "Live Desktop Tests (macOS X)"
    runs-on: [ledger-live, macos]
    outputs:
      status: ${{ steps.test-desktop.outputs.outcome }}
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3
      CI_OS: "macos-latest"
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      # DEBUG: "pw:browser*"
      # DEBUG_LOGS: 1
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha || github.event.inputs.ref || github.ref }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
        with:
          skip_python: true
          skip_ruby: true
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - uses: ./tools/actions/composites/test-desktop
        id: test-desktop
        with:
          os: macos
          turbo-server-port: ${{ steps.turborepo-cache-server.outputs.port }}

  report:
    needs:
      [
        typecheck,
        unit-tests,
        test-desktop-app-linux,
        test-desktop-app-windows,
        test-desktop-app-mac,
      ]
    runs-on: ubuntu-latest
    if: always() && !cancelled() && github.event_name == 'workflow_dispatch' && github.event.inputs.sha != ''
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha || github.event.inputs.ref || github.ref }}
      - name: download images artifacts
        uses: actions/download-artifact@v3
        with:
          name: images
      - name: parse images
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");
            const files = ["images-linux", "images-windows", "images-macos"];
            let result = {};
            for (const file of files) {
              try {
                const raw = JSON.parse(fs.readFileSync("${{github.workspace}}/" + file + ".json"));
                const key = file.replace("images-", "").replace("-latest", "").trim()
                result[key] = raw;
              } catch (err) {
                console.log(err);
              }
            }
            fs.writeFileSync("./images.json", JSON.stringify(result, null, 2));
      - name: prepare comment with screenshots
        id: comment
        uses: ./tools/actions/prepare-comment-screenshots
        with:
          images: images.json
          no-actor: true
      - uses: actions/github-script@v6
        name: prepare status
        id: status
        with:
          script: |
            const fs = require("fs");
            const keys = {
              mac: {
                symbol: "üçè",
                name: "macOS"
              },
              windows: {
                symbol: "ü™ü",
                name: "Windows"
              },
              linux: {
                symbol: "üêß",
                name: "Linux"
              },
            };

            const typecheck = {
              pass: ${{ needs.typecheck.result == 'success' }},
              status: "${{ needs.typecheck.result }}",
            };

            const unitTests = {
              pass: ${{ needs.unit-tests.result == 'success' }},
              status: "${{ needs.unit-tests.result }}",
            };

            const report = {
              mac: {
                pass: ${{ needs.test-desktop-app-mac.outputs.status == 'success' }},
                status: "${{ needs.test-desktop-app-mac.outputs.status }}",
              },
              linux: {
                pass: ${{ needs.test-desktop-app-linux.outputs.status == 'success' }},
                status: "${{ needs.test-desktop-app-linux.outputs.status }}",
              },
              windows: {
                pass: ${{ needs.test-desktop-app-windows.outputs.status == 'success' }},
                status: "${{ needs.test-desktop-app-windows.outputs.status }}",
              },
            };

            let summary = `### TypeCheck
            ${typecheck.pass ? "Typechecks are fine" : "Unfortunately typechecks did not pass"}
              - ${typecheck.pass ? "‚úÖ" : "‚ùå"} **Type checks** ended with status \`${typecheck.status}\`

            ### Unit Tests (Jest)
            ${unitTests.pass ? "Unit tests are fine" : "Unit tests did not pass"}
              - ${unitTests.pass ? "‚úÖ" : "‚ùå"} **Unit tests** ended with status \`${unitTests.status}\`

            ### Screenshot Tests (Playwright)
            `

            summary += `|`

            const reportKeys = Object.keys(report);

            reportKeys.forEach((k) => {
              summary += ` ${keys[k].symbol} ${keys[k].name} |`;
            });

            summary += `
            |`;

            for (let i = 0; i < reportKeys.length; i++) {
              summary += ` :--: |`;
            }

            summary += `
            |`;

            Object.entries(report).forEach(([os, values]) => {
              summary += ` ${values.pass ? "‚úÖ" : "‚ùå"} (${values.status}) |`;
            });

            summary += `
            ${{ steps.comment.outputs.body }}
            `

            const output = {
              summary,
              actions: [{
                // 20 chars max
                label: "Regen. Screenshots",
                // 20 chars max
                identifier: "regen_screenshots",
                // 40 chars max
                description: "Will regenerate playwright screenshots",
              }],
            };

            fs.writeFileSync("summary.json", JSON.stringify(output), "utf-8");
      - uses: actions/upload-artifact@v3
        name: upload summary
        with:
          name: summary.json
          path: ${{ github.workspace }}/summary.json

  allure-report:
    name: "Allure Reports Export on Server"
    needs:
      [test-desktop-app-windows, test-desktop-app-linux, test-desktop-app-mac]
    runs-on: [ledger-live, linux]
    if: ${{ always() && !cancelled() }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.sha || github.event.inputs.ref || github.ref }}
      - name: Download Allure Report - Windows
        uses: actions/download-artifact@v3
        with:
          name: allure-results-windows
          path: allure-results-windows
      - name: Download Allure Report - MacOS
        uses: actions/download-artifact@v3
        with:
          name: allure-results-macos
          path: allure-results-macos
      - name: Download Allure Report - Linux
        uses: actions/download-artifact@v3
        with:
          name: allure-results-linux
          path: allure-results-linux
      - name: Send Results and Generate Allure Report - Windows
        uses: ./tools/actions/composites/upload-allure-report
        if: always()
        with:
          platform: windows
          login: ${{ secrets.ALLURE_LOGIN }}
          password: ${{ secrets.ALLURE_PASSWORD }}
          path: allure-results-windows
      - name: Send Results and Generate Allure Report - MacOS
        uses: ./tools/actions/composites/upload-allure-report
        if: always()
        with:
          platform: macos
          login: ${{ secrets.ALLURE_LOGIN }}
          password: ${{ secrets.ALLURE_PASSWORD }}
          path: allure-results-macos
      - name: Send Results and Generate Allure Report - Linux
        uses: ./tools/actions/composites/upload-allure-report
        if: always()
        with:
          platform: linux
          login: ${{ secrets.ALLURE_LOGIN }}
          password: ${{ secrets.ALLURE_PASSWORD }}
          path: allure-results-linux
