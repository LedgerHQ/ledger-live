name: "[Release](Hotfix) Prepare for releasing"

on:
  workflow_dispatch:
    inputs:
      ref:
        description: the branch to release from
        default: hotfix
        required: true

jobs:
  prepare-release:
    name: Prepare Hotfix
    runs-on: ubuntu-24.04
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
    steps:
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          token: ${{ steps.generate-token.outputs.token }}

      - name: Setup git user
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-git-user

      - name: Setup the toolchain
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-toolchain

      - name: install dependencies
        run: pnpm i -F "ledger-live"

      - name: Generate changeset status
        run: pnpm changeset status --output=changeset-status.json

      - name: Enforce use of patch level changesets only for hotfixes
        run: |
          MINOR_MAJOR_CHANGESET_IDS=$(jq -r '.changesets[] | select(.releases[].type == "minor" or .releases[].type == "major") | .id' changeset-status.json)
          if [ -n "$MINOR_MAJOR_CHANGESET_IDS" ]; then
            echo "Major/minor changesets found:"
            echo "$MINOR_MAJOR_CHANGESET_IDS"
            echo "❌ Hotfixes must use patch level changesets only"
            exit 1
          else
            echo "✅ No major/minor level changesets found."
          fi

      - name: exit prerelease mode
        run: pnpm changeset pre exit

      - name: versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm changeset version

      - name: commit
        run: |
          git add .
          git commit -m "chore(hotfix): :fire: hotfix release [skip ci]"

      - name: push changes
        run: |
          git push origin ${{ inputs.ref }}
