name: "@Libs ‚Ä¢ Regen Doc Files"
run-name: "@Libs ‚Ä¢ Regen Doc Files triggered by ${{ inputs.login }} ${{ inputs.ref && format('on branch {0}', inputs.ref) || format('on PR {0}', inputs.number) }}"

on:
  workflow_dispatch:
    inputs:
      ref:
        description: The branch to generate pods for.
        required: false
      number:
        description: The pull request number.
        required: false
      login:
        description: The GitHub username that triggered the workflow
        required: false
      commentId:
        description: comment id to update
        required: false

concurrency:
  # See: https://github.com/orgs/community/discussions/35341
  group: ${{ github.workflow }}-${{ github.event.inputs.ref || github.event.inputs.number }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  regen-doc:
    runs-on: ubuntu-latest
    steps:
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        if: ${{ inputs.ref != null }}
        with:
          ref: ${{ inputs.ref }}
          token: ${{ steps.generate-token.outputs.token }}
      - uses: actions/checkout@v4
        if: ${{ !inputs.ref }}
        with:
          token: ${{ steps.generate-token.outputs.token }}
      - name: Checkout PR
        if: ${{ inputs.number != null }}
        run: gh pr checkout ${{ inputs.number }}
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: Setup git user
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-git-user@develop
      - name: Setup the toolchain
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-toolchain@develop
        id: toolchain
        with:
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          skip-turbo-cache: "false"
      - name: Install dependencies
        run: pnpm i --filter="!./apps/**"
      - name: run doc
        run: pnpm doc:ljs --api="http://127.0.0.1:${{ steps.toolchain.outputs.port }}" --token="${{ secrets.TURBOREPO_SERVER_TOKEN }}" --team="foo"
      - name: status
        id: check-status
        run: echo "status=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT
      - name: commit and push changes
        if: steps.check-status.outputs.status != 0
        run: >
          git add ./apps/ledger-live-mobile/ios &&
          git commit -m 'chore(üìô): regenerate documentation for ledgerjs' &&
          git restore . &&
          git pull --rebase &&
          git push
      - name: create summary (failure)
        if: failure() && inputs.number != null
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const fs = require("fs");
            const body = `#### ‚ùå Documentation regeneration failed

            @${{ inputs.login }}: you can check [the action logs](https://github.com/LedgerHQ/ledger-live/runs/${{ github.run_id }}) for more information.`;
            fs.writeFileSync("summary.txt", body, "utf8");
      - name: create summary (success)
        if: inputs.number != null && steps.check-status.outputs.status != 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const fs = require("fs");
            const body = `#### üöÄ Documentation regenerated

            @${{ inputs.login }}: the documentation has been regenerated and a commit has been pushed to your branch.`;
            fs.writeFileSync("summary.txt", body, "utf8");
      - name: create summary (no change)
        if: inputs.number != null && steps.check-status.outputs.status == 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const fs = require("fs");
            const body = `#### ‚ú® No changes detected

            @${{ inputs.login }}: the documentation is already up to date.`;
            fs.writeFileSync("summary.txt", body, "utf8");
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        name: upload summary
        with:
          name: summary.txt
          path: ${{ github.workspace }}/summary.txt

  report-start:
    name: Report start
    runs-on: ubuntu-latest
    if: inputs.commentId != ''
    steps:
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - name: report start
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          result-encoding: string
          retries: 3
          script: |
            const {repo: {owner, repo}, run_id} = context
            const issue_number = ${{ inputs.number }}
            const body = `\
            @${{ inputs.login }}: triggered \`/regen-pods\`

            [Regenerating Documentation: workflow started](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: "${{ inputs.commentId }}",
              body,
            });

  report-end:
    name: Report end
    needs: [regen-doc, report-start]
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - uses: actions/download-artifact@v4
        name: download summary
        with:
          name: summary.txt
      - name: report job status
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          result-encoding: string
          retries: 3
          script: |
            const fs = require("fs");
            const {repo: {owner, repo}} = context;
            const summary = fs.readFileSync("${{ github.workspace }}/summary.txt", "utf8");

            const body = `\
            ${summary}

            [Regenerating Documentation: workflow ended](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            const output = {
              summary: body,
            };

            fs.writeFileSync("summary.json", JSON.stringify(output), "utf-8");

            if(${{ inputs.commentId != '' }}) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: "${{ inputs.commentId }}",
                body
              });
            }
      - uses: actions/upload-artifact@v4
        name: upload summary
        with:
          name: summary.json
          path: ${{ github.workspace }}/summary.json
