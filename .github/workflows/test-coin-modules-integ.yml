name: "[Coin] - Test Coin modules - Scheduled"

on:
  schedule:
    - cron: "20 9 * * *"
  workflow_dispatch:
    inputs:
      ref:
        description: "Which ref (branch or tag) to pull from?"
        required: false
        default: develop

permissions:
  id-token: write
  contents: read

jobs:
  integ-tests:
    name: "Coin modules integration tests"
    runs-on: ubuntu-22.04
    outputs:
      summary_text: ${{ steps.summarize.outputs.summary_text }}

    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}

      - name: Setup the caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        with:
          install-proto: true
          skip-turbo-cache: "false"
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}

      - name: Install dependencies
        run: pnpm i --filter="!./apps/**"

      - name: Build
        run: pnpm build:coin-modules:deps

      - name: Test
        id: run-tests
        shell: bash
        env:
          FORCE_COLOR: 0
          NO_COLOR: "1"
        run: |
          set -o pipefail
          pnpm coin-modules:test-integ 2>&1 | tee test-output.log

      - name: Summarize failures (all per-coin)
        id: summarize
        if: always()
        shell: bash
        run: |
          node - <<'NODE' > failed_coins.json
          const fs = require('fs');

          // (defense-in-depth) strip ANSI if any slipped through
          const stripAnsi = s =>
            s.replace(/[\u001B\u009B][[()\]#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nq-uy=><]/g,'');

          const text  = stripAnsi(fs.readFileSync('test-output.log','utf8'));
          const lines = text.split('\n');

          const coins = new Set();

          // Typical per-coin FAIL lines
          const failRe = /libs\/coin-modules\/(coin-[^\s:]+)\s+test-integ:\s+FAIL\b/g;
          let m; while ((m = failRe.exec(text))) coins.add(m[1]);

          // pnpm tail error blocks (package footer)
          for (let i=0;i<lines.length;i++){
            const tail = lines[i].match(/\/libs\/coin-modules\/(coin-[^:]+):\s*$/);
            if (tail) coins.add(tail[1]);
          }

          const list = [...coins].sort();
          const bullets = list.length ? list.map(c => `• ${c}`).join('\n') : '(none)';
          process.stdout.write(JSON.stringify({ bullets }, null, 2));
          NODE

          echo "bullets<<EOF" >> "$GITHUB_OUTPUT"
          jq -r '.bullets' failed_coins.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

  integ-tests-fail:
    name: failure report
    needs: integ-tests
    if: failure() && github.event_name
    runs-on: ubuntu-latest
    steps:
      - name: Post parent message
        id: post_parent
        uses: slackapi/slack-github-action@v2.0.0
        with:
          token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          method: chat.postMessage
          payload: |
            channel: "C05FKJ7DFAP"
            text: "[Test] Coin modules"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "❌ *Coin modules integration tests failed*"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow run>"

      - name: Post per-coin errors in thread (file payload)
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          THREAD_TS: ${{ fromJSON(steps.post_parent.outputs.response).ts }}
          SUMMARY_TEXT: ${{ needs.integ-tests.outputs.summary_text || 'no details found' }}
        run: |
          set -euo pipefail

          header="*Failed coins (one-liners):*\n"

          # Optional: replace backticks with a harmless prime to avoid accidental formatting
          safe_summary=$(printf '%s' "$SUMMARY_TEXT" | sed 's/`/′/g')

          # Combine header + summary into one string for jq to JSON-escape
          combined="${header}${safe_summary}"

          # Build JSON payload safely
          jq -n \
            --arg ch "C05FKJ7DFAP" \
            --arg ts "$THREAD_TS" \
            --arg text "$combined" \
            '{channel:$ch, thread_ts:$ts, text:$text}' \
            > slack-thread-payload.json

      - uses: slackapi/slack-github-action@v2.0.0
        with:
          token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          method: chat.postMessage
          payload-file-path: slack-thread-payload.json

  integ-tests-success:
    name: success report
    needs: integ-tests
    if: success() && github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: post to live-repo-health slack channel
        uses: slackapi/slack-github-action@v2.0.0
        with:
          token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          method: chat.postMessage
          payload: |
            channel: "C05FKJ7DFAP"
            text: "[Test] Coin modules"
            blocks: 
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "✅️ *Coin modules integration tests success*"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow run>"
