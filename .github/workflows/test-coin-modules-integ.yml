name: "[Coin] - Test Coin modules - Scheduled"

on:
  schedule:
    - cron: "20 9 * * *"
  workflow_dispatch:
    inputs:
      ref:
        description: "Which ref (branch or tag) to pull from?"
        required: false
        default: develop

permissions:
  id-token: write
  contents: read

jobs:
  integ-tests:
    name: "Coin modules integration tests"
    runs-on: ubuntu-22.04
    outputs:
      summary_text: ${{ steps.summarize.outputs.summary_text }}

    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      FORCE_COLOR: 3

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}

      - name: Setup the caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        with:
          install-proto: true
          skip-turbo-cache: "false"
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}

      - name: Install dependencies
        run: pnpm i --filter="!./apps/**"

      - name: Build
        run: pnpm build:coin-modules:deps

      - name: Test
        id: run-tests
        shell: bash
        run: |
          set -o pipefail
          pnpm coin-modules:test-integ 2>&1 | tee test-output.log

      - name: Summarize failures (all per-coin)
        id: summarize
        if: always()
        shell: bash
        run: |
          node - <<'NODE' > failure_summary.json
          const fs = require('fs');
          const text = fs.readFileSync('test-output.log', 'utf8');
          const lines = text.split('\n');

          // Detect a coin context anywhere we see its prefix
          const coinPrefix = /libs\/coin-modules\/(coin-[^\s:]+)\s+test-integ(?::|\$)/;

          // Anchor events
          const failLine  = /test-integ:\s+FAIL\b/;
          const passLine  = /test-integ:\s+(PASS|Done|SKIP)\b/;

          // Heuristics for concise error content
          const isConciseErr = (L) =>
            /Invalid|Error|expect\(received\)|AssertionError|Timeout|CryptoAssetsStore is not set|A worker process has failed|Failed\b/i.test(L) &&
            !/^●\s/.test(L) &&              // suite header handled separately
            !/^at\s/.test(L) &&             // stack frames
            !/^>?\s*\d+\s*\|/.test(L) &&    // code frame
            !/^\s*\d+\s\|\s/.test(L) &&
            L.trim().length > 0;

          const reasons = {}; // coin -> Set
          let currentCoin = null;
          let inFailBlock = false;

          // Helper to ensure set exists
          const ensure = (coin) => (reasons[coin] ||= new Set());

          for (let i = 0; i < lines.length; i++) {
            const raw = lines[i];
            const coinHit = raw.match(coinPrefix);
            if (coinHit) {
              currentCoin = coinHit[1];
              inFailBlock = false;
              ensure(currentCoin);
            }

            // Track FAIL start/end within a coin
            if (currentCoin) {
              if (failLine.test(raw)) inFailBlock = true;
              if (passLine.test(raw)) { inFailBlock = false; currentCoin = null; }
            }

            if (!currentCoin) continue;

            // Normalize line (strip pnpm prefix)
            const L = raw.replace(/^.*?test-integ:\s*/, '').trim();

            // 1) Inline concise errors
            if (isConciseErr(L)) ensure(currentCoin).add(L);

            // 2) Jest "● title" + first meaningful line after it
            if (/^● /.test(L)) {
              // Combine the suite/test title with the next meaningful line as context
              let k = i + 1, detail = '';
              for (; k < Math.min(i + 20, lines.length); k++) {
                const nextSanitized = lines[k].replace(/^.*?test-integ:\s*/, '').trim();
                if (isConciseErr(nextSanitized)) { detail = nextSanitized; break; }
              }
              const title = L.replace(/^●\s+/, '');
              ensure(currentCoin).add(`${title} — ${detail || 'failed'}`);
            }
          }

          // 3) Fallback on pnpm tail error blocks (your cosmos case)
          // Looks like:
          // /home/.../libs/coin-modules/coin-cosmos:
          // ERROR @ledgerhq/coin-cosmos@... test-integ: `jest ...`
          // Exit status 1
          lines.forEach((line, idx) => {
            const m = line.match(/\/libs\/coin-modules\/(coin-[^:]+):\s*$/);
            if (m) {
              const coin = m[1];
              ensure(coin);
              let msg = '';
              for (let j = idx + 1; j < idx + 5 && j < lines.length; j++) {
                const s = lines[j].trim();
                if (/^ERROR\b/.test(s)) continue;
                if (s && !/^\s*$/.test(s)) { msg = s; break; }
              }
              ensure(coin).add(msg || 'Exit status 1 (see full log)');
            }
          });

          // Format Slack text
          const clamp = (s, n=240) => (s.length > n ? s.slice(0, n-1) + '…' : s);
          const sections = Object.entries(reasons)
            .filter(([_, set]) => set.size)
            .sort(([a],[b]) => a.localeCompare(b))
            .map(([coin, set]) => `• ${coin}:\n${[...set].map(e => '    - ' + clamp(e)).join('\n')}`);

          const full = sections.join('\n');
          const MAX = 3000;
          const summaryText = full.length > MAX ? full.slice(0, MAX-20) + '\n…(truncated)' : full;

          process.stdout.write(JSON.stringify({ summaryText }, null, 2));
          NODE

          echo "summary_text<<EOF" >> "$GITHUB_OUTPUT"
          jq -r '.summaryText' failure_summary.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

  integ-tests-fail:
    name: failure report
    needs: integ-tests
    if: failure() && github.event_name
    runs-on: ubuntu-latest
    steps:
      - name: Post parent message
        id: post_parent
        uses: slackapi/slack-github-action@v2.0.0
        with:
          token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          method: chat.postMessage
          payload: |
            channel: "C05FKJ7DFAP"
            text: "[Test] Coin modules"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "❌ *Coin modules integration tests failed*"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow run>"

      - name: Post per-coin errors in thread (file payload)
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          THREAD_TS: ${{ fromJSON(steps.post_parent.outputs.response).ts }}
          SUMMARY_TEXT: ${{ needs.integ-tests.outputs.summary_text || 'no details found' }}
        run: |
          set -euo pipefail

          header="*Failed coins (one-liners):*\n"

          # Optional: replace backticks with a harmless prime to avoid accidental formatting
          safe_summary=$(printf '%s' "$SUMMARY_TEXT" | sed 's/`/′/g')

          # Combine header + summary into one string for jq to JSON-escape
          combined="${header}${safe_summary}"

          # Build JSON payload safely
          jq -n \
            --arg ch "C05FKJ7DFAP" \
            --arg ts "$THREAD_TS" \
            --arg text "$combined" \
            '{channel:$ch, thread_ts:$ts, text:$text}' \
            > slack-thread-payload.json

      - uses: slackapi/slack-github-action@v2.0.0
        with:
          token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          method: chat.postMessage
          payload-file-path: slack-thread-payload.json

  integ-tests-success:
    name: success report
    needs: integ-tests
    if: success() && github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: post to live-repo-health slack channel
        uses: slackapi/slack-github-action@v2.0.0
        with:
          token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          method: chat.postMessage
          payload: |
            channel: "C05FKJ7DFAP"
            text: "[Test] Coin modules"
            blocks: 
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "✅️ *Coin modules integration tests success*"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow run>"
