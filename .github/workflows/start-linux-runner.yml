name: Start self-hosted EC2 runner (Linux)
on:
  workflow_call:
    inputs:
      instance-type:
        description: name of runner to use
        required: false
        type: string
        default: t3.medium
        # c5.4xlarge
    secrets:
      CI_BOT_TOKEN:
        required: true
    outputs:
      label:
        description: name of runner to use
        value: ${{ jobs.start-runner.outputs.label }}
      ec2-instance-id:
        description: ec2 instance id
        value: ${{ jobs.start-runner.outputs.ec2-instance-id }}
env:
  AWS_REGION: eu-west-1

jobs:
  start-runner:
    name: start self-hosted EC2 runner
    runs-on: [ledger-live, linux]
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: get latest LLD runner AMI id
        id: get-ami-id
        run: |
          echo "::set-output name=ami-id::$(aws ec2 describe-images  --filters 'Name=name,Values=ledger-live-runner' --query 'Images[*].ImageId' --output text)"
      - name: start EC2 runner
        id: start-ec2-runner
        uses: ledgerhq/ec2-github-runner@main
        with:
          mode: start
          github-token: ${{ secrets.CI_BOT_TOKEN }}
          ec2-image-id: ${{ steps.get-ami-id.outputs.ami-id }}
          ec2-instance-type: ${{ inputs.instance-type }}
          subnet-id: subnet-009c04af0177247e8 # production-shared-public-eu-west-1a
          security-group-id: sg-010daba499648d1e7 # infra-gha-runner-sg
          aws-resource-tags: > # optional, requires additional permissions
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
            ]

      - name: get volume-id
        id: get-volume-id
        run: |
          echo "::set-output name=volume-id::$(aws ec2 describe-instances --instance-ids ${{ steps.start-ec2-runner.outputs.ec2-instance-id }} --query 'Reservations[*].Instances[*].BlockDeviceMappings[*].Ebs.VolumeId' --output text)"
      - name: resize rootfs
        env:
          VOLUME_ID: ${{ steps.get-volume-id.outputs.volume-id }}
        run: |
          aws ec2 modify-volume --size 30 --volume-id $VOLUME_ID
