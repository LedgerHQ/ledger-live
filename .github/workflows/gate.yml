name: The Gate
on:
  pull_request:
  # pr-is-fork:
  #   name: "Check if the PR is a fork"
  #   uses: ./.github/workflows/pr-is-fork.yml
  #   with:
  #     non-pr-result: false
  #   secrets:
  #     token: ${{ secrets.COMMON_READ_ORG }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref_name != 'develop' }}

jobs:
  setup:
    name: "Setup"
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.affected.outputs.affected }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: ./tools/actions/turbo-affected
        id: affected
        with:
          head-ref: ${{ format('origin/{0}', github.event.pull_request.base.ref) }}
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      # Labeller
      - uses: actions/labeler@v4
        with:
          repo-token: "${{ steps.generate-token.outputs.token }}"
      - uses: actions/github-script@v6
        # need to fix with PR is fork ?
        if: github.event.pull_request.head.repo.fork
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            try {
              const { data: rawLabels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              }) || [];
              const labels = rawLabels.map(label => label.name)
              console.log(labels)
              if(labels.includes('fork')) {
                return
              }
              await github.rest.issues.setLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [...labels, 'fork']
              })
            } catch(error) {
              console.error(error)
            }
      - uses: actions/github-script@v6
        name: create output file ("affected.json")
        with:
          script: |
            const fs = require("fs");
            const affected = ${{ steps.affected.outputs.affected }};
            fs.writeFileSync("affected.json", JSON.stringify(affected), "utf-8");
      - uses: actions/upload-artifact@v3
        with:
          name: affected.json
          path: affected.json

  # desktop-builds:
  #   name: "Desktop (builds)"
  #   needs: setup
  #   if: ${{ contains(fromJSON(needs.setup.outputs.affected), 'ledger-live-desktop') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: generate token
  #       id: generate-token
  #       uses: tibdex/github-app-token@v1
  #       with:
  #         app_id: ${{ secrets.GH_BOT_APP_ID }}
  #         private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
  #     - uses: actions/github-script@v6
  #       name: create desktop builds checks
  #       id: desktop-build-check
  #       with:
  #         github-token: ${{ steps.generate-token.outputs.token }}
  #         script: |
  #           const { data } = await github.rest.checks.create({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             head_sha: "${{ github.event.pull_request.head.sha }}",
  #             name: "[Desktop] Builds",
  #             status: "queued"
  #           });
  #           return data.id
  #     - uses: actions/github-script@v6
  #       id: desktop-build
  #       with:
  #         script: |
  #           await github.rest.actions.createWorkflowDispatch({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             ref: "${{ github.event.pull_request.head.ref }}",
  #             workflow_id: "build-desktop.yml",
  #             inputs: {
  #               ref: "${{ github.event.pull_request.head.ref }}",
  #               sha: "${{ github.event.pull_request.head.sha }}",
  #               check_run_id: "${{ steps.desktop-build-check.outputs.result }}"
  #             }
  #           });
  #     - uses: actions/github-script@v6
  #       name: "Triggering desktop build failed"
  #       if: always() && steps.desktop-build.conclusion != 'success'
  #       with:
  #         github-token: ${{ steps.generate-token.outputs.token }}
  #         script: |
  #           const previous = await github.rest.checks.get({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             head_sha: "${{ github.event.pull_request.head.sha }}",
  #             check_run_id: "${{ steps.desktop-build-check.outputs.result }}",
  #           });
  #           await github.rest.checks.update({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             name: previous.data.name,
  #             head_sha: "${{ github.event.pull_request.head.sha }}",
  #             check_run_id: "${{ steps.desktop-build-check.outputs.result }}",
  #             conclusion: "failure",
  #             output: {
  #               title: "Desktop Build Summary",
  #               summary: "Something went wrong when triggering Desktop Build workflow"
  #             },
  #             actions: [{
  #               label: "Rerun",
  #               identifier: "rerun_desktop_builds",
  #               description: "Retry to run the Desktop Build workflow"
  #             }]
  #           });

  # desktop-tests:
  #   name: "Desktop (tests)"
  #   needs: setup
  #   if: ${{ contains(fromJSON(needs.setup.outputs.affected), 'ledger-live-desktop') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: generate token
  #       id: generate-token
  #       uses: tibdex/github-app-token@v1
  #       with:
  #         app_id: ${{ secrets.GH_BOT_APP_ID }}
  #         private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
  #     - uses: actions/github-script@v6
  #       name: "Create Desktop tests checks"
  #       id: desktop-test-check
  #       with:
  #         github-token: ${{ steps.generate-token.outputs.token }}
  #         script: |
  #           const { data } = await github.rest.checks.create({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             head_sha: "${{ github.event.pull_request.head.sha }}",
  #             name: "[Desktop] Tests",
  #             status: "queued"
  #           });
  #           return data.id
  #     - uses: actions/github-script@v6
  #       name: trigger test workflow
  #       id: desktop-test
  #       with:
  #         script: |
  #           await github.rest.actions.createWorkflowDispatch({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             ref: "${{ github.event.pull_request.head.ref }}",
  #             workflow_id: "test-desktop.yml",
  #             inputs: {
  #               ref: "${{ github.event.pull_request.head.ref }}",
  #               sha: "${{ github.event.pull_request.head.sha }}",
  #               check_run_id: "${{ steps.desktop-test-check.outputs.result }}"
  #             }
  #           });
  #     - uses: actions/github-script@v6
  #       name: "triggering desktop test failed"
  #       if: steps.desktop-test.conclusion != 'success'
  #       with:
  #         script: |
  #           const previous = await github.rest.checks.get({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             head_sha: "${{ github.event.pull_request.head.sha }}",
  #             check_run_id: "${{ steps.desktop-test-check.outputs.result }}",
  #           });
  #           await github.rest.checks.update({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             name: previousW.data.name,
  #             check_run_id: "${{ steps.desktop-test-check.outputs.result }}",
  #             conclusion: "failure",
  #             output: {
  #               title: "Desktop Tests Summary",
  #               summary: "Something went wrong when triggering Desktop Tests workflow"
  #             },
  #             actions: [{
  #               label: "Rerun",
  #               identifier: "rerun_desktop_tests",
  #               description: "Retry to run the Desktop Tests workflow"
  #             }]
  #           });

  # mobile-builds:
  #   name: "Mobile (builds)"
  #   needs: setup
  #   if: ${{ contains(fromJSON(needs.setup.outputs.affected), 'live-mobile') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: generate token
  #       id: generate-token
  #       uses: tibdex/github-app-token@v1
  #       with:
  #         app_id: ${{ secrets.GH_BOT_APP_ID }}
  #         private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
  #     - uses: actions/github-script@v6
  #       name: create mobile builds checks
  #       id: mobile-build-check
  #       with:
  #         github-token: ${{ steps.generate-token.outputs.token }}
  #         script: |
  #           const { data } = await github.rest.checks.create({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             head_sha: "${{ github.event.pull_request.head.sha }}",
  #             name: "[Mobile] Builds",
  #             status: "queued"
  #           });
  #           return data.id
  #     - uses: actions/github-script@v6
  #       id: mobile-build
  #       with:
  #         script: |
  #           await github.rest.actions.createWorkflowDispatch({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             ref: "${{ github.event.pull_request.head.ref }}",
  #             workflow_id: "build-mobile.yml",
  #             inputs: {
  #               ref: "${{ github.event.pull_request.head.ref }}",
  #               sha: "${{ github.event.pull_request.head.sha }}",
  #               check_run_id: "${{ steps.mobile-build-check.outputs.result }}"
  #             }
  #           });
  #     - uses: actions/github-script@v6
  #       name: "Triggering mobile build failed"
  #       if: steps.mobile-build.conclusion != 'success'
  #       with:
  #         github-token: ${{ steps.generate-token.outputs.token }}
  #         script: |
  #           const previous = await github.rest.checks.get({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             head_sha: "${{ github.event.pull_request.head.sha }}",
  #             check_run_id: "${{ steps.mobile-build-check.outputs.result }}",
  #           });
  #           await github.rest.checks.update({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             name: previous.data.name,
  #             head_sha: "${{ github.event.pull_request.head.sha }}",
  #             check_run_id: "${{ steps.mobile-build-check.outputs.result }}",
  #             conclusion: "failure",
  #             output: {
  #               title: "Mobile Build Summary",
  #               summary: "Something went wrong when triggering Mobile Build workflow"
  #             },
  #             actions: [{
  #               label: "Rerun",
  #               identifier: "rerun_mobile_build",
  #               description: "Retry to run the Mobile Build workflow"
  #             }]
  #           });

  mobile-tests:
    name: "Mobile (tests)"
    needs: setup
    # if: ${{ contains(fromJSON(needs.setup.outputs.affected), 'live-mobile') }}
    runs-on: ubuntu-latest
    steps:
      - name: generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_BOT_APP_ID }}
          private_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}
      - uses: actions/github-script@v6
        name: "Create Mobile tests checks"
        id: mobile-test-check
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const { data } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: "${{ github.event.pull_request.head.sha }}",
              name: "[Mobile] Tests",
              status: "queued"
            });
            return data.id
      - uses: actions/github-script@v6
        name: trigger test workflow
        id: mobile-test
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "${{ github.event.pull_request.head.ref }}",
              workflow_id: "test-mobile.yml",
              inputs: {
                ref: "${{ github.event.pull_request.head.ref }}",
                sha: "${{ github.event.pull_request.head.sha }}",
                check_run_id: "${{ steps.mobile-test-check.outputs.result }}"
              }
            });
      - uses: actions/github-script@v6
        name: "triggering mobile test failed"
        if: steps.mobile-test.conclusion != 'success'
        with:
          script: |
            const previous = await github.rest.checks.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: "${{ github.event.pull_request.head.sha }}",
              check_run_id: "${{ steps.mobile-test-check.outputs.result }}",
            });
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: previousW.data.name,
              check_run_id: "${{ steps.mobile-test-check.outputs.result }}",
              conclusion: "failure",
              output: {
                title: "Mobile Tests Summary",
                summary: "Something went wrong when triggering Mobile Tests workflow"
              },
              actions: [{
                label: "Rerun",
                identifier: "rerun_mobile_tests",
                description: "Retry to run the Mobile Tests workflow"
              }]
            });
