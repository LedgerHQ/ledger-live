name: "[Test] Desktop App"

on:
  push:
    branches:
      - main
      - develop
      - release
      - hotfix
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref_name != 'develop' }}

env:
  comment_header: <!-- test-desktop-report -->

jobs:
  is-affected:
    outputs:
      is-desktop-affected: ${{ steps.affected.outputs.is-package-affected }}
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: develop
          fetch-depth: 0
      - name: checkout branch (PR)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr checkout ${{ github.event.pull_request.number }}
      - name: checkout branch (not PR)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          git checkout $GITHUB_SHA
      - uses: ./tools/actions/turbo-affected
        id: affected
        with:
          package: "ledger-live-desktop"
          head-ref: ${{ github.event_name == 'pull_request' && format('origin/{0}', github.event.pull_request.base.ref) || 'HEAD^' }}

  # Run dummy jobs when not affected to pass the required status checks
  dummy_tests:
    name: "Ledger Live Desktop Tests"
    needs: is-affected
    if: ${{ needs.is-affected.outputs.is-desktop-affected != 'true' }}
    strategy:
      matrix:
        names:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ubuntu-latest
    steps:
      - id: dummy
        run: exit 0
  dummy_typecheck:
    name: "Ledger Live Desktop TypeCheck"
    needs: is-affected
    if: ${{ needs.is-affected.outputs.is-desktop-affected != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - id: dummy
        run: exit 0

  pr-is-fork:
    name: "Check if the PR is a fork"
    needs: is-affected
    if: ${{ needs.is-affected.outputs.is-desktop-affected == 'true' }}
    uses: ./.github/workflows/pr-is-fork.yml
    with:
      non-pr-result: false
    secrets:
      token: ${{ secrets.COMMON_READ_ORG }}

  typecheck:
    name: "Ledger Live Desktop TypeCheck"
    needs: is-affected
    if: ${{ needs.is-affected.outputs.is-desktop-affected == 'true' }}
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      INSTRUMENT_BUILD: true
      FORCE_COLOR: 3
      # DEBUG: "pw:browser*"
      # DEBUG_LOGS: 1
      CI_OS: ubuntu-latest

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - name: Install dependencies
        run: pnpm i --filter="ledger-live-desktop..." --filter="ledger-live" --frozen-lockfile --unsafe-perm
      - name: Build dependencies
        run: pnpm build:lld:deps --api="http://127.0.0.1:${{ steps.turborepo-cache-server.outputs.port }}" --token="yolo" --team="foo"
      - name: Run code checkers
        run: pnpm desktop test:codecheck

  matrix_prep:
    needs: [pr-is-fork]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [[ "${{ needs.pr-is-fork.outputs.pr-is-fork }}" == "true" ]]; then
            echo "matrix={\"os\": [\"ubuntu-latest\", \"windows-latest\", \"macos-latest\"]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"os\": [\"ubuntu-latest\", \"windows-latest\"]}" >> $GITHUB_OUTPUT
          fi

  test-desktop-app:
    name: "Ledger Live Desktop Tests"
    needs: [matrix_prep]
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      INSTRUMENT_BUILD: true
      FORCE_COLOR: 3
      CI_OS: ${{ matrix.os }}
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      # DEBUG: "pw:browser*"
      # DEBUG_LOGS: 1
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.os }}
    steps:
      - name: format os name
        id: os
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            if ("${{ matrix.os }}" === "ubuntu-latest") {
              return "linux"
            } else if ("${{ matrix.os }}" === "macos-latest") {
              return "macos"
            } else if ("${{ matrix.os }}" === "windows-latest") {
              return "windows"
            }
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
      - name: Install node-gyp globally
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          pnpm add -g node-gyp
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - uses: ./tools/actions/composites/test-desktop
        id: test-desktop
        with:
          os: ${{ steps.os.outputs.result }}
          turbo-server-port: ${{ steps.turborepo-cache-server.outputs.port }}

  test-desktop-app-mac-internal:
    name: "Ledger Live Desktop Tests (macos-latest)"
    needs: [pr-is-fork]
    if: ${{ !fromJSON(needs.pr-is-fork.outputs.pr-is-fork) }}
    runs-on: [ledger-live, macos]
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      INSTRUMENT_BUILD: true
      FORCE_COLOR: 3
      CI_OS: "macos-latest"
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      # DEBUG: "pw:browser*"
      # DEBUG_LOGS: 1
    steps:
      - name: format os name
        id: os
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: return "macos"
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
      - uses: ./tools/actions/composites/setup-test-desktop
        id: setup-test-desktop
        with:
          skip_python: true
          skip_ruby: true
      - name: TurboRepo local caching server
        id: turborepo-cache-server
        uses: ./tools/actions/turborepo-gh-cache
        with:
          server-token: "yolo"
          cleanup-cache-folder: "true"
      - uses: ./tools/actions/composites/test-desktop
        id: test-desktop
        with:
          os: ${{ steps.os.outputs.result }}
          turbo-server-port: ${{ steps.turborepo-cache-server.outputs.port }}

  report:
    needs:
      [is-affected, pr-is-fork, test-desktop-app, test-desktop-app-mac-internal]
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() && needs.is-affected.outputs.is-desktop-affected == 'true' && github.event.pull_request != '' && !fromJSON(needs.pr-is-fork.outputs.pr-is-fork) }}
    steps:
      - uses: actions/checkout@v3
      - name: download images artifacts
        uses: actions/download-artifact@v3
        with:
          name: images
      - name: parse images
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");

            const files = ["images-linux", "images-windows", "images-macos"];

            let result = {};
            for (const file of files) {
              try {
                const raw = JSON.parse(fs.readFileSync("${{github.workspace}}/" + file + ".json"));
                const key = file.replace("images-", "").replace("-latest", "").trim()
                result[key] = raw;
              } catch (err) {
                console.log(err);
              }
            }

            fs.writeFileSync("./images.json", JSON.stringify(result, null, 2));
      - name: prepare comment with screenshots
        id: comment
        uses: ./tools/actions/prepare-comment-screenshots
        with:
          images: images.json
      - name: create/update comment
        uses: actions/github-script@v6
        with:
          script: |
            const body = `${{ env.comment_header }}\n${{ steps.comment.outputs.body }}`;
            const existingComment = await github.paginate(
              github.rest.issues.listComments,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              },
              (response, done) => {
                const comments = response.data
                const existingComment = comments
                  .find(comment =>
                    comment.user.login === 'github-actions[bot]' &&
                    comment.body.startsWith(`${{ env.comment_header }}`));
                if (existingComment) {
                  done()
                  return existingComment;
                }
              }
            ).then(resPerPage => resPerPage.find(res => !!res));
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment?.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              })
            }
