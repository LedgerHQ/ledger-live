name: "[Mobile] - Mock Test - Called"

on:
  workflow_call:
    inputs:
      macos-specificity-runner-label:
        description: The specificity runner label to run the tests on (e.g. performance-pool, performance-pool or runner)
        required: false
        type: string
        default: "performance-pool"
      disable-turbo-cache:
        description: Disable turbo caching
        required: false
        type: boolean
        default: false
      ref:
        description: Ref to checkout
        required: false
        type: string
  workflow_dispatch:
    inputs:
      ref:
        description: |
          If you run this manually, and want to run on a PR, the correct ref should be refs/pull/{PR_NUMBER}/merge to
          have the "normal" scenario involving checking out a merge commit between your branch and the base branch.
          If you want to run only on a branch or specific commit, you can use either the sha or the branch name instead (prefer the first verion for PRs).
        type: string
        required: false
      login:
        description: The GitHub username that triggered the workflow
        type: string
        required: false
      base_ref:
        description: The base branch to merge the head into when checking out the code
        type: string
        required: false
      speculos_tests:
        description: Run Speculos tests
        required: false
        type: boolean
        default: false
      enable_broadcast:
        description: "Enable transaction broadcast"
        required: false
        type: boolean
        default: false
      production_firebase:
        description: "Target Firebase Production env"
        required: false
        type: boolean
        default: false
      test_filter:
        description: Filter to execute only test suite spec files according to pattern(s) (e.g. to execute nftGallery.spec.ts and deeplinks.spec.ts files "nftGallery deeplinks")
        required: false
      export_to_xray:
        description: Send tests results to Xray
        required: false
        type: boolean
        default: false
      test_execution_android:
        description: "[Android] Test Execution ticket ID. Ex: 'B2CQA-2461'"
        required: false
        type: string
      test_execution_ios:
        description: "[iOS] Test Execution ticket ID. Ex: 'B2CQA-2461'"
        required: false
        type: string

# Uncomment to have log-level: trace on detox run and build
# (cf: apps/ledger-live-mobile/detox.config.js)
# env:
#   DEBUG_DETOX: true

permissions:
  id-token: write
  contents: read

env:
  SPECULOS_IMAGE_TAG: ghcr.io/ledgerhq/speculos:master
  COINAPPS: ${{ github.workspace }}/coin-apps
  SPECULOS_RUN: ${{ inputs.speculos_tests || github.event_name == 'schedule' }}
  SHOULD_UPLOAD: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || (github.event_name == 'push' && contains(fromJson('["develop", "main"]'), github.ref_name)) }}
  IOS_JSBUNDLE_PATH: apps/ledger-live-mobile/ios/build/Build/Products/Release-iphonesimulator/ledgerlivemobile.app/main.jsbundle
  IOS_NATIVE_PATH: apps/ledger-live-mobile/ios/build/Build/Products/Release-iphonesimulator
  ANDROID_APK_PATH: apps/ledger-live-mobile/android/app/build/outputs/apk/detox/app-x86_64-detox.apk
  ANDROID_TESTBINARY_PATH: apps/ledger-live-mobile/android/app/build/outputs/apk/androidTest/detox/app-detox-androidTest.apk
  ANDROID_JSBUNDLE_PATH: apps/ledger-live-mobile/main.jsbundle
  cache-bucket: ll-gha-s3-cache

jobs:
  determine-builds:
    name: "Determine Builds"
    runs-on: ledger-live-medium
    outputs:
      ios_native_exists: ${{ steps.check-ios-native.outputs.cache-hit }}
      ios_js_exists: ${{ steps.check-ios-js.outputs.cache-hit }}
      android_native_exists: ${{ steps.check-android-native.outputs.cache-hit }}
      android_js_exists: ${{ steps.check-android-js.outputs.cache-hit }}
      ios_native_key: ${{ steps.cache-keys.outputs.ios_native_key }}
      ios_js_key: ${{ steps.cache-keys.outputs.ios_js_key }}
      android_native_key: ${{ steps.cache-keys.outputs.android_native_key }}
      android_testbinary_key: ${{ steps.cache-keys.outputs.android_testbinary_key }}
      android_js_key: ${{ steps.cache-keys.outputs.android_js_key }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live
          persist-credentials: false
          sparse-checkout: apps/ledger-live-mobile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/${{ secrets.AWS_CACHE_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_CACHE_REGION }}

      - name: Determine cache keys
        id: cache-keys
        run: |
          echo "ios_native_key=poc-detox-native-ios-${{ hashFiles('apps/ledger-live-mobile/ios') }}" >> $GITHUB_OUTPUT
          echo "android_native_key=poc-detox-native-android-${{ hashFiles('apps/ledger-live-mobile/android') }}" >> $GITHUB_OUTPUT
          echo "ios_js_key=poc-detox-js-ios-${{ inputs.ref || github.sha }}" >> $GITHUB_OUTPUT
          echo "android_js_key=poc-detox-js-android-${{ inputs.ref || github.sha }}" >> $GITHUB_OUTPUT
          echo "android_testbinary_key=poc-detox-testbinary-android-${{ hashFiles('apps/ledger-live-mobile/android') }}" >> $GITHUB_OUTPUT

      - name: Check if iOS Native Build exists already
        id: check-ios-native
        uses: tespkg/actions-cache/restore@v1.9.0
        with:
          key: ${{ steps.cache-keys.outputs.ios_native_key }}1
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false
          lookup-only: true

      - name: Check if Android Native Build exists already
        id: check-android-native
        uses: tespkg/actions-cache/restore@v1.9.0
        with:
          key: ${{ steps.cache-keys.outputs.android_native_key }}1
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false
          lookup-only: true

      - name: Check if iOS JS Build exists already
        id: check-ios-js
        uses: tespkg/actions-cache/restore@v1.9.0
        with:
          key: ${{ steps.cache-keys.outputs.ios_js_key }}1
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false
          lookup-only: true

      - name: Check if Android JS Build exists already
        id: check-android-js
        uses: tespkg/actions-cache/restore@v1.9.0
        with:
          key: ${{ steps.cache-keys.outputs.android_js_key }}1
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false
          lookup-only: true

  build-ios:
    name: "Build iOS"
    needs: [ determine-builds ]
    uses: LedgerHQ/ledger-live/.github/workflows/test-mobile-build-ios-reusable.yml@support/poc-macOS-sharding
    with:
      ref: ${{ inputs.ref || github.sha }}
      macos-specificity-runner-label: ${{ inputs.macos-specificity-runner-label || 'performance-pool' }}
      disable-turbo-cache: ${{ inputs.disable-turbo-cache || false }}
      build-ios-js: ${{ needs.determine-builds.outputs.ios_js_exists == 'false' }}
      build-ios-native: ${{ needs.determine-builds.outputs.ios_native_exists == false }}
      ios-native-cache-key: ${{ needs.determine-builds.outputs.ios_native_key }}
      ios-js-cache-key: ${{ needs.determine-builds.outputs.ios_js_key }}

  output:
    needs: [determine-builds]
    runs-on:
      - ubuntu-latest
    steps:
      - name: Echo inputs
        run: |
          echo "${{ toJson(needs.determine-builds.outputs.ios_js_exists) }}"
        shell: bash

  detox-tests-ios:
    name: "iOS Detox"
    needs: [ build-ios, determine-builds ]
    runs-on: ["${{ inputs.macos-specificity-runner-label || 'performance-pool' }}", macOS, ARM64]
    if: ${{ !inputs.speculos_tests && github.event_name != 'schedule' && !failure() && !cancelled() }}
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2]
        shardTotal: [2]
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      LANG: en_US.UTF-8
      LANGUAGE: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      SEED: ${{ vars.SEED_QAA_B2C }}
      INPUT_SPECULOS: ${{ inputs.speculos_tests || github.event_name == 'schedule' }}
      INPUTS_TEST_FILTER: ${{ inputs.test_filter }}
    outputs:
      status: ${{ steps.detox.outcome }}
      artifact: ${{ steps.test-artifacts.outputs.artifact-id }}
    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live
          persist-credentials: false

      - name: setup caches
        id: setup-caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        with:
          skip-pod-cache: "true"
          skip-turbo-cache: "false"
          skip-pnpm-cache: "false"
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/${{ secrets.AWS_CACHE_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_CACHE_REGION }}

      - uses: nick-fields/retry@v3
        name: install dependencies
        id: install-dependencies
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="@ledgerhq/dummy-*-app..." --no-frozen-lockfile --unsafe-perm --ignore-scripts
          new_command_on_retry: rm -rf ~/.cocoapods/ && pnpm clean && pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="@ledgerhq/dummy-*-app..." --no-frozen-lockfile --unsafe-perm

      - name: Detox Post Install
        run: node apps/ledger-live-mobile/node_modules/detox/scripts/postinstall.js

      - name: Download Native Build
        uses: tespkg/actions-cache/restore@v1
        with:
          path: ${{ env.IOS_NATIVE_PATH }}
          key: ${{ needs.determine-builds.outputs.ios_native_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Download JS Build
        uses: tespkg/actions-cache/restore@v1
        with:
          path: apps/ledger-live-mobile/main.jsbundle
          key: ${{ needs.determine-builds.outputs.ios_js_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Copy JS build
        run: |
          cp apps/ledger-live-mobile/main.jsbundle ${{ env.IOS_JSBUNDLE_PATH }} 
          cp apps/ledger-live-mobile/main.jsbundle ${{ env.IOS_NATIVE_PATH }}/main.jsbundle
  

      - name: Build dependencies
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:llm:deps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Build Dummy Live SDK and Dummy Wallet API apps for testing
        run: |
          pnpm build:dummy-apps
        shell: bash

      - name: Create iOS simulator
        id: simulator
        run: xcrun simctl create "iOS Simulator" "iPhone 15"

      - name: Setup Speculos image and Coin Apps
        if: ${{ env.SPECULOS_RUN == 'true' }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-speculos_image@develop
        with:
          coinapps_path: ${{ env.COINAPPS }}
          speculos_tag: ${{ env.SPECULOS_IMAGE_TAG }}
          bot_id: ${{ secrets.GH_BOT_APP_ID }}
          bot_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}

      - name: Test iOS app
        id: detox
        timeout-minutes: 75
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm mobile e2e:ci -- -p ios -t $([[ "$INPUT_SPECULOS" == "true" ]] && printf %s '--speculos') ${INPUTS_TEST_FILTER:+--filter} "${{ inputs.test_filter }}" --shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() || steps.detox.outcome == 'cancelled' }}
        id: "test-artifacts"
        with:
          name: "ios-test-artifacts"
          path: apps/ledger-live-mobile/artifacts
      - run: echo "${{ steps.test-artifacts.outputs.artifact-id }}"
#
#  allure-report-ios:
#    name: "iOS Detox > Allure Report"
#    runs-on: [ledger-live-medium]
#    if: ${{ !cancelled() && !inputs.speculos_tests && needs.detox-tests-ios.outputs.artifact }}
#    needs: [detox-tests-ios]
#    outputs:
#      report-url: ${{ steps.upload.outputs.report-url }}
#      result: ${{ steps.summary.outputs.test_result }}
#      status: ${{ needs.detox-tests-ios.outputs.status }}
#    steps:
#      - name: Download Allure Report
#        uses: actions/download-artifact@v4
#        with:
#          path: ios-test-artifacts
#          pattern: ios-test-artifacts*
#          merge-multiple: true
#      - uses: LedgerHQ/ledger-live/tools/actions/composites/upload-allure-report@develop
#        if: ${{ !cancelled() && env.SHOULD_UPLOAD == 'true' }}
#        id: upload
#        with:
#          platform: ios-${{ env.SPECULOS_RUN == 'true' && 'speculos' || 'mocked' }}
#          login: ${{ vars.ALLURE_USERNAME }}
#          password: ${{ secrets.ALLURE_LEDGER_LIVE_PASSWORD }}
#          path: ios-test-artifacts
#      - name: Get summary
#        id: summary
#        if: ${{ !cancelled() }}
#        uses: LedgerHQ/ledger-live/tools/actions/composites/get-allure-summary@develop
#        with:
#          allure-results-path: ios-test-artifacts
#          platform: iOS
#
  build-android-native:
    name: "Android Build Native"
    runs-on: [ledger-live-linux-8CPU-32RAM]
    needs: [determine-builds]
    if: ${{ needs.determine-builds.outputs.android_native_exists != 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live
          persist-credentials: false

      - name: Setup the caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        id: setup-caches
        with:
          install-proto: true
          skip-turbo-cache: "false"
          skip-pnpm-cache: "false"
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}

      - name: setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"

      - name: setup Android SDK
        uses: android-actions/setup-android@v2.0.10

        # https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: Fix emulator directory permissions
        run: sudo chown -R $(whoami):$(id -ng) /usr/local/lib/android/sdk/emulator/

      - name: Install dependencies
        run: |
          pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="live-cli*..." --filter="@ledgerhq/dummy-*-app..." --no-frozen-lockfile --unsafe-perm

      - name: Build dependencies
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:llm:deps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Build Dummy Live SDK and Dummy Wallet API apps for testing
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:dummy-apps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Build Android app for Detox test run
        run: |
          pnpm mobile e2e:ci -p android -b $([[ "$PRODUCTION" == "true" ]] && printf %s '--production')
        env:
          PRODUCTION: ${{ inputs.production_firebase }}

      - name: Upload Detox Native Build
        uses: tespkg/actions-cache/save@v1
        with:
          path: ${{ env.ANDROID_APK_PATH }}
          key: ${{ needs.determine-builds.outputs.android_native_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Upload Detox Testbinary Build
        uses: tespkg/actions-cache/save@v1
        with:
          path: ${{ env.ANDROID_TESTBINARY_PATH }}
          key: ${{ needs.determine-builds.outputs.android_testbinary_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

  build-android-js:
    name: "Android Build JS"
    runs-on: [ ledger-live-4xlarge ]
    if: ${{ needs.determine-builds.outputs.android_js_exists != 'true' }}
    needs: [determine-builds]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/${{ secrets.AWS_CACHE_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_CACHE_REGION }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live
          persist-credentials: false

      - name: setup caches
        id: setup-caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        with:
          skip-pod-cache: "true"
          skip-turbo-cache: "false"
          skip-pnpm-cache: "false"
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}

      - uses: nick-fields/retry@v3
        name: install dependencies
        id: install-dependencies
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="@ledgerhq/dummy-*-app..." --no-frozen-lockfile --unsafe-perm
          new_command_on_retry: rm -rf ~/.cocoapods/ && pnpm clean && pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="@ledgerhq/dummy-*-app..." --no-frozen-lockfile --unsafe-perm

      - name: Build dependencies
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:llm:deps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Build JS Bundle app for Detox test run
        run: pnpm mobile e2e:ci -p android --bundle

      - name: Upload Detox JS Build
        uses: tespkg/actions-cache/save@v1
        with:
          path: ${{ env.ANDROID_JSBUNDLE_PATH }}
          key: ${{ needs.determine-builds.outputs.android_js_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

  detox-tests-android:
    name: "Android Detox"
    needs: [build-android-native, build-android-js, determine-builds]
    if: ${{ !inputs.speculos_tests && github.event_name != 'schedule' && !failure() && !cancelled() }}
    runs-on: [ ledger-live-linux-8CPU-32RAM ]
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      LANG: en_US.UTF-8
      LANGUAGE: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      AVD_API: 35
      AVD_ARCH: x86_64
      AVD_PROFILE: pixel_7_pro
      AVD_TARGET: google_apis
      AVD_NAME: "Android_Emulator"
      AVD_CORES: 4
      AVD_RAM_SIZE: 4096M
      AVD_OPTIONS: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    outputs:
      status_1: ${{ steps.set-output.outputs.status_1 }}
      status_2: ${{ steps.set-output.outputs.status_2 }}
      status_3: ${{ steps.set-output.outputs.status_3 }}
      artifact: ${{ steps.test-artifacts.outputs.artifact-id }}
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2]
        shardTotal: [2]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live
          persist-credentials: false

      - name: setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: setup Android SDK
        uses: android-actions/setup-android@v3.2.2
        with:
          packages: "tools platform-tools"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/${{ secrets.AWS_CACHE_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_CACHE_REGION }}

      - name: Download Native Build
        uses: tespkg/actions-cache/restore@v1
        with:
          path: ${{ env.ANDROID_APK_PATH }}
          key: ${{ needs.determine-builds.outputs.android_native_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Download Native Test binary
        uses: tespkg/actions-cache/restore@v1
        with:
          path: ${{ env.ANDROID_TESTBINARY_PATH }}
          key: ${{ needs.determine-builds.outputs.android_testbinary_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Download JS Bundle
        uses: tespkg/actions-cache/restore@v1
        with:
          path: ${{ env.ANDROID_JSBUNDLE_PATH }}
          key: ${{ needs.determine-builds.outputs.android_js_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Prepare APK
        run: |
          mkdir -p /tmp/apk/assets
          mkdir /home/runner/.android/
          mv ${{ env.ANDROID_JSBUNDLE_PATH }} /tmp/apk/assets/index.android.bundle
          mv ${{ env.ANDROID_APK_PATH }} /tmp/apk/tmp.apk
          (cd /tmp/apk/; zip -r tmp.apk assets/index.android.bundle)
          /usr/local/lib/android/sdk/build-tools/34.0.0/zipalign -p -v 4 /tmp/apk/tmp.apk ${{ env.ANDROID_APK_PATH }}
          /usr/local/lib/android/sdk/build-tools/34.0.0/apksigner sign --ks ${{ secrets.ANDROID_KEYSTORE_PATH }} --ks-pass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} --ks-key-alias staging --key-pass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} ${{ env.ANDROID_APK_PATH }}

      - name: Setup the caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        id: setup-caches
        with:
          install-proto: true
          skip-pnpm-cache: "false"
          skip-turbo-cache: "false"
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}

        # https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
      - name: Enable Hardware Acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Fix emulator directory permissions
        run: sudo chown -R $(whoami):$(id -ng) /usr/local/lib/android/sdk/emulator/

      - name: Install dependencies
        run: |
          pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="live-cli*..." --filter="@ledgerhq/dummy-*-app..." --no-frozen-lockfile --unsafe-perm --ignore-scripts

      - name: Detox Post Install
        run: node apps/ledger-live-mobile/node_modules/detox/scripts/postinstall.js

      - name: Build dependencies
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:llm:deps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Build Dummy Live SDK and Dummy Wallet API apps for testing
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:dummy-apps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: cache android emulator
        timeout-minutes: 5
        uses: tespkg/actions-cache@v1
        id: detox-avd
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
            /usr/local/lib/android/sdk/system-images/android-${{ env.AVD_API }}/${{ env.AVD_TARGET }}/${{ env.AVD_ARCH }}/*
            /usr/local/lib/android/sdk/emulator/*
          key: ${{ runner.os }}-detox-avd-${{ env.AVD_NAME }}-${{ env.AVD_PROFILE }}-${{ env.AVD_TARGET }}-${{ env.AVD_API }}-${{ env.AVD_ARCH }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN }}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: create AVD and generate snapshot for caching
        if: steps.detox-avd.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.AVD_API }}
          arch: ${{ env.AVD_ARCH }}
          profile: ${{ env.AVD_PROFILE }}
          target: ${{ env.AVD_TARGET }}
          avd-name: ${{ env.AVD_NAME }}
          force-avd-creation: true
          cores: ${{ env.AVD_CORES }}
          ram-size: ${{ env.AVD_RAM_SIZE }}
          disable-linux-hw-accel: false
          emulator-options: ${{ env.AVD_OPTIONS }}
          script: ./tools/scripts/wait_emulator_idle.sh

      - name: Setup Speculos image and Coin Apps
        if: ${{ env.SPECULOS_RUN == 'true' }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-speculos_image@develop
        with:
          coinapps_path: ${{ env.COINAPPS }}
          speculos_tag: ${{ env.SPECULOS_IMAGE_TAG }}
          bot_id: ${{ secrets.GH_BOT_APP_ID }}
          bot_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}

      - name: Build CLI
        if: ${{ env.SPECULOS_RUN == 'true' }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:cli
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Set DISABLE_TRANSACTION_BROADCAST
        if: ${{ env.SPECULOS_RUN == 'true' }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-e2e-env@develop
        with:
          enable_broadcast: ${{ inputs.enable_broadcast }}

      - name: Run Android Tests
        id: detox
        run: pnpm mobile e2e:ci -p android -t $([[ "$INPUT_SPECULOS" == "true" ]] && printf %s '--speculos') $([[ "$PRODUCTION" == "true" ]] && printf %s '--production') --shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }} ${INPUTS_TEST_FILTER:+--filter} "${{ inputs.test_filter }}"
        timeout-minutes: ${{ env.SPECULOS_RUN == 'true' && 120 || 45 }}
        env:
          DETOX_INSTALL_TIMEOUT: 120000
          SEED: ${{ secrets.SEED_QAA_B2C }}
          INPUT_SPECULOS: ${{ env.SPECULOS_RUN }}
          PRODUCTION: ${{ inputs.production_firebase }}
          INPUTS_TEST_FILTER: ${{ inputs.test_filter }}

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() || steps.detox.outcome == 'cancelled' }}
        id: "test-artifacts"
        with:
          name: "android-test-artifacts-${{ matrix.shardIndex }}"
          path: apps/ledger-live-mobile/artifacts/

      - name: Set job output based on detox result
        id: set-output
        if: ${{ !cancelled() }}
        run: echo "status_${{ matrix.shardIndex }}=${{ steps.detox.outcome }}" >> $GITHUB_OUTPUT

#  allure-report-android:
#    name: "Android Detox > Allure Report"
#    runs-on: [ledger-live-medium]
#    if: ${{ !cancelled() && needs.detox-tests-android.outputs.artifact }}
#    outputs:
#      report-url: ${{ steps.upload.outputs.report-url }}
#      result: ${{ steps.summary.outputs.test_result }}
#      finalStatus: ${{ steps.aggregate.outputs.finalStatus }}
#    needs: [detox-tests-android]
#    steps:
#      - name: Download Allure Report
#        uses: actions/download-artifact@v4
#        with:
#          path: android-test-artifacts
#          pattern: android-test-artifacts*
#          merge-multiple: true
#      - uses: LedgerHQ/ledger-live/tools/actions/composites/upload-allure-report@develop
#        id: upload
#        if: ${{ !cancelled() && env.SHOULD_UPLOAD == 'true' }}
#        with:
#          platform: android-${{ env.SPECULOS_RUN == 'true' && 'speculos' || 'mocked' }}
#          login: ${{ vars.ALLURE_USERNAME }}
#          password: ${{ secrets.ALLURE_LEDGER_LIVE_PASSWORD }}
#          path: android-test-artifacts
#      - name: Get summary
#        id: summary
#        if: ${{ !cancelled() }}
#        uses: LedgerHQ/ledger-live/tools/actions/composites/get-allure-summary@develop
#        with:
#          allure-results-path: android-test-artifacts
#          platform: android
#      - name: Aggregate test results
#        id: aggregate
#        run: |
#          if [ "${{ env.SPECULOS_RUN }}" == "true" ]; then
#            statuses=("${{ needs.detox-tests-android.outputs.status_1 }}" "${{ needs.detox-tests-android.outputs.status_2 }}" "${{ needs.detox-tests-android.outputs.status_3 }}")
#          else
#            statuses=("${{ needs.detox-tests-android.outputs.status_1 }}")
#          fi
#          finalStatus="success"
#          for status in "${statuses[@]}"; do
#            if [ "$status" != "success" ]; then
#              finalStatus="failure"
#              break
#            fi
#          done
#          echo "finalStatus=$finalStatus" >> $GITHUB_OUTPUT
#
#  upload-to-xray:
#    name: "Test Mobile E2E > XRAY Report"
#    runs-on: [ledger-live-medium]
#    strategy:
#      matrix:
#        platform:
#          - android
#          - ios
#      fail-fast: false
#    env:
#      XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
#      XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
#      XRAY_API_URL: https://xray.cloud.getxray.app/api/v2
#      JIRA_URL: https://ledgerhq.atlassian.net/browse
#      TEST_EXECUTION: ${{ matrix.platform == 'android' && inputs.test_execution_android || inputs.test_execution_ios }}
#    needs: [detox-tests-android, detox-tests-ios]
#    if: ${{ !cancelled() && inputs.export_to_xray }}
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          ref: ${{ inputs.ref || github.sha }}
#          repository: LedgerHQ/ledger-live
#
#      - name: Download Allure Results
#        uses: actions/download-artifact@v4
#        with:
#          path: "artifacts-${{ matrix.platform }}"
#          pattern: ${{ matrix.platform }}-test-artifacts-*
#          merge-multiple: true
#
#      - name: Format Xray results
#        run: apps/ledger-live-mobile/e2e/xray.formater.sh artifacts-${{ matrix.platform }} ${{ matrix.platform }} ${{ env.TEST_EXECUTION}}
#
#      - name: Upload aggregated xray results
#        uses: actions/upload-artifact@v4
#        with:
#          retention-days: 1
#          name: xray-reports-${{ matrix.platform }}
#          path: "artifacts-${{ matrix.platform }}/xray_report.json"
#
#      - name: Authenticate to Xray
#        id: authenticate
#        run: |
#          response=$(curl -H "Content-Type: application/json" -X POST \
#                    --data '{"client_id": "${{ env.XRAY_CLIENT_ID }}", "client_secret": "${{ env.XRAY_CLIENT_SECRET }}"}' \
#                    ${{ env.XRAY_API_URL }}/authenticate)
#          echo "Xray Authentication Response: $response"
#          echo "xray_token=$response" >> $GITHUB_OUTPUT
#      - name: Publish report on Xray
#        id: publish-xray
#        run: |
#          response=$(curl -H "Content-Type: application/json" \
#                    -H "Authorization: Bearer ${{ steps.authenticate.outputs.xray_token }}" \
#                    -X POST \
#                    --data @artifacts-${{ matrix.platform }}/xray_report.json \
#                    ${{ env.XRAY_API_URL }}/import/execution)
#          echo "Xray Report Response: $response"
#          key=$(echo $response | jq -r '.key')
#          echo "xray_key=$key" >> $GITHUB_OUTPUT
#      - name: Write Xray report link in summary
#        shell: bash
#        run: echo "::notice title=${{ matrix.platform }} Xray report URL::${{ env.JIRA_URL }}/${{ steps.publish-xray.outputs.xray_key }}"
#
#  report-on-slack:
#    name: "Test Mobile E2E > Slack Report"
#    runs-on: ubuntu-22.04
#    needs: [allure-report-android, allure-report-ios]
#    if: ${{ !cancelled() && (needs.allure-report-ios.outputs.report-url || needs.allure-report-android.outputs.report-url) }}
#    env:
#      IOS_STATUS: ${{ needs.allure-report-ios.outputs.status }}
#      IOS_REPORT_URL: ${{ needs.allure-report-ios.outputs.report-url }}
#      ANDROID_STATUS: ${{ needs.allure-report-android.outputs.finalStatus }}
#      ANDROID_REPORT_URL: ${{ needs.allure-report-android.outputs.report-url }}
#    steps:
#      - name: format message
#        uses: actions/github-script@v7
#        id: message
#        with:
#          script: |
#            const fs = require("fs");
#            const text = "Ledger Live Mobile E2E tests finished";
#            const header = [
#              {
#                "type": "header",
#                "text": {
#                  "type": "plain_text",
#                  "text": process.env.SPECULOS_RUN == 'false'
#                    ? "Ledger Live Mobile Mocked Tests on ${{ github.ref_name }}"
#                    : ":ledger-logo: Ledger Live Mobile E2E Speculos tests results on ${{ github.ref_name }}",
#                  "emoji": true
#                }
#              },
#              {
#                "type": "divider"
#              }
#            ];
#
#            const iOSResult = [
#              {
#                "type": "section",
#                "text": {
#                  "type": "mrkdwn",
#                  "text": `- 🍏 iOS: ${process.env.IOS_STATUS !== 'success' ? '❌' : '✅'} ${{ needs.allure-report-ios.outputs.result || 'No test results' }}`
#                }
#              }
#            ];
#
#            const androidResult = [
#              {
#                "type": "section",
#                "text": {
#                  "type": "mrkdwn",
#                  "text": `- 🤖 Android: ${process.env.ANDROID_STATUS !== 'success' ? '❌' : '✅'} ${{ needs.allure-report-android.outputs.result || 'No test results' }}`
#                }
#              }
#            ];
#
#            const iOSInfo = [
#              {
#                "type": "mrkdwn",
#                "text": process.env.IOS_REPORT_URL ? `*Allure Report iOS*\n<${process.env.IOS_REPORT_URL}|Allure Report iOS>` : '*Allure Report iOS*\nNo Allure Report'
#              }
#            ];
#
#            const androidInfo = [
#              {
#                "type": "mrkdwn",
#                "text": process.env.ANDROID_REPORT_URL ? `*Allure Report Android*\n<${process.env.ANDROID_REPORT_URL}|Allure Report Android>` : '*Allure Report Android*\nNo Allure Report'
#              }
#            ];
#
#            const infoFields = []
#              .concat(${{ env.SPECULOS_RUN == 'true' }} ? [] : iOSInfo)
#              .concat(androidInfo)
#              .concat([
#              {
#                "type": "mrkdwn",
#                "text": `*Workflow*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow run>`
#              }
#            ]);
#
#            const infoBlock = [
#              {
#                "type": "divider"
#              },
#              {
#                "type": "section",
#                "fields": infoFields
#              }
#            ];
#
#            const blocks = []
#              .concat(header)
#              .concat(${{ env.SPECULOS_RUN == 'true' }} ? [] : iOSResult)
#              .concat(androidResult)
#              .concat(infoBlock);
#
#            const result = process.env.SPECULOS_RUN === 'false'
#              ? {
#                  text,
#                  blocks,
#                }
#              : {
#                  attachments: [
#                    {
#                      color: process.env.ANDROID_STATUS !== 'success'
#                        ? "#FF333C"
#                        : "#33FF39",
#                      blocks,
#                    },
#                  ],
#                };
#
#
#            fs.writeFileSync(`./payload-slack-content.json`, JSON.stringify(result, null, 2));
#      - name: post to a Slack channel
#        id: slack
#        uses: slackapi/slack-github-action@v1.23.0
#        with:
#          channel-id: "CTMQ0S5SB"
#          payload-file-path: "./payload-slack-content.json"
#        env:
#          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
#      - name: post to a Slack channel
#        if: ${{ (failure() && github.event_name == 'push' && contains(fromJson('["develop", "main"]'), github.ref_name)) || contains(fromJson('["release"]'), github.ref_name) || github.event_name == 'schedule' }}
#        uses: slackapi/slack-github-action@v1.23.0
#        with:
#          channel-id: "C05FKJ7DFAP"
#          payload-file-path: "./payload-slack-content.json"
#        env:
#          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
