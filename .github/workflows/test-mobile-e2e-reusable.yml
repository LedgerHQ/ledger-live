name: "[Mobile] - E2E Test - Scheduled/Called"

on:
  schedule:
    - cron: "0 3 * * 1-5"

  workflow_call:
    inputs:
      macos-specificity-runner-label:
        description: The specificity runner label to run the tests on (e.g. performance-pool, general-pool or runner)
        required: false
        type: string
        default: "general-pool"
      disable-turbo-cache:
        description: Disable turbo caching
        required: false
        type: boolean
        default: false
      ref:
        description: Ref to checkout
        required: false
        type: string
  workflow_dispatch:
    inputs:
      ref:
        description: |
          If you run this manually, and want to run on a PR, the correct ref should be refs/pull/{PR_NUMBER}/merge to
          have the "normal" scenario involving checking out a merge commit between your branch and the base branch.
          If you want to run only on a branch or specific commit, you can use either the sha or the branch name instead (prefer the first verion for PRs).
        type: string
        required: false
      base_ref:
        description: The base branch to merge the head into when checking out the code
        type: string
        required: false
      tests_type:
        description: Tests type
        required: false
        options:
          - Mocked
          - E2E - Android Only
          - E2E - iOS & Android
        default: Mocked
        type: choice
      enable_broadcast:
        description: "Enable transaction broadcast"
        required: false
        type: boolean
        default: false
      production_firebase:
        description: "Target Firebase Production env"
        required: false
        type: boolean
        default: false
      test_filter:
        description: Filter to execute only test suite spec files according to pattern(s) (e.g. to execute nftGallery.spec.ts and deeplinks.spec.ts files "nftGallery deeplinks")
        required: false
      export_to_xray:
        description: Send tests results to Xray
        required: false
        type: boolean
        default: false
      test_execution_android:
        description: "ü§ñ Test Execution. Ex: 'B2CQA-2461'"
        required: false
        type: string
      test_execution_ios:
        description: "üçè Test Execution. Ex: 'B2CQA-2462'"
        required: false
        type: string
      speculos_device:
        description: "Device to be used"
        required: false
        type: choice
        options:
          - nanoS
          - nanoSP
          - nanoX
        default: nanoSP

# Uncomment to have log-level: trace on detox run and build
# (cf: apps/ledger-live-mobile/detox.config.js)
# env:
#   DEBUG_DETOX: true

permissions:
  id-token: write
  contents: read

env:
  SPECULOS_IMAGE_TAG: ghcr.io/ledgerhq/speculos:master
  COINAPPS: ${{ github.workspace }}/coin-apps
  E2E_RUN: ${{ inputs.tests_type == 'E2E - Android Only' || inputs.tests_type == 'E2E - iOS & Android' || github.event_name == 'schedule' }}
  SHOULD_UPLOAD: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || (github.event_name == 'push' && contains(fromJson('["develop", "main"]'), github.ref_name)) }}
  SPECULOS_DEVICE: ${{ inputs.speculos_device || 'nanoSP' }}

jobs:
  detox-tests-ios:
    name: "iOS Detox"
    runs-on: ["${{ inputs.macos-specificity-runner-label || 'general-pool' }}", macOS, ARM64]
    if: ${{ !cancelled() && inputs.tests_type != 'E2E - Android Only' }}
    env:
      NODE_OPTIONS: "--max-old-space-size=8192"
      LANG: en_US.UTF-8
      LANGUAGE: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    outputs:
      artifact: ${{ steps.test-artifacts.outputs.artifact-id }}
      status_1: ${{ steps.set-output.outputs.status_1 }}
      status_2: ${{ steps.set-output.outputs.status_2 }}
      status_3: ${{ steps.set-output.outputs.status_3 }}
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3]
        shardTotal: [3, 1]
        exclude:
          - shardIndex: ${{ (github.event.inputs.tests_type == 'Mocked' || github.event_name == 'push' || github.event_name == 'pull_request') && '2' }}
          - shardIndex: ${{ (github.event.inputs.tests_type == 'Mocked' || github.event_name == 'push' || github.event_name == 'pull_request') && '3' }}
          - shardTotal: ${{ (github.event.inputs.tests_type == 'Mocked' || github.event_name == 'push' || github.event_name == 'pull_request') && '3' }}
          - shardTotal: ${{ github.event.inputs.tests_type != 'Mocked' && github.event_name != 'push' && github.event_name != 'pull_request' && '1' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live

      - name: setup caches
        id: setup-caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        with:
          skip-pod-cache: "true"
          skip-turbo-cache: "false"
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/${{ secrets.AWS_CACHE_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_CACHE_REGION }}

      - uses: nick-fields/retry@v3
        name: install dependencies
        id: install-dependencies
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="ledger-live-mobile-e2e-tests" --filter="@ledgerhq/dummy-*-app..."  --filter="ledger-live-mobile-e2e-tests" --filter="live-cli*..." --no-frozen-lockfile --unsafe-perm
          new_command_on_retry: rm -rf ~/.cocoapods/ && pnpm clean && pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="ledger-live-mobile-e2e-tests" --filter="@ledgerhq/dummy-*-app..." --filter="live-cli*..." --no-frozen-lockfile --unsafe-perm

      - name: Flake alert - ArgumentError
        uses: LedgerHQ/ledger-live/tools/actions/composites/ci-flake-notifier@develop
        if: failure() && steps.install-dependencies.outputs.error == 'ArgumentError - pathname contains null byte'
        with:
          live_bot_token: ${{ secrets.SLACK_LIVE_CI_BOT_TOKEN }}
          halt_runner: true

      - name: Flake alert - Reruns
        uses: LedgerHQ/ledger-live/tools/actions/composites/ci-flake-notifier@develop
        if: success() && steps.install-dependencies.outputs.total_attempts == 2
        with:
          live_bot_token: ${{ secrets.SLACK_LIVE_CI_BOT_TOKEN }}
          custom_message: "${{ steps.install-dependencies.outputs.total_attempts }} attempts happened on install dependencies and it was eventually successful :face_with_raised_eyebrow:"

      - name: cache detox build
        uses: tespkg/actions-cache@v1
        if: steps.aws.conclusion == 'success'
        id: detox-build
        with:
          path: ${{ github.workspace }}/apps/ledger-live-mobile/ios/build/Build/Products/Release-iphonesimulator
          key: ${{ runner.os }}-detox-${{ hashFiles('apps/ledger-live-mobile/ios/Podfile.lock', 'apps/ledger-live-mobile/ios/ledgerlivemobile.xcodeproj/project.pbxproj', 'apps/ledger-live-mobile/detox.config.js', 'apps/ledger-live-mobile/.env.mock', 'apps/ledger-live-mobile/ios/ledgerlivemobile/AppDelegate.mm') }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ll-gha-s3-cache
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Build dependencies
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:llm:deps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Build Dummy Live SDK and Dummy Wallet API apps for testing
        run: |
          pnpm build:dummy-apps
        shell: bash

      - name: Build CLI
        if: ${{ env.E2E_RUN == 'true' }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:cli
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Create iOS simulator
        id: simulator
        run: xcrun simctl create "iOS Simulator" "iPhone 15"

      - name: Build iOS app for Detox test run
        if: steps.detox-build.outputs.cache-hit != 'true' || inputs.production_firebase == 'true'
        run: pnpm mobile e2e:ci -p ios -b $([[ "$PRODUCTION" == "true" ]] && printf %s '--production')

      - name: Build JS Bundle app for Detox test run
        if: steps.detox-build.outputs.cache-hit == 'true' && inputs.production_firebase != 'true'
        run: pnpm mobile e2e:ci -p ios --bundle

      - name: Setup Speculos image and Coin Apps
        if: ${{ env.E2E_RUN == 'true' }}
        id: setup-speculos
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-speculos_image@develop
        with:
          coinapps_path: ${{ env.COINAPPS }}
          bot_id: ${{ secrets.GH_BOT_APP_ID }}
          bot_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}

      - name: Set DISABLE_TRANSACTION_BROADCAST
        if: ${{ env.E2E_RUN == 'true' }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-e2e-env@develop
        with:
          enable_broadcast: ${{ inputs.enable_broadcast }}

      - name: Test iOS app E2E
        if: ${{ env.E2E_RUN == 'true' }}
        id: detox-e2e
        run: pnpm mobile e2e:ci -p ios -t $([[ "$INPUT_E2E" == "true" ]] && printf %s '--e2e') $([[ "$PRODUCTION" == "true" ]] && printf %s '--production') --shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }} ${INPUTS_TEST_FILTER:+--filter} "${{ inputs.test_filter }}"
        timeout-minutes: 240
        env:
          SEED: ${{ secrets.SEED_QAA_B2C }}
          AWS_ROLE: ${{ secrets.B2CQA_AWS_ROLE }}
          CLUSTER: ${{ secrets.B2CQA_CLUSTER }}
          GITHUB_TOKEN: ${{ secrets.LL_SPECULOS_CI }}
          INPUT_E2E: ${{ env.E2E_RUN }}
          REMOTE_SPECULOS: "true"
          PRODUCTION: ${{ inputs.production_firebase }}
          INPUTS_TEST_FILTER: ${{ inputs.test_filter }}

      - name: Test iOS app Mock
        if: ${{ env.E2E_RUN != 'true' }}
        id: detox-mock
        timeout-minutes: 75
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm test:llm:ios:e2e -- -p ios -t
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Delete iOS simulator
        if: ${{ always() }}
        run: |
          xcrun simctl list devices | grep 'iOS Simulator' | awk -F '[()]' '{print $2}' | xargs -I {} sh -c 'echo "Deleting simulator: {}"; xcrun simctl delete {} || echo "Failed to delete: {}"'

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() || steps.detox.outcome == 'cancelled' }}
        id: "test-artifacts"
        with:
          name: "ios-test-artifacts-${{ matrix.shardIndex }}"
          path: ${{ env.E2E_RUN == 'true' && 'e2e/mobile/artifacts/' || 'apps/ledger-live-mobile/artifacts/' }}
      - run: echo "${{ steps.test-artifacts.outputs.artifact-id }}"
      - name: Set job output based on detox result
        id: set-output
        if: always()
        run: |
          if [ "${{ env.E2E_RUN }}" == "true" ]; then
             echo "status_${{ matrix.shardIndex }}=${{ steps.detox-e2e.outcome }}" >> $GITHUB_OUTPUT
           else
             echo "status_${{ matrix.shardIndex }}=${{ steps.detox-mock.outcome }}" >> $GITHUB_OUTPUT
           fi

  allure-report-ios:
    name: "iOS Detox > Allure Report"
    runs-on: [ledger-live-medium]
    if: ${{ !cancelled() && needs.detox-tests-ios.outputs.artifact && inputs.tests_type != 'E2E - Android Only' }}
    needs: [detox-tests-ios]
    outputs:
      report-url: ${{ steps.upload.outputs.report-url }}
      result: ${{ steps.summary.outputs.test_result }}
      finalStatus: ${{ steps.aggregate.outputs.finalStatus }}
    steps:
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          path: ios-test-artifacts
          pattern: ios-test-artifacts*
          merge-multiple: true
      - uses: LedgerHQ/ledger-live/tools/actions/composites/upload-allure-report@develop
        if: ${{ !cancelled() && env.SHOULD_UPLOAD == 'true' }}
        id: upload
        with:
          platform: ios-${{ env.E2E_RUN == 'true' && 'e2e' || 'mocked' }}
          login: ${{ vars.ALLURE_USERNAME }}
          password: ${{ secrets.ALLURE_LEDGER_LIVE_PASSWORD }}
          path: ios-test-artifacts
      - name: Get summary
        id: summary
        if: ${{ !cancelled() }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/get-allure-summary@develop
        with:
          allure-results-path: ios-test-artifacts
          platform: iOS
      - name: Aggregate test results
        id: aggregate
        run: |
          if [ "${{ env.E2E_RUN }}" == "true" ]; then
            statuses=("${{ needs.detox-tests-ios.outputs.status_1 }}" "${{ needs.detox-tests-ios.outputs.status_2 }}" "${{ needs.detox-tests-ios.outputs.status_3 }}")
          else
            statuses=("${{ needs.detox-tests-ios.outputs.status_1 }}")
          fi
          finalStatus="success"
          for status in "${statuses[@]}"; do
            if [ "$status" != "success" ]; then
              finalStatus="failure"
              break
            fi
          done
          echo "finalStatus=$finalStatus" >> $GITHUB_OUTPUT

  detox-tests-android:
    name: "Android Detox"
    runs-on: [ledger-live-linux-8CPU-32RAM]
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      LANG: en_US.UTF-8
      LANGUAGE: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      AVD_API: 35
      AVD_ARCH: x86_64
      AVD_PROFILE: pixel_7_pro
      AVD_TARGET: google_apis
      AVD_NAME: "Android_Emulator"
      AVD_CORES: 4
      AVD_RAM_SIZE: 4096M
      AVD_OPTIONS: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    outputs:
      status_1: ${{ steps.set-output.outputs.status_1 }}
      status_2: ${{ steps.set-output.outputs.status_2 }}
      status_3: ${{ steps.set-output.outputs.status_3 }}
      artifact: ${{ steps.test-artifacts.outputs.artifact-id }}
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3]
        shardTotal: [3, 1]
        exclude:
          - shardIndex: ${{ (github.event.inputs.tests_type == 'Mocked' || github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'merge_group') && '2' }}
          - shardIndex: ${{ (github.event.inputs.tests_type == 'Mocked' || github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'merge_group') && '3' }}
          - shardTotal: ${{ (github.event.inputs.tests_type == 'Mocked' || github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'merge_group') && '3' }}
          - shardTotal: ${{ github.event.inputs.tests_type != 'Mocked' && github.event_name != 'push' && github.event_name != 'pull_request' && github.event_name != 'merge_group' && '1' }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live
      - name: Setup the caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        id: setup-caches
        with:
          install-proto: true
          skip-turbo-cache: "false"
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
      - name: setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"
      - name: setup Android SDK
        uses: android-actions/setup-android@v2.0.10
      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

        # https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Fix emulator directory permissions
        run: sudo chown -R $(whoami):$(id -ng) /usr/local/lib/android/sdk/emulator/

      - name: Install dependencies
        run: |
          pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="live-cli*..." --filter="@ledgerhq/dummy-*-app..."  --filter="ledger-live-mobile-e2e-tests" --no-frozen-lockfile --unsafe-perm

      - name: Build dependencies
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:llm:deps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Build Dummy Live SDK and Dummy Wallet API apps for testing
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:dummy-apps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Build Android app for Detox test run
        run: |
          pnpm mobile e2e:ci -p android -b $([[ "$PRODUCTION" == "true" ]] && printf %s '--production')
        env:
          PRODUCTION: ${{ inputs.production_firebase }}

      - name: cache android emulator
        timeout-minutes: 5
        uses: tespkg/actions-cache@v1
        id: detox-avd
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
            /usr/local/lib/android/sdk/system-images/android-${{ env.AVD_API }}/${{ env.AVD_TARGET }}/${{ env.AVD_ARCH }}/*
            /usr/local/lib/android/sdk/emulator/*
          key: ${{ runner.os }}-detox-avd-${{ env.AVD_NAME }}-${{ env.AVD_PROFILE }}-${{ env.AVD_TARGET }}-${{ env.AVD_API }}-${{ env.AVD_ARCH }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN }}
          bucket: ll-gha-s3-cache
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: create AVD and generate snapshot for caching
        if: steps.detox-avd.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.AVD_API }}
          arch: ${{ env.AVD_ARCH }}
          profile: ${{ env.AVD_PROFILE }}
          target: ${{ env.AVD_TARGET }}
          avd-name: ${{ env.AVD_NAME }}
          force-avd-creation: true
          cores: ${{ env.AVD_CORES }}
          ram-size: ${{ env.AVD_RAM_SIZE }}
          disable-linux-hw-accel: false
          emulator-options: ${{ env.AVD_OPTIONS }}
          script: ./tools/scripts/wait_emulator_idle.sh

      - name: Setup Speculos image and Coin Apps
        if: ${{ env.E2E_RUN == 'true' }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-speculos_image@develop
        with:
          coinapps_path: ${{ env.COINAPPS }}
          speculos_tag: ${{ env.SPECULOS_IMAGE_TAG }}
          bot_id: ${{ secrets.GH_BOT_APP_ID }}
          bot_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}

      - name: Build CLI
        if: ${{ env.E2E_RUN == 'true' }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:cli
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: ${{ inputs.disable-turbo-cache || false }}

      - name: Set DISABLE_TRANSACTION_BROADCAST
        if: ${{ env.E2E_RUN == 'true' }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-e2e-env@develop
        with:
          enable_broadcast: ${{ inputs.enable_broadcast }}

      - name: Run Android Tests
        id: detox
        run: pnpm mobile e2e:ci -p android -t $([[ "$INPUT_E2E" == "true" ]] && printf %s '--e2e') $([[ "$PRODUCTION" == "true" ]] && printf %s '--production') --shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }} ${INPUTS_TEST_FILTER:+--filter} "${{ inputs.test_filter }}"
        timeout-minutes: ${{ env.E2E_RUN == 'true' && 120 || 45 }}
        env:
          DETOX_INSTALL_TIMEOUT: 120000
          SEED: ${{ secrets.SEED_QAA_B2C }}
          INPUT_E2E: ${{ env.E2E_RUN }}
          PRODUCTION: ${{ inputs.production_firebase }}
          INPUTS_TEST_FILTER: ${{ inputs.test_filter }}

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() || steps.detox.outcome == 'cancelled' }}
        id: "test-artifacts"
        with:
          name: "android-test-artifacts-${{ matrix.shardIndex }}"
          path: ${{ env.E2E_RUN == 'true' && 'e2e/mobile/artifacts/' || 'apps/ledger-live-mobile/artifacts/' }}

      - name: Set job output based on detox result
        id: set-output
        if: ${{ !cancelled() }}
        run: echo "status_${{ matrix.shardIndex }}=${{ steps.detox.outcome }}" >> $GITHUB_OUTPUT

  allure-report-android:
    name: "Android Detox > Allure Report"
    runs-on: [ledger-live-medium]
    if: ${{ !cancelled() && needs.detox-tests-android.outputs.artifact }}
    outputs:
      report-url: ${{ steps.upload.outputs.report-url }}
      result: ${{ steps.summary.outputs.test_result }}
      finalStatus: ${{ steps.aggregate.outputs.finalStatus }}
    needs: [detox-tests-android]
    steps:
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          path: android-test-artifacts
          pattern: android-test-artifacts*
          merge-multiple: true
      - uses: LedgerHQ/ledger-live/tools/actions/composites/upload-allure-report@develop
        id: upload
        if: ${{ !cancelled() && env.SHOULD_UPLOAD == 'true' }}
        with:
          platform: android-${{ env.E2E_RUN == 'true' && 'e2e' || 'mocked' }}
          login: ${{ vars.ALLURE_USERNAME }}
          password: ${{ secrets.ALLURE_LEDGER_LIVE_PASSWORD }}
          path: android-test-artifacts
      - name: Get summary
        id: summary
        if: ${{ !cancelled() }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/get-allure-summary@develop
        with:
          allure-results-path: android-test-artifacts
          platform: android
      - name: Aggregate test results
        id: aggregate
        run: |
          if [ "${{ env.E2E_RUN }}" == "true" ]; then
            statuses=("${{ needs.detox-tests-android.outputs.status_1 }}" "${{ needs.detox-tests-android.outputs.status_2 }}" "${{ needs.detox-tests-android.outputs.status_3 }}")
          else
            statuses=("${{ needs.detox-tests-android.outputs.status_1 }}")
          fi
          finalStatus="success"
          for status in "${statuses[@]}"; do
            if [ "$status" != "success" ]; then
              finalStatus="failure"
              break
            fi
          done
          echo "finalStatus=$finalStatus" >> $GITHUB_OUTPUT

  upload-to-xray:
    name: "Test Mobile E2E > XRAY Report"
    runs-on: [ledger-live-medium]
    strategy:
      matrix:
        platform:
          - android
          - ios
        exclude:
          - platform: ${{ github.event.inputs.tests_type == 'E2E - Android Only' && 'ios' }}

      fail-fast: false
    env:
      XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
      XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
      XRAY_API_URL: https://xray.cloud.getxray.app/api/v2
      JIRA_URL: https://ledgerhq.atlassian.net/browse
      TEST_EXECUTION: ${{ matrix.platform == 'android' && inputs.test_execution_android || inputs.test_execution_ios }}
    needs: [detox-tests-android, detox-tests-ios]
    if: ${{ !cancelled() && inputs.export_to_xray }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live

      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          path: "artifacts-${{ matrix.platform }}"
          pattern: ${{ matrix.platform }}-test-artifacts-*
          merge-multiple: true

      - name: Format Xray results
        run: e2e/mobile/xray.formater.sh artifacts-${{ matrix.platform }} ${{ matrix.platform }} ${{ env.TEST_EXECUTION}}

      - name: Upload aggregated xray results
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: xray-reports-${{ matrix.platform }}
          path: "artifacts-${{ matrix.platform }}/xray_report.json"

      - name: Authenticate to Xray
        id: authenticate
        run: |
          response=$(curl -H "Content-Type: application/json" -X POST \
                    --data '{"client_id": "${{ env.XRAY_CLIENT_ID }}", "client_secret": "${{ env.XRAY_CLIENT_SECRET }}"}' \
                    ${{ env.XRAY_API_URL }}/authenticate)
          echo "Xray Authentication Response: $response"
          echo "xray_token=$response" >> $GITHUB_OUTPUT
      - name: Publish report on Xray
        id: publish-xray
        run: |
          response=$(curl -H "Content-Type: application/json" \
                    -H "Authorization: Bearer ${{ steps.authenticate.outputs.xray_token }}" \
                    -X POST \
                    --data @artifacts-${{ matrix.platform }}/xray_report.json \
                    ${{ env.XRAY_API_URL }}/import/execution)
          echo "Xray Report Response: $response"
          key=$(echo $response | jq -r '.key')
          echo "xray_key=$key" >> $GITHUB_OUTPUT
      - name: Write Xray report link in summary
        shell: bash
        run: echo "::notice title=${{ matrix.platform }} Xray report URL::${{ env.JIRA_URL }}/${{ steps.publish-xray.outputs.xray_key }}"

  report-on-slack:
    name: "Test Mobile E2E > Slack Report"
    runs-on: ubuntu-22.04
    needs: [allure-report-android, allure-report-ios]
    if: ${{ !cancelled() && (needs.allure-report-ios.outputs.report-url || needs.allure-report-android.outputs.report-url) }}
    env:
      IOS_STATUS: ${{ needs.allure-report-ios.outputs.finalStatus }}
      IOS_REPORT_URL: ${{ needs.allure-report-ios.outputs.report-url }}
      ANDROID_STATUS: ${{ needs.allure-report-android.outputs.finalStatus }}
      ANDROID_REPORT_URL: ${{ needs.allure-report-android.outputs.report-url }}
      ANDROID_ONLY: ${{ inputs.tests_type == 'E2E - Android Only' }}
    steps:
      - name: format message
        uses: actions/github-script@v7
        id: message
        with:
          script: |
            const fs = require("fs");
            const text = "Ledger Live Mobile E2E tests finished";
            const header = [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": process.env.E2E_RUN == 'false'
                    ? "Ledger Live Mobile Mocked Tests on ${{ github.ref_name }}"
                    : ":ledger-logo: Ledger Live Mobile E2E tests results on ${{ github.ref_name }}",
                  "emoji": true
                }
              },
              {
                "type": "divider"
              }
            ];

            const iOSResult = [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": `- üçè iOS: ${process.env.IOS_STATUS !== 'success' ? '‚ùå' : '‚úÖ'} ${{ needs.allure-report-ios.outputs.result || 'No test results' }}`
                }
              }
            ];

            const androidResult = [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": `- ü§ñ Android - ${{ inputs.speculos_device }}: ${process.env.ANDROID_STATUS !== 'success' ? '‚ùå' : '‚úÖ'} ${{ needs.allure-report-android.outputs.result || 'No test results' }}`
                }
              }
            ];

            const iOSInfo = [
              {
                "type": "mrkdwn",
                "text": process.env.IOS_REPORT_URL ? `*Allure Report iOS*\n<${process.env.IOS_REPORT_URL}|Allure Report iOS>` : '*Allure Report iOS*\nNo Allure Report'
              }
            ];

            const androidInfo = [
              {
                "type": "mrkdwn",
                "text": process.env.ANDROID_REPORT_URL ? `*Allure Report Android*\n<${process.env.ANDROID_REPORT_URL}|Allure Report Android>` : '*Allure Report Android*\nNo Allure Report'
              }
            ];

            const infoFields = []
              .concat(${{ env.ANDROID_ONLY == 'true' }} ? [] : iOSInfo)
              .concat(androidInfo)
              .concat([
              {
                "type": "mrkdwn",
                "text": `*Workflow*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow run>`
              }
            ]);

            const infoBlock = [
              {
                "type": "divider"
              },
              {
                "type": "section",
                "fields": infoFields
              }
            ];

            const blocks = []
              .concat(header)
              .concat(${{ env.ANDROID_ONLY == 'true' }} ? [] : iOSResult)
              .concat(androidResult)
              .concat(infoBlock);

            const result = process.env.E2E_RUN === 'false'
              ? {
                  text,
                  blocks,
                }
              : {
                  attachments: [
                    {
                      color: process.env.ANDROID_STATUS !== 'success' || (process.env.IOS_STATUS !== 'success' && process.env.ANDROID_ONLY == 'false')
                        ? "#FF333C"
                        : "#33FF39",
                      blocks,
                    },
                  ],
                };


            fs.writeFileSync(`./payload-slack-content.json`, JSON.stringify(result, null, 2));
      - name: post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "CTMQ0S5SB"
          payload-file-path: "./payload-slack-content.json"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
      - name: post to a Slack channel
        if: ${{ (failure() && github.event_name == 'push' && contains(fromJson('["develop", "main"]'), github.ref_name)) || contains(fromJson('["release"]'), github.ref_name) || github.event_name == 'schedule' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "C05FKJ7DFAP"
          payload-file-path: "./payload-slack-content.json"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
