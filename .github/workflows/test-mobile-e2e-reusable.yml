name: "[Mobile] E2E Only - Scheduled/Manual"
run-name: >
  @Mobile E2E • ${{ github.event_name == 'workflow_dispatch' && 'Manual' || github.event_name == 'Schedule' && 'scheduled' || github.event_name }} • ${{ inputs.tests_type || 'All' }} • ${{ github.ref_name }} • ${{ github.actor }}

on:
  schedule:
    - cron: "0 3 * * 1-5"
  workflow_dispatch:
    inputs:
      ref:
        description: "The branch which triggered this workflow"
        required: false
      test_filter:
        description: Filter to execute only test suite spec files according to pattern(s) (e.g. to execute nftGallery.spec.ts and deeplinks.spec.ts files "addAccount deeplinks")"
        required: false
        type: string
      tests_type:
        description: "Which tests to run"
        required: true
        type: choice
        default: "iOS & Android"
        options:
          - "Android Only"
          - "iOS Only"
          - "iOS & Android"
      speculos_device:
        description: Speculos device to use
        required: true
        type: choice
        options:
          - nanoS
          - nanoSP
          - nanoX
        default: nanoX
      production_firebase:
        description: "Target Firebase Production env"
        required: false
        type: boolean
        default: false
      enable_broadcast:
        description: "Enable transaction broadcast"
        required: false
        type: boolean
        default: false
      export_to_xray:
        description: "Send results to Xray"
        required: false
        type: boolean
        default: false
      test_execution_android:
        description: "Xray execution key for Android (optional)"
        required: false
        type: string
      test_execution_ios:
        description: "Xray execution key for iOS (optional)"
        required: false
        type: string

permissions:
  id-token: write
  contents: read

env:
  cache-bucket: ll-gha-s3-cache
  ANDROID_APK_PATH: apps/ledger-live-mobile/android/app/build/outputs/apk/detox/app-x86_64-detox.apk
  ANDROID_JSBUNDLE_PATH: apps/ledger-live-mobile/main.jsbundle
  ANDROID_TESTBINARY_PATH: apps/ledger-live-mobile/android/app/build/outputs/apk/androidTest/detox/app-detox-androidTest.apk
  IOS_JSBUNDLE_PATH: apps/ledger-live-mobile/ios/build/Build/Products/Release-iphonesimulator/ledgerlivemobile.app/main.jsbundle
  IOS_NATIVE_PATH: apps/ledger-live-mobile/ios/build/Build/Products/Release-iphonesimulator
  SPECULOS_IMAGE_TAG: ghcr.io/ledgerhq/speculos:master
  COINAPPS: ${{ github.workspace }}/coin-apps
  SPECULOS_DEVICE: ${{ inputs.speculos_device || 'nanoX' }}

jobs:
  determine-builds:
    name: "Determine Builds & Generate Shards"
    runs-on: ledger-live-medium
    outputs:
      matrix: ${{ steps.generate-shards.outputs.matrix }}
      test_files_for_sharding: ${{ steps.generate-shards.outputs.test_files_for_sharding }}
      ios_native_exists: ${{ steps.check-ios-native.outputs.cache-hit }}
      ios_js_exists: ${{ steps.check-ios-js.outputs.cache-hit }}
      android_native_exists: ${{ steps.check-android-native.outputs.cache-hit }}
      android_js_exists: ${{ steps.check-android-js.outputs.cache-hit }}
      ios_native_key: ${{ steps.cache-keys.outputs.ios_native_key }}
      ios_js_key: ${{ steps.cache-keys.outputs.ios_js_key }}
      android_native_key: ${{ steps.cache-keys.outputs.android_native_key }}
      android_js_key: ${{ steps.cache-keys.outputs.android_js_key }}
      android_timing_cache_key: ${{ steps.cache-keys.outputs.android_timing_cache_key }}
      ios_timing_cache_key: ${{ steps.cache-keys.outputs.ios_timing_cache_key }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live
          persist-credentials: false
          sparse-checkout: |
            apps/ledger-live-mobile
            e2e/mobile

      - name: Generate shards matrix and test files
        id: generate-shards
        uses: LedgerHQ/ledger-live/tools/actions/composites/generate-shards-matrix@develop
        with:
          test_directory: e2e/mobile
          test_filter: ${{ inputs.test_filter || '' }}
          event_name: ${{ github.event_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/${{ secrets.AWS_CACHE_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_CACHE_REGION }}

      - name: Determine cache keys
        id: cache-keys
        run: |
          echo "ios_native_key=${{ hashFiles('apps/ledger-live-mobile/ios') }}-detox-native-ios" >> $GITHUB_OUTPUT
          echo "android_native_key=${{ hashFiles('apps/ledger-live-mobile/android') }}-detox-native-android" >> $GITHUB_OUTPUT
          echo "ios_js_key=${{ inputs.ref || github.sha }}-detox-js-ios" >> $GITHUB_OUTPUT
          echo "android_js_key=${{ inputs.ref || github.sha }}-detox-js-android" >> $GITHUB_OUTPUT
          echo "android_timing_cache_key=android-e2e-timing-${{ hashFiles('e2e/mobile/specs') }}" >> $GITHUB_OUTPUT
          echo "ios_timing_cache_key=ios-e2e-timing-${{ hashFiles('e2e/mobile/specs') }}-" >> $GITHUB_OUTPUT

      - name: Check if iOS Native Build exists already
        id: check-ios-native
        uses: tespkg/actions-cache/restore@v1.9.0
        with:
          path: apps/ledger-live-mobile/ios/build/Build/Products/Release-iphonesimulator
          key: ${{ steps.cache-keys.outputs.ios_native_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false
          lookup-only: true

      - name: Check if Android Native Build exists already
        id: check-android-native
        uses: tespkg/actions-cache/restore@v1.9.0
        with:
          path: apps/ledger-live-mobile/android/app/build/outputs/apk/detox/app-x86_64-detox.apk
          key: ${{ steps.cache-keys.outputs.android_native_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false
          lookup-only: true

      - name: Check if iOS JS Build exists already
        id: check-ios-js
        uses: tespkg/actions-cache/restore@v1.9.0
        with:
          path: apps/ledger-live-mobile/main.jsbundle
          key: ${{ steps.cache-keys.outputs.ios_js_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false
          lookup-only: true

      - name: Check if Android JS Build exists already
        id: check-android-js
        uses: tespkg/actions-cache/restore@v1.9.0
        with:
          path: apps/ledger-live-mobile/main.jsbundle
          key: ${{ steps.cache-keys.outputs.android_js_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false
          lookup-only: true

  build-ios:
    name: "iOS Build"
    needs: [ determine-builds ]
    if: ${{ inputs.tests_type != 'Android Only' && needs.determine-builds.outputs.test_files_for_sharding != '' }}
    uses: LedgerHQ/ledger-live/.github/workflows/test-mobile-build-ios-reusable.yml@develop
    with:
      ref: ${{ inputs.ref || github.sha }}
      macos-specificity-runner-label: 'general-pool'
      disable-turbo-cache: false
      build-ios-js: ${{ needs.determine-builds.outputs.ios_js_exists == 'false' && !inputs.production_firebase }}
      build-ios-native: ${{ needs.determine-builds.outputs.ios_native_exists == 'false' && !inputs.production_firebase }}
      ios-native-cache-key: ${{ needs.determine-builds.outputs.ios_native_key }}
      ios-js-cache-key: ${{ needs.determine-builds.outputs.ios_js_key }}
    secrets: inherit

  build-android:
    name: "Android Build"
    needs: [ determine-builds ]
    if: ${{ inputs.tests_type != 'iOS Only' && needs.determine-builds.outputs.test_files_for_sharding != '' }}
    uses: LedgerHQ/ledger-live/.github/workflows/test-mobile-build-android-reusable.yml@develop
    with:
      ref: ${{ inputs.ref || github.sha }}
      disable-turbo-cache: false
      build-android-js: ${{ needs.determine-builds.outputs.android_js_exists == 'false' && !inputs.production_firebase }}
      build-android-native: ${{ needs.determine-builds.outputs.android_native_exists == 'false' && !inputs.production_firebase }}
      android-native-cache-key: ${{ needs.determine-builds.outputs.android_native_key }}
      android-js-cache-key: ${{ needs.determine-builds.outputs.android_js_key }}
    secrets: inherit

  detox-tests-ios:
    name: iOS E2E Tests
    needs: [ build-ios, determine-builds ]
    if: ${{ inputs.tests_type != 'Android Only' && needs.determine-builds.outputs.test_files_for_sharding != '' }}
    runs-on: [ "${{ github.event_name == 'schedule' && 'performance-pool' || 'general-pool' }}", macOS, ARM64 ]
    env:
      NODE_OPTIONS: "--max-old-space-size=8192"
      LANG: en_US.UTF-8
      LANGUAGE: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      SEED: ${{ secrets.SEED_QAA_B2C }}
    outputs:
      status: ${{ steps.run-ios.outcome }}
      artifact: ${{ steps.test-artifacts.outputs.artifact-id }}
      status_1: ${{ steps.set-output.outputs.status_1 }}
      status_2: ${{ steps.set-output.outputs.status_2 }}
      status_3: ${{ steps.set-output.outputs.status_3 }}
      status_4: ${{ steps.set-output.outputs.status_4 }}
      status_5: ${{ steps.set-output.outputs.status_5 }}
      status_6: ${{ steps.set-output.outputs.status_6 }}
      status_7: ${{ steps.set-output.outputs.status_7 }}
      status_8: ${{ steps.set-output.outputs.status_8 }}
      status_9: ${{ steps.set-output.outputs.status_9 }}
      status_10: ${{ steps.set-output.outputs.status_10 }}
      status_11: ${{ steps.set-output.outputs.status_11 }}
      status_12: ${{ steps.set-output.outputs.status_12 }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.determine-builds.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live
          persist-credentials: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/${{ secrets.AWS_CACHE_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_CACHE_REGION }}

      - name: Setup iOS timing cache
        timeout-minutes: 5
        uses: tespkg/actions-cache/restore@v1
        with:
          path: e2e/mobile/artifacts/e2e-test-results-ios.json
          key: "${{ needs.determine-builds.outputs.ios_timing_cache_key }}"
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN }}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Generate timing-based shards
        id: timing-shards
        uses: LedgerHQ/ledger-live/tools/actions/composites/generate-timing-shards@develop
        with:
          test_filter: ${{ needs.determine-builds.outputs.test_files_for_sharding || inputs.test_filter || '' }}
          test_directory: e2e/mobile
          platform: ios
          shard_index: ${{ matrix.shard }}
          shard_total: ${{ matrix.total }}

      - name: Set shard test files environment variable
        run: |
          echo "SHARD_TEST_FILES<<EOF" >> $GITHUB_ENV
          echo "${{ steps.timing-shards.outputs.shard_test_files }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Boot iOS Simulator in Background
        run: |
          (
            UDID=$(xcrun simctl list devices available | grep -B1 "iOS Simulator" | head -n1 | awk -F '[()]' '{print $2}')
            echo "🛫 Booting simulator with UDID: $UDID"
            xcrun simctl boot "$UDID" || true
            xcrun simctl bootstatus "$UDID"
            echo "✅ Simulator $UDID is now fully booted"
          ) &
        shell: bash

      - name: setup caches
        id: setup-caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        with:
          skip-pod-cache: "true"
          skip-turbo-cache: "false"
          skip-pnpm-cache: "true"
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}

      - uses: nick-fields/retry@v3
        if: inputs.production_firebase != true
        name: install dependencies
        id: install-dependencies
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="ledger-live-mobile-e2e-tests" --filter="@ledgerhq/dummy-*-app..." --filter="live-cli*..." --no-frozen-lockfile --unsafe-perm --ignore-scripts
          new_command_on_retry: rm -rf ~/.cocoapods/ && pnpm clean && pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="ledger-live-mobile-e2e-tests" --filter="@ledgerhq/dummy-*-app..." --filter="live-cli*..." --no-frozen-lockfile --unsafe-perm

      - uses: nick-fields/retry@v3
        if: inputs.production_firebase == true
        name: install dependencies
        id: install-dependencies-prod
        with:
          max_attempts: 2
          timeout_minutes: 15
          command: pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="ledger-live-mobile-e2e-tests" --filter="@ledgerhq/dummy-*-app..." --filter="live-cli*..." --no-frozen-lockfile --unsafe-perm
          new_command_on_retry: rm -rf ~/.cocoapods/ && pnpm clean && pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="ledger-live-mobile-e2e-tests" --filter="@ledgerhq/dummy-*-app..." --filter="live-cli*..." --no-frozen-lockfile

      - name: Detox Post Install
        if: inputs.production_firebase != true
        run: node apps/ledger-live-mobile/node_modules/detox/scripts/postinstall.js

      - name: Download Native Build
        if: inputs.production_firebase != true
        uses: tespkg/actions-cache/restore@v1
        with:
          endpoint: ${{ secrets.S3_DIRECTCONNECT_ENDPOINT }}
          path: ${{ env.IOS_NATIVE_PATH }}
          key: ${{ needs.determine-builds.outputs.ios_native_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Download JS Build
        if: inputs.production_firebase != true
        uses: tespkg/actions-cache/restore@v1
        with:
          endpoint: ${{ secrets.S3_DIRECTCONNECT_ENDPOINT }}
          path: apps/ledger-live-mobile/main.jsbundle
          key: ${{ needs.determine-builds.outputs.ios_js_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Copy JS build
        if: inputs.production_firebase != true
        run: |
          cp apps/ledger-live-mobile/main.jsbundle ${{ env.IOS_JSBUNDLE_PATH }} 
          cp apps/ledger-live-mobile/main.jsbundle ${{ env.IOS_NATIVE_PATH }}/main.jsbundle

      - name: Build dependencies
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:llm:deps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: false

      - name: Build Dummy Live SDK and Dummy Wallet API apps for testing
        run: |
          pnpm build:dummy-apps
        shell: bash

      - name: Build CLI
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:cli
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: false

      - name: Build iOS app for Detox test run
        if: inputs.production_firebase == true
        run: pnpm mobile e2e:ci -p ios -b $([[ "$PRODUCTION" == "true" ]] && printf %s '--production')
        env:
          PRODUCTION: ${{ inputs.production_firebase }}

      - name: Setup Speculos image and Coin Apps
        id: setup-speculos
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-speculos_image@develop
        with:
          coinapps_path: ${{ env.COINAPPS }}
          bot_id: ${{ secrets.GH_BOT_APP_ID }}
          bot_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}

      - name: Set DISABLE_TRANSACTION_BROADCAST
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-e2e-env@develop
        with:
          enable_broadcast: ${{ inputs.enable_broadcast }}
          build_type: ${{ inputs.production_firebase == 'true' && 'js' || 'testing' }}

      - name: Run iOS Detox shard ${{ matrix.shard }}/${{ matrix.total }}
        id: run-ios
        run: |
          pnpm mobile e2e:ci -p ios -t \
            --e2e \
            $([[ "$PRODUCTION" == "true" ]] && printf %s '--production') \
            $SHARD_TEST_FILES \
            --outputFile=artifacts/e2e-test-results-ios-shard-${{ matrix.shard }}.json
        env:
          SEED: ${{ secrets.SEED_QAA_B2C }}
          AWS_ROLE: ${{ secrets.B2CQA_AWS_ROLE }}
          CLUSTER: ${{ secrets.B2CQA_CLUSTER }}
          GITHUB_TOKEN: ${{ secrets.LL_SPECULOS_CI }}
          INPUT_E2E: "true"
          REMOTE_SPECULOS: "true"
          PRODUCTION: ${{ inputs.production_firebase }}
          INPUTS_TEST_FILTER: ${{ inputs.test_filter }}
          SWAP_API_BASE: ${{ env.SWAP_API_BASE }}

      - name: Upload iOS artifacts
        if: (!cancelled() || steps.run-ios.outcome == 'cancelled')
        uses: actions/upload-artifact@v4
        id: "test-artifacts"
        with:
          name: ios-test-artifacts-${{ matrix.shard }}
          path: e2e/mobile/artifacts

      - name: Setup iOS Shard timing artifacts
        if: (!cancelled() || steps.run-ios.outcome == 'cancelled')
        uses: actions/upload-artifact@v4
        with:
          path: e2e/mobile/artifacts/e2e-test-results-ios-shard-${{ matrix.shard }}.json
          name: "${{ needs.determine-builds.outputs.ios_timing_cache_key }}-${{ matrix.shard }}"

      - name: Set job output based on detox result
        id: set-output
        if: ${{ !cancelled() }}
        run: |
          echo "status_${{ matrix.shard }}=${{ steps.run-ios.outcome }}" >> $GITHUB_OUTPUT   

  detox-tests-android:
    name: Android E2E Tests
    needs: [ build-android, determine-builds ]
    if: ${{ inputs.tests_type != 'iOS Only' && needs.determine-builds.outputs.test_files_for_sharding != '' }}
    runs-on: [ ledger-live-linux-8CPU-32RAM ]
    env:
      NODE_OPTIONS: "--max-old-space-size=7168"
      LANG: en_US.UTF-8
      LANGUAGE: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      AVD_API: 35
      AVD_ARCH: x86_64
      AVD_PROFILE: pixel_7_pro
      AVD_TARGET: google_apis
      AVD_NAME: "Android_Emulator"
      AVD_CORES: 4
      AVD_RAM_SIZE: 4096M
      AVD_OPTIONS: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    outputs:
      status: ${{ steps.run-android.outcome }}
      artifact: ${{ steps.test-artifacts.outputs.artifact-id }}
      status_1: ${{ steps.set-output.outputs.status_1 }}
      status_2: ${{ steps.set-output.outputs.status_2 }}
      status_3: ${{ steps.set-output.outputs.status_3 }}
      status_4: ${{ steps.set-output.outputs.status_4 }}
      status_5: ${{ steps.set-output.outputs.status_5 }}
      status_6: ${{ steps.set-output.outputs.status_6 }}
      status_7: ${{ steps.set-output.outputs.status_7 }}
      status_8: ${{ steps.set-output.outputs.status_8 }}
      status_9: ${{ steps.set-output.outputs.status_9 }}
      status_10: ${{ steps.set-output.outputs.status_10 }}
      status_11: ${{ steps.set-output.outputs.status_11 }}
      status_12: ${{ steps.set-output.outputs.status_12 }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.determine-builds.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live
          persist-credentials: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/${{ secrets.AWS_CACHE_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_CACHE_REGION }}

      - name: Setup Android timing cache
        timeout-minutes: 5
        uses: tespkg/actions-cache/restore@v1
        with:
          path: e2e/mobile/artifacts/e2e-test-results-android.json
          key: "${{ needs.determine-builds.outputs.android_timing_cache_key }}"
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN }}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Generate timing-based shards
        id: timing-shards
        uses: LedgerHQ/ledger-live/tools/actions/composites/generate-timing-shards@develop
        with:
          test_filter: ${{ needs.determine-builds.outputs.test_files_for_sharding || inputs.test_filter || '' }}
          test_directory: e2e/mobile
          platform: android
          shard_index: ${{ matrix.shard }}
          shard_total: ${{ matrix.total }}

      - name: Set shard test files environment variable
        run: |
          echo "SHARD_TEST_FILES<<EOF" >> $GITHUB_ENV
          echo "${{ steps.timing-shards.outputs.shard_test_files }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: setup Android SDK
        uses: android-actions/setup-android@v3.2.2
        with:
          packages: "tools platform-tools"

      - name: Download Native Build
        if: inputs.production_firebase != true
        uses: tespkg/actions-cache/restore@v1
        with:
          path: |
            ${{ env.ANDROID_APK_PATH }}
            ${{ env.ANDROID_TESTBINARY_PATH }}
          key: ${{ needs.determine-builds.outputs.android_native_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Download JS Bundle
        if: inputs.production_firebase != true
        uses: tespkg/actions-cache/restore@v1
        with:
          path: ${{ env.ANDROID_JSBUNDLE_PATH }}
          key: ${{ needs.determine-builds.outputs.android_js_key }}
          accessKey: ${{ env.AWS_ACCESS_KEY_ID }}
          secretKey: ${{ env.AWS_SECRET_ACCESS_KEY }}
          sessionToken: ${{ env.AWS_SESSION_TOKEN}}
          bucket: ${{ env.cache-bucket }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          use-fallback: false

      - name: Prepare APK
        if: inputs.production_firebase != true
        run: |
          mkdir -p /tmp/apk/assets
          mkdir /home/runner/.android/
          mv ${{ env.ANDROID_JSBUNDLE_PATH }} /tmp/apk/assets/index.android.bundle
          mv ${{ env.ANDROID_APK_PATH }} /tmp/apk/tmp.apk
          (cd /tmp/apk/; zip -r tmp.apk assets/index.android.bundle)
          /usr/local/lib/android/sdk/build-tools/34.0.0/zipalign -p 4 /tmp/apk/tmp.apk ${{ env.ANDROID_APK_PATH }}
          /usr/local/lib/android/sdk/build-tools/34.0.0/apksigner sign --ks ${{ secrets.ANDROID_KEYSTORE_PATH }} --ks-pass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} --ks-key-alias staging --key-pass ${{ secrets.ANDROID_KEYSTORE_PASSWORD }} ${{ env.ANDROID_APK_PATH }}

      - name: Setup the caches
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-caches@develop
        id: setup-caches
        with:
          install-proto: true
          skip-pnpm-cache: "false"
          skip-turbo-cache: "false"
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          region: ${{ secrets.AWS_CACHE_REGION }}
          turbo-server-token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}

      - name: Enable Hardware Acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Fix emulator directory permissions
        run: sudo chown -R $(whoami):$(id -ng) /usr/local/lib/android/sdk/emulator/

      - name: Install dependencies
        if: inputs.production_firebase != true
        run: |
          pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="ledger-live-mobile-e2e-tests" --filter="live-cli*..." --filter="@ledgerhq/dummy-*-app..." --no-frozen-lockfile --unsafe-perm --ignore-scripts

      - name: Install dependencies
        if: inputs.production_firebase == true
        run: |
          pnpm i --filter="live-mobile..." --filter="ledger-live" --filter="ledger-live-mobile-e2e-tests" --filter="live-cli*..." --filter="@ledgerhq/dummy-*-app..." --no-frozen-lockfile --unsafe-perm

      - name: Detox Post Install
        if: inputs.production_firebase != true
        run: node apps/ledger-live-mobile/node_modules/detox/scripts/postinstall.js

      - name: Build dependencies
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:llm:deps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: false

      - name: Build Dummy Live SDK and Dummy Wallet API apps for testing
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:dummy-apps
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: false

      - name: Build Android app for Detox test run
        if: inputs.production_firebase == true
        run: pnpm mobile e2e:ci -p android -b $([[ "$PRODUCTION" == "true" ]] && printf %s '--production')
        env:
          PRODUCTION: ${{ inputs.production_firebase }}

      - name: Download android emulator
        timeout-minutes: 5
        uses: LedgerHQ/ledger-live/tools/actions/composites/cache/download@develop
        id: detox-avd
        with:
          key: ${{ runner.os }}-detox-avd-${{ env.AVD_NAME }}-${{ env.AVD_PROFILE }}-${{ env.AVD_TARGET }}-${{ env.AVD_API }}-${{ env.AVD_ARCH }}-r2-v8
          accessKey: "${{ secrets.R2_ACCESS_KEY_ID }}"
          secretKey: "${{ secrets.R2_SECRET_ACCESS_KEY }}"
          bucket: ledger-live-cache
          endpoint: ${{ secrets.R2_ENDPOINT }}
          region: auto

      - name: create AVD and generate snapshot for caching
        if: steps.detox-avd.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        id: create-avd
        with:
          api-level: ${{ env.AVD_API }}
          arch: ${{ env.AVD_ARCH }}
          profile: ${{ env.AVD_PROFILE }}
          target: ${{ env.AVD_TARGET }}
          avd-name: ${{ env.AVD_NAME }}
          force-avd-creation: true
          cores: ${{ env.AVD_CORES }}
          ram-size: ${{ env.AVD_RAM_SIZE }}
          disable-linux-hw-accel: false
          emulator-options: ${{ env.AVD_OPTIONS }}
          script: ./tools/scripts/wait_emulator_idle.sh

      - name: Cache android emulator
        uses: LedgerHQ/ledger-live/tools/actions/composites/cache/upload@develop
        if: steps.detox-avd.outputs.cache-hit != 'true'
        with:
          path: |
            /home/runner/.android/
            /usr/local/lib/android/sdk/emulator/
            /usr/local/lib/android/sdk/system-images/android-${{ env.AVD_API }}/${{ env.AVD_TARGET }}/${{ env.AVD_ARCH }}/
          key: ${{ runner.os }}-detox-avd-${{ env.AVD_NAME }}-${{ env.AVD_PROFILE }}-${{ env.AVD_TARGET }}-${{ env.AVD_API }}-${{ env.AVD_ARCH }}-r2-v8
          accessKey: "${{ secrets.R2_ACCESS_KEY_ID }}"
          secretKey: "${{ secrets.R2_SECRET_ACCESS_KEY }}"
          bucket: ledger-live-cache
          endpoint: ${{ secrets.R2_ENDPOINT }}
          region: auto

      - name: Setup Speculos image and Coin Apps
        id: setup-speculos
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-speculos_image@develop
        with:
          coinapps_path: ${{ env.COINAPPS }}
          bot_id: ${{ secrets.GH_BOT_APP_ID }}
          bot_key: ${{ secrets.GH_BOT_PRIVATE_KEY }}

      - name: Build CLI
        uses: LedgerHQ/ledger-live/tools/actions/composites/turbo-step@develop
        with:
          command: pnpm build:cli
          turbo_server_token: ${{ secrets.TURBOREPO_SERVER_TOKEN }}
          turbo_port: ${{ steps.setup-caches.outputs.port }}
          disable_cache: false

      - name: Set DISABLE_TRANSACTION_BROADCAST
        uses: LedgerHQ/ledger-live/tools/actions/composites/setup-e2e-env@develop
        with:
          enable_broadcast: ${{ inputs.enable_broadcast }}
          build_type: ${{ inputs.production_firebase == 'true' && 'js' || 'testing' }}

      - name: Run Android Detox shard ${{ matrix.shard }}/${{ matrix.total }}
        id: run-android
        run: |
          pnpm mobile e2e:ci -p android -t \
            --e2e \
            $([[ "$PRODUCTION" == "true" ]] && printf %s '--production') \
            $SHARD_TEST_FILES \
            --outputFile=artifacts/e2e-test-results-android-shard-${{ matrix.shard }}.json

        env:
          DETOX_INSTALL_TIMEOUT: 120000
          SEED: ${{ secrets.SEED_QAA_B2C }}
          INPUT_E2E: "true"
          PRODUCTION: ${{ inputs.production_firebase }}
          INPUTS_TEST_FILTER: ${{ inputs.test_filter }}
          SWAP_API_BASE: ${{ env.SWAP_API_BASE }}

      - name: Upload Android artifacts
        if: (!cancelled() || steps.run-android.outcome == 'cancelled')
        uses: actions/upload-artifact@v4
        id: "test-artifacts"
        with:
          name: android-test-artifacts-${{ matrix.shard }}
          path: e2e/mobile/artifacts

      - name: Setup Android Shard timing artifacts
        if: (!cancelled() || steps.run-android.outcome == 'cancelled')
        uses: actions/upload-artifact@v4
        with:
          path: e2e/mobile/artifacts/e2e-test-results-android-shard-${{ matrix.shard }}.json
          name: "${{ needs.determine-builds.outputs.android_timing_cache_key }}-${{ matrix.shard }}"

      - name: Set job output based on detox result
        id: set-output
        if: ${{ !cancelled() }}
        run: |
          echo "status_${{ matrix.shard }}=${{ steps.run-android.outcome }}" >> $GITHUB_OUTPUT

  allure-report-ios:
    name: Allure Report iOS
    runs-on: [ ledger-live-medium ]
    if: ${{ !cancelled() && needs.detox-tests-ios.outputs.artifact && inputs.tests_type != 'Android Only' }}
    needs: [ detox-tests-ios ]
    outputs:
      report-url: ${{ steps.upload.outputs.report-url }}
      result: ${{ steps.summary.outputs.test_result }}
      finalStatus: ${{ steps.aggregate.outputs.finalStatus }}
    steps:
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          path: ios-test-artifacts
          pattern: ios-test-artifacts*
          merge-multiple: true
      - uses: LedgerHQ/ledger-live/tools/actions/composites/upload-allure-report@develop
        if: ${{ !cancelled() }}
        id: upload
        with:
          platform: ios-e2e
          login: ${{ vars.ALLURE_USERNAME }}
          password: ${{ secrets.ALLURE_LEDGER_LIVE_PASSWORD }}
          path: ios-test-artifacts
      - name: Get summary
        id: summary
        if: ${{ !cancelled() }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/get-allure-summary@develop
        with:
          allure-results-path: ios-test-artifacts
          platform: iOS
      - name: Aggregate test results
        id: aggregate
        run: |
          statuses=(
            "${{ needs.detox-tests-ios.outputs.status_1 }}"
            "${{ needs.detox-tests-ios.outputs.status_2 }}"
            "${{ needs.detox-tests-ios.outputs.status_3 }}"
            "${{ needs.detox-tests-ios.outputs.status_4 }}"
            "${{ needs.detox-tests-ios.outputs.status_5 }}"
            "${{ needs.detox-tests-ios.outputs.status_6 }}"
            "${{ needs.detox-tests-ios.outputs.status_7 }}"
            "${{ needs.detox-tests-ios.outputs.status_8 }}"
            "${{ needs.detox-tests-ios.outputs.status_9 }}"
            "${{ needs.detox-tests-ios.outputs.status_10 }}"
            "${{ needs.detox-tests-ios.outputs.status_11 }}"
            "${{ needs.detox-tests-ios.outputs.status_12 }}"
          )
          finalStatus="success"
          for status in "${statuses[@]}"; do
            if [ "$status" != "success" ] && [ -n "$status" ]; then
              finalStatus="failure"
              break
            fi
          done
          echo "finalStatus=$finalStatus" >> $GITHUB_OUTPUT

  allure-report-android:
    name: Allure Report Android
    runs-on: [ ledger-live-medium ]
    if: ${{ !cancelled() && needs.detox-tests-android.outputs.artifact && inputs.tests_type != 'iOS Only' }}
    outputs:
      report-url: ${{ steps.upload.outputs.report-url }}
      result: ${{ steps.summary.outputs.test_result }}
      finalStatus: ${{ steps.aggregate.outputs.finalStatus }}
    needs: [ detox-tests-android ]
    steps:
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          path: android-test-artifacts
          pattern: android-test-artifacts*
          merge-multiple: true
      - uses: LedgerHQ/ledger-live/tools/actions/composites/upload-allure-report@develop
        id: upload
        if: ${{ !cancelled() }}
        with:
          platform: android-e2e
          login: ${{ vars.ALLURE_USERNAME }}
          password: ${{ secrets.ALLURE_LEDGER_LIVE_PASSWORD }}
          path: android-test-artifacts
      - name: Get summary
        id: summary
        if: ${{ !cancelled() }}
        uses: LedgerHQ/ledger-live/tools/actions/composites/get-allure-summary@develop
        with:
          allure-results-path: android-test-artifacts
          platform: android
      - name: Aggregate test results
        id: aggregate
        run: |
          statuses=(
            "${{ needs.detox-tests-android.outputs.status_1 }}"
            "${{ needs.detox-tests-android.outputs.status_2 }}"
            "${{ needs.detox-tests-android.outputs.status_3 }}"
            "${{ needs.detox-tests-android.outputs.status_4 }}"
            "${{ needs.detox-tests-android.outputs.status_5 }}"
            "${{ needs.detox-tests-android.outputs.status_6 }}"
            "${{ needs.detox-tests-android.outputs.status_7 }}"
            "${{ needs.detox-tests-android.outputs.status_8 }}"
            "${{ needs.detox-tests-android.outputs.status_9 }}"
            "${{ needs.detox-tests-android.outputs.status_10 }}"
            "${{ needs.detox-tests-android.outputs.status_11 }}"
            "${{ needs.detox-tests-android.outputs.status_12 }}"
          )
          finalStatus="success"
          for status in "${statuses[@]}"; do
            if [ "$status" != "success" ] && [ -n "$status" ]; then
              finalStatus="failure"
              break
            fi
          done
          echo "finalStatus=$finalStatus" >> $GITHUB_OUTPUT

  upload-to-xray:
    name: "Test Mobile E2E > XRAY Report"
    runs-on: [ ledger-live-medium ]
    strategy:
      matrix:
        platform:
          - android
          - ios
        exclude:
          - platform: ${{ github.event.inputs.tests_type == 'Android Only' && 'ios' }}

      fail-fast: false
    env:
      XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
      XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}
      XRAY_API_URL: https://xray.cloud.getxray.app/api/v2
      JIRA_URL: https://ledgerhq.atlassian.net/browse
      TEST_EXECUTION: ${{ matrix.platform == 'android' && inputs.test_execution_android || inputs.test_execution_ios }}
    needs: [ detox-tests-android, detox-tests-ios ]
    if: ${{ !cancelled() && inputs.export_to_xray }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.sha }}
          repository: LedgerHQ/ledger-live

      - name: Download Allure Results
        uses: actions/download-artifact@v4
        with:
          path: "artifacts-${{ matrix.platform }}"
          pattern: ${{ matrix.platform }}-test-artifacts-*
          merge-multiple: true

      - name: Format Xray results
        run: e2e/mobile/xray.formater.sh artifacts-${{ matrix.platform }} ${{ matrix.platform }} ${{ env.TEST_EXECUTION}}

      - name: Upload aggregated xray results
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: xray-reports-${{ matrix.platform }}
          path: "artifacts-${{ matrix.platform }}/xray_report.json"

      - name: Authenticate to Xray
        id: authenticate
        run: |
          response=$(curl -H "Content-Type: application/json" -X POST \
                    --data '{"client_id": "${{ env.XRAY_CLIENT_ID }}", "client_secret": "${{ env.XRAY_CLIENT_SECRET }}"}' \
                    ${{ env.XRAY_API_URL }}/authenticate)
          echo "Xray Authentication Response: $response"
          echo "xray_token=$response" >> $GITHUB_OUTPUT
      - name: Publish report on Xray
        id: publish-xray
        run: |
          response=$(curl -H "Content-Type: application/json" \
                    -H "Authorization: Bearer ${{ steps.authenticate.outputs.xray_token }}" \
                    -X POST \
                    --data @artifacts-${{ matrix.platform }}/xray_report.json \
                    ${{ env.XRAY_API_URL }}/import/execution)
          echo "Xray Report Response: $response"
          key=$(echo $response | jq -r '.key')
          echo "xray_key=$key" >> $GITHUB_OUTPUT
      - name: Write Xray report link in summary
        shell: bash
        run: echo "::notice title=${{ matrix.platform }} Xray report URL::${{ env.JIRA_URL }}/${{ steps.publish-xray.outputs.xray_key }}"

  report-on-slack:
    name: "Test Mobile E2E > Slack Report"
    runs-on: ubuntu-22.04
    needs: [ allure-report-android, allure-report-ios ]
    if: ${{ !cancelled() && (needs.allure-report-ios.outputs.report-url || needs.allure-report-android.outputs.report-url) }}
    env:
      IOS_STATUS: ${{ needs.allure-report-ios.outputs.finalStatus }}
      IOS_REPORT_URL: ${{ needs.allure-report-ios.outputs.report-url }}
      ANDROID_STATUS: ${{ needs.allure-report-android.outputs.finalStatus }}
      ANDROID_REPORT_URL: ${{ needs.allure-report-android.outputs.report-url }}
      ANDROID_ONLY: ${{ inputs.tests_type == 'Android Only' }}
    steps:
      - name: format message
        uses: actions/github-script@v7
        id: message
        with:
          script: |
            const fs = require("fs");
            const text = "Ledger Live Mobile E2E tests finished";
            const header = [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": ":ledger-logo: Ledger Live Mobile E2E tests results on ${{ github.ref_name }} - ${{ inputs.speculos_device || 'nanoX' }}",
                  "emoji": true
                }
              },
              {
                "type": "divider"
              }
            ];
            
            const iOSResult = [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": `- 🍏 iOS - ${{ inputs.speculos_device }}: ${process.env.IOS_STATUS !== 'success' ? '❌' : '✅'} ${{ needs.allure-report-ios.outputs.result || 'No test results' }}`
                }
              }
            ];
            
            const androidResult = [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": `- 🤖 Android - ${{ inputs.speculos_device }}: ${process.env.ANDROID_STATUS !== 'success' ? '❌' : '✅'} ${{ needs.allure-report-android.outputs.result || 'No test results' }}`
                }
              }
            ];
            
            const iOSInfo = [
              {
                "type": "mrkdwn",
                "text": process.env.IOS_REPORT_URL ? `*Allure Report iOS*\n<${process.env.IOS_REPORT_URL}|Allure Report iOS>` : '*Allure Report iOS*\nNo Allure Report'
              }
            ];
            
            const androidInfo = [
              {
                "type": "mrkdwn",
                "text": process.env.ANDROID_REPORT_URL ? `*Allure Report Android*\n<${process.env.ANDROID_REPORT_URL}|Allure Report Android>` : '*Allure Report Android*\nNo Allure Report'
              }
            ];
            
            const infoFields = []
              .concat(${{ env.ANDROID_ONLY == 'true' }} ? [] : iOSInfo)
              .concat(androidInfo)
              .concat([
              {
                "type": "mrkdwn",
                "text": `*Workflow*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Workflow run>`
              }
            ]);
            
            const infoBlock = [
              {
                "type": "divider"
              },
              {
                "type": "section",
                "fields": infoFields
              }
            ];
            
            const blocks = []
              .concat(header)
              .concat(${{ env.ANDROID_ONLY == 'true' }} ? [] : iOSResult)
              .concat(androidResult)
              .concat(infoBlock);
            
            const result = {
                attachments: [
                  {
                    color: process.env.ANDROID_STATUS !== 'success' || (process.env.IOS_STATUS !== 'success' && process.env.ANDROID_ONLY == 'false')
                      ? "#FF333C"
                      : "#33FF39",
                    blocks,
                  },
                ],
              };
            
            fs.writeFileSync(`./payload-slack-content.json`, JSON.stringify(result, null, 2));
      - name: post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "CTMQ0S5SB"
          payload-file-path: "./payload-slack-content.json"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
      - name: post to a Slack channel
        if: ${{ (failure() && contains(fromJson('["develop", "main"]'), github.ref_name)) || contains(fromJson('["release"]'), github.ref_name) || github.event_name == 'schedule' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "C05FKJ7DFAP"
          payload-file-path: "./payload-slack-content.json"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}

  merge-ios-timings:
    name: Merge iOS Timing Files
    needs: [ determine-builds, detox-tests-ios ]
    runs-on: ubuntu-24.04
    if: ${{ !cancelled() && (needs.detox-tests-ios.result == 'success' || needs.detox-tests-ios.result == 'failure') }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/${{ secrets.AWS_CACHE_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_CACHE_REGION }}
      - uses: LedgerHQ/ledger-live/tools/actions/composites/merge-e2e-detox-timings@develop
        with:
          platform: ios
          artifacts_dir: e2e/mobile/artifacts
          key: ${{ needs.determine-builds.outputs.ios_timing_cache_key }}
          aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ env.AWS_SESSION_TOKEN }}
          aws_region: ${{ secrets.AWS_CACHE_REGION }}
          cache_bucket: ${{ env.cache-bucket }}
          github_ref: ${{ github.ref }}
          github_run_id: ${{ github.run_id }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}

  merge-android-timings:
    name: Merge Android Timing Files
    needs: [ determine-builds, detox-tests-android ]
    runs-on: ubuntu-24.04
    if: ${{ !cancelled() && (needs.detox-tests-android.result == 'success' || needs.detox-tests-android.result == 'failure') }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/${{ secrets.AWS_CACHE_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_CACHE_REGION }}
      - uses: LedgerHQ/ledger-live/tools/actions/composites/merge-e2e-detox-timings@develop
        with:
          platform: android
          artifacts_dir: e2e/mobile/artifacts
          key: ${{ needs.determine-builds.outputs.android_timing_cache_key }}
          aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ env.AWS_SESSION_TOKEN }}
          aws_region: ${{ secrets.AWS_CACHE_REGION }}
          cache_bucket: ${{ env.cache-bucket }}
          github_ref: ${{ github.ref }}
          github_run_id: ${{ github.run_id }}
          roleName: ${{ secrets.AWS_CACHE_ROLE_NAME }}
          accountId: ${{ secrets.AWS_ACCOUNT_ID_PROD }}