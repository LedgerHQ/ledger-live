import { ComponentStory } from "@storybook/react-native";
import React, { useCallback, useEffect, useState } from "react";
import { View } from "react-native";
import {
  Flex,
  VerticalTimeline,
  Button,
  Switch,
  Divider,
  ContinueOnDevice,
} from "../../../../src/components";

export default {
  title: "Layout/List/VerticalTimeline",
  component: VerticalTimeline,
};

const { BodyText, SubtitleText, ItemStatus } = VerticalTimeline;

const defaultItems = [
  {
    status: ItemStatus.active,
    title: "step's {title} prop",
    renderBody: () => (
      <Flex borderColor="neutral.c100" borderWidth={1} p={3}>
        <BodyText>{`This box is the React node returned by the step's {renderBody} prop`}</BodyText>
        <Divider my={6} text="`Divider` component" />
        <SubtitleText>This subtitle text component is `VerticalTimeline.SubtitleText`</SubtitleText>
        <BodyText>This body text component is `VerticalTimeline.BodyText`</BodyText>
        <ContinueOnDevice
          Icon={({ size }) => (
            <Flex height={size} width={size} borderRadius={size} bg="neutral.c40" />
          )}
          text="This component is `ContinueOnDevice`."
        />
      </Flex>
    ),
  },
  {
    status: ItemStatus.inactive,
    title: "Set your PIN",
    estimatedTime: 120,
    renderBody: () => (
      <Flex>
        <BodyText>
          {`Your PIN can be 4 to 8 digits long. Anyone with access to your Nano and to your PIN can also access all your crypto and NFT assets.`}
        </BodyText>
        <ContinueOnDevice
          Icon={({ size }) => (
            <Flex height={size} width={size} borderRadius={size} bg="neutral.c40" />
          )}
          text="Set PIN on your Ledger Stax."
        />
      </Flex>
    ),
  },
  {
    status: ItemStatus.inactive,
    title: "Recovery phrase",
    estimatedTime: 300,
    renderBody: () => (
      <Flex>
        <SubtitleText>{`Generate a new phrase`}</SubtitleText>
        <BodyText>
          {`Your device will generate a new secret recovery phrase. For your eyes only.`}
        </BodyText>
        <Divider text="OR" my={6} />
        <SubtitleText>{`Restore using Secret Recovery Phrase`}</SubtitleText>
        <BodyText>
          {`Make sure to use a Phrase generated by a Ledger for the guaranteed security of your assets. `}
        </BodyText>
      </Flex>
    ),
  },
  {
    status: ItemStatus.inactive,
    title: "Software check",
    renderBody: () => (
      <Flex>
        <BodyText>{`We'll verify whether your Nano is genuine. This should be quick and easy!`}</BodyText>
        <DynamicHeightComponent />
      </Flex>
    ),
  },
  {
    status: ItemStatus.inactive,
    title: "Install apps",
    renderBody: () => (
      <Flex>
        <BodyText>{`Installing apps, the scroll view should scroll`}</BodyText>
        <Flex backgroundColor="lightblue" width="100%" height={400} />
      </Flex>
    ),
  },
  {
    status: ItemStatus.inactive,
    title: "Nano is ready",
    renderBody: () => <BodyText>Almost there ...</BodyText>,
  },
];

export const VerticalTimelineStory: ComponentStory<typeof VerticalTimeline> = () => {
  const [items, setItems] = useState(defaultItems);
  const [animate, setAnimate] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);

  const setActiveIndex = useCallback((newIndex: number) => {
    const newItems = defaultItems.map((item, index) => {
      if (index < newIndex) return { ...item, status: ItemStatus.completed };
      else if (index === newIndex) return { ...item, status: ItemStatus.active };
      else return { ...item, status: ItemStatus.inactive };
    });
    setCurrentIndex(newIndex);
    setItems(newItems);
  }, []);

  useEffect(() => {
    let timeout: ReturnType<typeof setTimeout>;
    if (animate) {
      timeout = setTimeout(() => {
        if (!animate) {
          return;
        }
        if (currentIndex === defaultItems.length) {
          setActiveIndex(0);
        } else {
          setActiveIndex(currentIndex + 1);
        }
      }, 1000);
    }
    return () => {
      timeout && clearTimeout(timeout);
    };
    // eslint-disable-next-line
  }, [animate, currentIndex]);
  return (
    <Flex width={"100%"} px={30} flex={1}>
      <Switch checked={animate} onChange={setAnimate} label={"Auto animate VerticalTimeline"} />
      <Button my={3} type="main" outline onPress={() => setActiveIndex(items.length)}>
        Set last step complete
      </Button>
      <Divider />
      <VerticalTimeline steps={items} setActiveIndex={animate ? undefined : setActiveIndex} />
    </Flex>
  );
};
VerticalTimelineStory.storyName = "VerticalTimeline";

const DynamicHeightComponent = () => {
  const [height, setHeight] = useState(100);
  return (
    <View>
      <Button
        type="main"
        onPress={() => {
          setHeight(Math.random() * 500);
        }}
      >
        set random size
      </Button>
      <View style={{ backgroundColor: "lightgreen", width: "100%", height }} />
    </View>
  );
};
