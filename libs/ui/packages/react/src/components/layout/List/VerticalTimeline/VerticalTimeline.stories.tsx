import React, { useEffect, useMemo, useState } from "react";
import Flex from "../../Flex";
import { Switch } from "../../../form";
import { Text, Divider } from "../../../asorted";
import Button from "../../../cta/Button";
import ContinueOnDevice from "../../../message/ContinueOnDevice";
import VerticalTimeline from ".";
import type { Item } from ".";
const description = `
### A Vertical Timeline

This components accepts an Array of object like this:
## Usage

\`\`\`js

const steps = [
    {
      /**
       * status is an ItemStatus which can be inactive, active or completed
       */
      status: ItemStatus;
      /**
       * title is the title of the step
       */
      title: string;
      /**
       * renderBody is an optional prop which is a ReactNode to be rendered next to the title
       */
      renderBody?: (isDisplayed?: boolean) => ReactNode;
      /**
       * estimatedTime is an optional prop that take the estimated time to complete the time in second and display it in a tag in minute
       */
       estimatedTime?: number;
    },
    {
      status: ItemStatus;
      title: string;
      renderBody?: (isDisplayed?: boolean) => ReactNode;
      estimatedTime?: number;
    }
  ];

<VerticalTimeline steps={steps as any} />
\`\`\`
`;

export default {
  title: "Layout/List/VerticalTimeline",
  argTypes: {
    steps: {
      control: "disabled",
    },
  },
  parameters: {
    docs: {
      description: {
        component: description,
      },
    },
  },
};

const { BodyText, SubtitleText } = VerticalTimeline;

const defaultItems: Item[] = [
  {
    status: "active",
    title: "step's {title} prop",
    renderBody: () => (
      <Flex flexDirection="column" flex={1} border="1px solid" borderColor="neutral.c100" p={3}>
        {/* @ts-expect-error children props issue */}
        <BodyText>{`This box is the React node returned by the step's {renderBody} prop`}</BodyText>
        <Divider my={6} text="`Divider` component" />
        {/* @ts-expect-error children props issue */}
        <SubtitleText>This subtitle text component is `VerticalTimeline.SubtitleText`</SubtitleText>
        {/* @ts-expect-error children props issue */}
        <BodyText>This body text component is `VerticalTimeline.BodyText`</BodyText>
        <ContinueOnDevice
          Icon={({ size }) => (
            <Flex height={size} width={size} borderRadius={size} bg="neutral.c40" />
          )}
          text="This component is `ContinueOnDevice`."
        />
      </Flex>
    ),
  },
  {
    status: "inactive",
    title: "Set your PIN",
    estimatedTime: 120,
    renderBody: () => (
      <Flex flexDirection="column">
        {/* @ts-expect-error children props issue */}
        <BodyText>
          {`Your PIN can be 4 to 8 digits long. Anyone with access to your Nano and to your PIN can also access all your crypto and NFT assets.`}
        </BodyText>
        <ContinueOnDevice
          Icon={({ size }) => (
            <Flex height={size} width={size} borderRadius={size} bg="neutral.c40" />
          )}
          text="Set PIN on your Ledger Stax."
        />
      </Flex>
    ),
  },
  {
    status: "inactive",
    title: "Recovery phrase",
    estimatedTime: 300,
    renderBody: () => (
      <Flex flexDirection="column">
        {/* @ts-expect-error children props issue */}
        <SubtitleText>{`Generate a new phrase`}</SubtitleText>
        {/* @ts-expect-error children props issue */}
        <BodyText>
          {`Your device will generate a new secret recovery phrase. For your eyes only.`}
        </BodyText>
        <Divider text="OR" my={6} />
        {/* @ts-expect-error children props issue */}
        <SubtitleText>{`Restore using Secret Recovery Phrase`}</SubtitleText>
        {/* @ts-expect-error children props issue */}
        <BodyText>
          {`Make sure to use a Phrase generated by a Ledger for the guaranteed security of your assets. `}
        </BodyText>
      </Flex>
    ),
  },
  {
    status: "inactive",
    title: "Software check",
    renderBody: () => (
      <Flex flexDirection="column">
        {/* @ts-expect-error children props issue */}
        <BodyText>{`We'll verify whether your Nano is genuine. This should be quick and easy!`}</BodyText>
      </Flex>
    ),
  },
  {
    status: "inactive",
    title: "Install apps",
    renderBody: () => (
      <Flex flexDirection="column">
        {/* @ts-expect-error children props issue */}
        <BodyText>{`Installing apps`}</BodyText>
      </Flex>
    ),
  },
  {
    status: "inactive",
    title: "Nano is ready",
    // @ts-expect-error children props issue
    renderBody: () => <BodyText>Almost there ...</BodyText>,
  },
];

const Template = () => {
  const [autoAnimate, setAutoAnimate] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(1);

  useEffect(() => {
    let timeout: ReturnType<typeof setTimeout> | null = null;
    if (autoAnimate) {
      timeout = setTimeout(() => {
        if (currentIndex === defaultItems.length) {
          setCurrentIndex(0);
          return;
        }
        setCurrentIndex(currentIndex + 1);
      }, 1000);
    }
    return () => {
      timeout && clearTimeout(timeout);
    };
  }, [autoAnimate, currentIndex]);

  const items: Item[] = useMemo(
    () =>
      defaultItems.map((item, index) => ({
        ...item,
        status: index < currentIndex ? "completed" : index > currentIndex ? "inactive" : "active",
      })),
    [currentIndex],
  );

  return (
    <Flex flexDirection="column" flex={1} alignItems="center">
      <Flex
        flexDirection="column"
        p={6}
        rowGap={3}
        alignSelf="stretch"
        alignItems="flex-start"
        flex={1}
        borderColor="neutral.c100"
        border="1px solid"
      >
        <Text variant="h5Inter">Controls:</Text>
        <Switch
          name="Auto animate"
          label="Auto animate steps"
          checked={autoAnimate}
          onChange={() => setAutoAnimate(!autoAnimate)}
        />
        <Button my={3} variant="main" outline onClick={() => setCurrentIndex(items.length)}>
          Set last step complete
        </Button>
        <Text variant="body">
          Click on a step to make it the active one (this is only for the storybook, not a native
          feature of this component, although you can implement `onClickIndex` to do that)
        </Text>
      </Flex>

      <Flex width={432} mt={10}>
        <VerticalTimeline steps={items} onClickIndex={index => setCurrentIndex(index)} />
      </Flex>
    </Flex>
  );
};

export const Default = Template.bind({});
