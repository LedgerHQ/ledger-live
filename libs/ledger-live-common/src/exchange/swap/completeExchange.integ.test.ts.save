import { ExchangeTypes, RateTypes } from "@ledgerhq/hw-app-exchange";
import completeExchange from "./completeExchange";
import { EvmTransactionLegacy } from "@ledgerhq/coin-evm/types/index";
import BigNumber from "bignumber.js";
import { CompleteExchangeInputSwap } from "../platform/types";
import { genAccount } from "../../mock/account";
import { getCryptoCurrencyById } from "@ledgerhq/cryptoassets/index";
import { TestScheduler } from "rxjs/testing";
import SpeculosTransportHttp from "@ledgerhq/hw-transport-node-speculos-http";
import { registerTransportModule } from "../../hw";
import Transport from "@ledgerhq/hw-transport";
import { setEnv } from "@ledgerhq/live-env";
import { setSupportedCurrencies } from "@ledgerhq/coin-framework/currencies/index";
import startExchange from "../platform/startExchange";
import { ExchangeTypes, createExchange, getExchangeErrorMessage } from "@ledgerhq/hw-app-exchange";

const ETH = getCryptoCurrencyById("ethereum");
const account = genAccount("mocked-account-1", { currency: ETH, withNft: false });
jest.mock("../../account", () => ({
  getMainAccount: jest.fn(() => account),
}));

jest.mock("@ledgerhq/hw-app-exchange", () => ({
  createExchange: jest.fn(() => ({
    
  })),
}))

describe("completeExchange", () => {
  let testScheduler: TestScheduler;
  let transport: Transport;

  beforeAll(async () => {
    transport = await SpeculosTransportHttp.open({});
    registerTransportModule({
      id: "speculosId",
      open: () => Promise.resolve(transport),
      disconnect: () => Promise.resolve(),
    });

    // listen((log: Log) => console.log("TEST LOG:", log));

    setSupportedCurrencies(["ethereum"]);

    setEnv("MOCK", "13412534563");
    setEnv("MOCK_EXCHANGE_TEST_CONFIG", true);
  });
  afterAll(async () => {
    transport.close();
    setEnv("MOCK_EXCHANGE_TEST_CONFIG", false);
    setEnv("MOCK", "");
  });

  beforeEach(() => {
    testScheduler = new TestScheduler((actual, expected) => {
      return expect(actual).toEqual(expected);
    });
  });

  it("returns an ok", () => {
    // Given
    const partnerPubKey = Buffer.from(
      "04f7e19b82132ca580fb080c8165f1fdb1b2d8c53d96918c88ef9817cccfe90df95371b4ac8373d3a7e7ad3623bccd8c48df7756b6f71ffa745d78996b23b42eeb"
    );
    const partnerSignature = Buffer.from(
      "3045022100bdebdeda795814f17e893385d8d3fea25cb084e31e77819fc987323f190875ba022065f163dbb0accf014cbea49688b0cd73ece0c1ae95a09eec948ef057b16a5ba5"
    );
    const protobufPayload =
      "0a2a3078643639324362313334363236324635383444313742344234373039353435303166363731356138321a2a3078446164373739313044624446644537363466433231464344344537344437316242414341364438442a2a62633171657235376d6130667a6871797332636d796468756a3963707266396567306e7739323261386a3a0345544842034254434a02186a5205174876e8006220350aea0c97f747f1d0f760814614a47523801b1aeb7d0bcbbaa2a4f46bf8184b";
    const payloadSignature =
      "f990efe14f232deace1ad648f26f86d80d517fcfc3be15a7ef8716531bf5a6101dfdf9e9c6a0d52e7512da6994277a409cf18632291f0291c1502ebeb0c4b712";
    const tx: EvmTransactionLegacy = {
      family: "evm",
      amount: new BigNumber("10000000"),
      recipient: "0x4a3603",
      mode: "send",
      // transaction number, relative to the account. used to sequence transactions
      nonce: 12,
      // maximum of gas (as unit of computation) used by the transaction
      gasLimit: new BigNumber("10000"),
      // custom gas limit manually set by the user overriding the gasLimit
      // customGasLimit?: BigNumber;
      // id of the blockchain to use (used at the signature level for EIP-155)
      chainId: 1,
      // buffer of the calldata that will be used by the smart contract
      // data?: Buffer | null;
      // type of the transaction (will determine if transaction is a legacy transaction or an EIP-1559 one)
      type: 0,
      // additional fees can be expected on some Layer 2 chains.
      // It's an additional cost to take into account while estimating the cost of the tx.
      // additionalFees?: BigNumber;
      // available gas options for the transaction, used to display sensible default fees choices to the user
      // gasOptions?: GasOptions;
      gasPrice: new BigNumber("10000"),
    };
    const info: CompleteExchangeInputSwap = {
      exchangeType: 0x00,
      exchange: {
        fromParentAccount: null,
        fromAccount: account,
        toParentAccount: null,
        toAccount: account,
      },
      rateType: 0x00,
      deviceId: "speculosId",
      provider: "SWAP_TEST",
      binaryPayload: protobufPayload,
      signature: payloadSignature,
      transaction: tx,
    };

    // firstValueFrom(
    //   startExchange({
    //     deviceId: "speculosId",
    //     exchangeType: 0x00,
    //   }),
    // );

    // When
    // const event = startExchange({
    //   deviceId: "speculosId",
    //   exchangeType: 0x00,
    // }).pipe(() => completeExchange(info));
    const event = startExchange({
      deviceId: "speculosId",
      exchangeType: 0x00,
    });

    // Then
    const expectedMarbles = "--a|";
    const expectedValues = {
      a: { type: "start-exchange-result", nonce: "5555555555" },
      // a: {
      //   type: "complete-exchange-result",
      //   completeExchangeResult: tx,
      // },
    };
    testScheduler.run(({ expectObservable }) => {
      expectObservable(event).toBe(expectedMarbles, expectedValues);
    });
  });
});
