diff --git a/.changeset/tall-waves-poke.md b/.changeset/tall-waves-poke.md
new file mode 100644
index 00000000000..f3ddbe92757
--- /dev/null
+++ b/.changeset/tall-waves-poke.md
@@ -0,0 +1,10 @@
+---
+"@ledgerhq/coin-hedera": minor
+"@ledgerhq/ledger-trust-service": minor
+"ledger-live-desktop": minor
+"live-mobile": minor
+"@ledgerhq/live-common": minor
+"ledger-live-desktop-e2e-tests": minor
+---
+
+support for Hedera swaps
diff --git a/apps/ledger-live-desktop/src/renderer/drawers/SwapOperationDetails/index.tsx b/apps/ledger-live-desktop/src/renderer/drawers/SwapOperationDetails/index.tsx
index 1620cb3d832..5edba15e7cc 100644
--- a/apps/ledger-live-desktop/src/renderer/drawers/SwapOperationDetails/index.tsx
+++ b/apps/ledger-live-desktop/src/renderer/drawers/SwapOperationDetails/index.tsx
@@ -4,7 +4,10 @@ import { AdditionalProviderConfig } from "@ledgerhq/live-common/exchange/provide
 import { isSwapOperationPending } from "@ledgerhq/live-common/exchange/swap/index";
 import { MappedSwapOperation } from "@ledgerhq/live-common/exchange/swap/types";
 import { getProviderName } from "@ledgerhq/live-common/exchange/swap/utils/index";
-import { getDefaultExplorerView, getTransactionExplorer } from "@ledgerhq/live-common/explorers";
+import {
+  getDefaultExplorerView,
+  getTransactionExplorer as getDefaultTransactionExplorer,
+} from "@ledgerhq/live-common/explorers";
 import { Account, TokenAccount } from "@ledgerhq/types-live";
 import uniq from "lodash/uniq";
 import React, { useCallback, useEffect, useState } from "react";
@@ -30,6 +33,7 @@ import {
   OpDetailsSection,
   OpDetailsTitle,
 } from "~/renderer/drawers/OperationDetails/styledComponents";
+import { getLLDCoinFamily } from "~/renderer/families";
 import { useAccountUnit } from "~/renderer/hooks/useAccountUnit";
 import { dayFormat, useDateFormatted } from "~/renderer/hooks/useDateFormatter";
 import useTheme from "~/renderer/hooks/useTheme";
@@ -128,11 +132,17 @@ const SwapOperationDetails = ({
   const { t } = useTranslation();
   const mainCurrency =
     fromCurrency.type === "CryptoCurrency" ? fromCurrency : fromCurrency.parentCurrency;
+
+  const specific = mainCurrency ? getLLDCoinFamily(mainCurrency.family) : null;
+  const getTransactionExplorer = specific?.getTransactionExplorer;
+
   //Temporary feature before adding history to swap live app
   const url =
     provider === "lifi"
       ? "https://scan.li.fi/tx/$hash".replace("$hash", operation.hash)
-      : getTransactionExplorer(getDefaultExplorerView(mainCurrency), operation.hash);
+      : getTransactionExplorer
+        ? getTransactionExplorer(getDefaultExplorerView(mainCurrency), operation)
+        : getDefaultTransactionExplorer(getDefaultExplorerView(mainCurrency), operation.hash);
 
   useEffect(() => {
     const getProvideData = async () => {
diff --git a/apps/ledger-live-desktop/static/i18n/en/app.json b/apps/ledger-live-desktop/static/i18n/en/app.json
index 4dc322d70a4..b1ece7cd293 100644
--- a/apps/ledger-live-desktop/static/i18n/en/app.json
+++ b/apps/ledger-live-desktop/static/i18n/en/app.json
@@ -461,6 +461,8 @@
       "apt_description": "To swap Aptos, use any other compatible Ledger device, such as the Ledger Nano S Plus™, Ledger Nano X™, Ledger Flex™ or Ledger Stax™.",
       "cosmos_title": "Ledger Nano S™ does not support swapping Cosmos",
       "cosmos_description": "To swap Cosmos, use any other compatible Ledger device, such as the Ledger Nano S Plus™, Ledger Nano X™, Ledger Flex™ or Ledger Stax™.",
+      "hedera_title": "Ledger Nano S™ does not support swapping Hedera",
+      "hedera_description": "To swap Hedera, use any other compatible Ledger device, such as the Ledger Nano S Plus™, Ledger Nano X™, Ledger Flex™ or Ledger Stax™.",
       "osmo_title": "Ledger Nano S™ does not support swapping Osmosis",
       "osmo_description": "To swap Osmosis, use any other compatible Ledger device, such as the Ledger Nano S Plus™, Ledger Nano X™, Ledger Flex™ or Ledger Stax™.",
       "dydx_title": "Ledger Nano S™ does not support swapping dYdX",
@@ -7375,4 +7377,4 @@
     "downloadOnLedger": "Download on Ledger.com",
     "downloadProgress": "Downloading... {{ progress }}%"
   }
-}
+}
\ No newline at end of file
diff --git a/apps/ledger-live-mobile/src/locales/en/common.json b/apps/ledger-live-mobile/src/locales/en/common.json
index 8e8f8b74af8..eef9af4bbde 100644
--- a/apps/ledger-live-mobile/src/locales/en/common.json
+++ b/apps/ledger-live-mobile/src/locales/en/common.json
@@ -3663,6 +3663,8 @@
         "apt_description": "To swap Aptos, use any other compatible Ledger device, such as the Ledger Nano S Plus™, Ledger Nano X™, Ledger Flex™ or Ledger Stax™.",
         "cosmos_title": "Ledger Nano S™ does not support swapping Cosmos",
         "cosmos_description": "To swap Cosmos, use any other compatible Ledger device, such as the Ledger Nano S Plus™, Ledger Nano X™, Ledger Flex™ or Ledger Stax™.",
+        "hedera_title": "Ledger Nano S™ does not support swapping Hedera",
+        "hedera_description": "To swap Hedera, use any other compatible Ledger device, such as the Ledger Nano S Plus™, Ledger Nano X™, Ledger Flex™ or Ledger Stax™.",
         "osmo_title": "Ledger Nano S™ does not support swapping Osmosis",
         "osmo_description": "To swap Osmosis, use any other compatible Ledger device, such as the Ledger Nano S Plus™, Ledger Nano X™, Ledger Flex™ or Ledger Stax™.",
         "dydx_title": "Ledger Nano S™ does not support swapping dYdX",
diff --git a/e2e/desktop/tests/specs/swap.send.spec.ts b/e2e/desktop/tests/specs/swap.send.spec.ts
index 37a80102a06..0d990b63d4e 100644
--- a/e2e/desktop/tests/specs/swap.send.spec.ts
+++ b/e2e/desktop/tests/specs/swap.send.spec.ts
@@ -149,6 +149,12 @@ const swaps = [
     xrayTicket: "B2CQA-3081",
     tag: ["@NanoSP", "@NanoX"],
   },
+  {
+    fromAccount: Account.HEDERA_1,
+    toAccount: Account.BTC_NATIVE_SEGWIT_1,
+    xrayTicket: "XXXXX-XXXX",
+    tag: ["@NanoSP", "@NanoX"],
+  },
 ];
 
 for (const { fromAccount, toAccount, xrayTicket, tag } of swaps) {
diff --git a/libs/coin-modules/coin-hedera/src/api/network.ts b/libs/coin-modules/coin-hedera/src/api/network.ts
index 32ad12e0ad4..69b73e1f42f 100644
--- a/libs/coin-modules/coin-hedera/src/api/network.ts
+++ b/libs/coin-modules/coin-hedera/src/api/network.ts
@@ -27,13 +27,18 @@ export async function buildUnsignedTransaction({
   const hbarAmount = Hbar.fromTinybars(transaction.amount);
   const accountId = account.freshAddress;
 
-  return new TransferTransaction()
+  const tx = new TransferTransaction()
     .setNodeAccountIds([new AccountId(3)])
     .setTransactionId(TransactionId.generate(accountId))
     .setTransactionMemo(transaction.memo ?? "")
     .addHbarTransfer(accountId, hbarAmount.negated())
-    .addHbarTransfer(transaction.recipient, hbarAmount)
-    .freeze();
+    .addHbarTransfer(transaction.recipient, hbarAmount);
+
+  if (transaction.maxFee) {
+    tx.setMaxTransactionFee(Hbar.fromTinybars(transaction.maxFee.toNumber()));
+  }
+
+  return tx.freeze();
 }
 
 export interface AccountBalance {
diff --git a/libs/coin-modules/coin-hedera/src/bridge/getTransactionStatus.ts b/libs/coin-modules/coin-hedera/src/bridge/getTransactionStatus.ts
index 701c399c218..0e207c43b3a 100644
--- a/libs/coin-modules/coin-hedera/src/bridge/getTransactionStatus.ts
+++ b/libs/coin-modules/coin-hedera/src/bridge/getTransactionStatus.ts
@@ -44,6 +44,7 @@ export const getTransactionStatus: AccountBridge<Transaction>["getTransactionSta
   }
 
   const estimatedFees = await getEstimatedFees(account);
+  transaction.maxFee = estimatedFees;
 
   return {
     amount,
diff --git a/libs/coin-modules/coin-hedera/src/bridge/transaction.test.ts b/libs/coin-modules/coin-hedera/src/bridge/transaction.test.ts
index 64e8e76c14b..be3902148e5 100644
--- a/libs/coin-modules/coin-hedera/src/bridge/transaction.test.ts
+++ b/libs/coin-modules/coin-hedera/src/bridge/transaction.test.ts
@@ -51,12 +51,16 @@ const transaction: Transaction = {
   family: "hedera",
   amount: new BigNumber(1),
   recipient: "0.0.3",
+  memo: "test",
+  maxFee: new BigNumber(1000000),
 };
 
 const transactionRaw: TransactionRaw = {
   family: "hedera",
   amount: "1",
   recipient: "0.0.3",
+  memo: "test",
+  maxFee: "1000000",
 };
 
 describe("transaction", () => {
diff --git a/libs/coin-modules/coin-hedera/src/transaction.ts b/libs/coin-modules/coin-hedera/src/transaction.ts
index e9199ce955f..b1e7b6e3d8a 100644
--- a/libs/coin-modules/coin-hedera/src/transaction.ts
+++ b/libs/coin-modules/coin-hedera/src/transaction.ts
@@ -1,3 +1,4 @@
+import BigNumber from "bignumber.js";
 import type { Transaction, TransactionRaw } from "./types";
 import { formatTransactionStatus } from "@ledgerhq/coin-framework/formatters";
 import {
@@ -26,6 +27,7 @@ export function fromTransactionRaw(tr: TransactionRaw): Transaction {
     ...common,
     family: tr.family,
     memo: tr.memo,
+    maxFee: tr.maxFee ? new BigNumber(tr.maxFee) : undefined,
   };
 }
 
@@ -36,6 +38,7 @@ export function toTransactionRaw(t: Transaction): TransactionRaw {
     ...common,
     family: t.family,
     memo: t.memo,
+    maxFee: t.maxFee ? t.maxFee.toString() : undefined,
   };
 }
 
diff --git a/libs/coin-modules/coin-hedera/src/types/bridge.ts b/libs/coin-modules/coin-hedera/src/types/bridge.ts
index e5ea008fa3d..aed0713e96a 100644
--- a/libs/coin-modules/coin-hedera/src/types/bridge.ts
+++ b/libs/coin-modules/coin-hedera/src/types/bridge.ts
@@ -1,3 +1,4 @@
+import BigNumber from "bignumber.js";
 import type {
   TransactionCommon,
   TransactionCommonRaw,
@@ -16,11 +17,13 @@ export type NetworkInfoRaw = {
 export type Transaction = TransactionCommon & {
   family: "hedera";
   memo?: string | undefined;
+  maxFee?: BigNumber | undefined;
 };
 
 export type TransactionRaw = TransactionCommonRaw & {
   family: "hedera";
   memo?: string | undefined;
+  maxFee?: string | undefined;
 };
 
 export type TransactionStatus = TransactionStatusCommon;
diff --git a/libs/ledger-live-common/package.json b/libs/ledger-live-common/package.json
index daae4ef5fb7..c3db6b3f63f 100644
--- a/libs/ledger-live-common/package.json
+++ b/libs/ledger-live-common/package.json
@@ -177,9 +177,11 @@
     "@ledgerhq/hw-app-trx": "workspace:^",
     "@ledgerhq/hw-app-vet": "workspace:^",
     "@ledgerhq/hw-app-xrp": "workspace:^",
+    "@ledgerhq/hw-bolos": "workspace:^",
     "@ledgerhq/hw-transport": "workspace:^",
     "@ledgerhq/hw-transport-mocker": "workspace:^",
     "@ledgerhq/ledger-cal-service": "workspace:^",
+    "@ledgerhq/ledger-trust-service": "workspace:^",
     "@ledgerhq/live-app-sdk": "^0.8.1",
     "@ledgerhq/live-config": "workspace:^",
     "@ledgerhq/live-countervalues": "workspace:^",
diff --git a/libs/ledger-live-common/src/e2e/enum/Account.ts b/libs/ledger-live-common/src/e2e/enum/Account.ts
index a9133a75d85..ecb508fb6bd 100644
--- a/libs/ledger-live-common/src/e2e/enum/Account.ts
+++ b/libs/ledger-live-common/src/e2e/enum/Account.ts
@@ -284,6 +284,8 @@ export class Account {
     0,
   );
 
+  static readonly HEDERA_1 = new Account(Currency.HBAR, "Hedera 1", "0.0.8835924", 0);
+
   static readonly INJ_1 = new Account(
     Currency.INJ,
     "Injective 1",
diff --git a/libs/ledger-live-common/src/e2e/enum/AppInfos.ts b/libs/ledger-live-common/src/e2e/enum/AppInfos.ts
index 5f32d6b6254..cfb59d538ba 100644
--- a/libs/ledger-live-common/src/e2e/enum/AppInfos.ts
+++ b/libs/ledger-live-common/src/e2e/enum/AppInfos.ts
@@ -60,4 +60,6 @@ export class AppInfos {
   static readonly CELO = new AppInfos("Celo");
 
   static readonly LTC = new AppInfos("Litecoin");
+
+  static readonly HEDERA = new AppInfos("Hedera");
 }
diff --git a/libs/ledger-live-common/src/e2e/enum/Currency.ts b/libs/ledger-live-common/src/e2e/enum/Currency.ts
index 01be6f0fc6c..064874f315f 100644
--- a/libs/ledger-live-common/src/e2e/enum/Currency.ts
+++ b/libs/ledger-live-common/src/e2e/enum/Currency.ts
@@ -19,6 +19,8 @@ export class Currency {
 
   static readonly APT = new Currency("Aptos", "APT", "aptos", AppInfos.APTOS);
 
+  static readonly HBAR = new Currency("Hedera", "HBAR", "hedera", AppInfos.HEDERA);
+
   static readonly tBTC = new Currency(
     "Bitcoin Testnet",
     "𝚝BTC",
diff --git a/libs/ledger-live-common/src/e2e/families/hedera.ts b/libs/ledger-live-common/src/e2e/families/hedera.ts
new file mode 100644
index 00000000000..4bcd3699eda
--- /dev/null
+++ b/libs/ledger-live-common/src/e2e/families/hedera.ts
@@ -0,0 +1,7 @@
+import { pressBoth, pressUntilTextFound } from "../speculos";
+import { DeviceLabels } from "../enum/DeviceLabels";
+
+export async function sendHedera() {
+  await pressUntilTextFound(DeviceLabels.APPROVE);
+  await pressBoth();
+}
diff --git a/libs/ledger-live-common/src/e2e/speculos.ts b/libs/ledger-live-common/src/e2e/speculos.ts
index 78bdb1218b9..cc14650ab05 100644
--- a/libs/ledger-live-common/src/e2e/speculos.ts
+++ b/libs/ledger-live-common/src/e2e/speculos.ts
@@ -28,6 +28,7 @@ import { sendStellar } from "./families/stellar";
 import { sendCardano, delegateCardano } from "./families/cardano";
 import { sendXRP } from "./families/xrp";
 import { sendAptos } from "./families/aptos";
+import { sendHedera } from "./families/hedera";
 import { delegateNear } from "./families/near";
 import { delegateCosmos, sendCosmos } from "./families/cosmos";
 import { delegateSolana, sendSolana } from "./families/solana";
@@ -324,6 +325,14 @@ export const specs: Specs = {
     },
     dependency: "",
   },
+  Hedera: {
+    currency: getCryptoCurrencyById("hedera"),
+    appQuery: {
+      model: getSpeculosModel(),
+      appName: "Hedera",
+    },
+    dependency: "",
+  },
 };
 
 export async function startSpeculos(
@@ -626,6 +635,9 @@ export async function signSendTransaction(tx: Transaction) {
     case Currency.APT:
       await sendAptos();
       break;
+    case Currency.HBAR:
+      await sendHedera();
+      break;
     default:
       throw new Error(`Unsupported currency: ${currencyName.ticker}`);
   }
diff --git a/libs/ledger-live-common/src/exchange/platform/types.ts b/libs/ledger-live-common/src/exchange/platform/types.ts
index 4e0dd39df1c..3e3edabc47e 100644
--- a/libs/ledger-live-common/src/exchange/platform/types.ts
+++ b/libs/ledger-live-common/src/exchange/platform/types.ts
@@ -1,3 +1,4 @@
+import type { DeviceModelId } from "@ledgerhq/devices";
 import { CryptoOrTokenCurrency } from "@ledgerhq/types-cryptoassets";
 import type { Account, AccountLike, AccountRaw, AccountRawLike } from "@ledgerhq/types-live";
 import type { ExchangeTypes, RateTypes } from "@ledgerhq/hw-app-exchange";
@@ -42,6 +43,7 @@ export type StartExchangeInput = {
 
 interface CompleteExchangeInputCommon {
   rateType?: RateTypes;
+  deviceModelId?: DeviceModelId;
   deviceId?: string;
   provider: string;
   binaryPayload: string;
diff --git a/libs/ledger-live-common/src/exchange/swap/completeExchange.ts b/libs/ledger-live-common/src/exchange/swap/completeExchange.ts
index 838ae0c2f14..948a50e4b88 100644
--- a/libs/ledger-live-common/src/exchange/swap/completeExchange.ts
+++ b/libs/ledger-live-common/src/exchange/swap/completeExchange.ts
@@ -13,12 +13,14 @@ import {
 import { getDefaultAccountName } from "@ledgerhq/live-wallet/accountName";
 import { log } from "@ledgerhq/logs";
 import BigNumber from "bignumber.js";
+import invariant from "invariant";
 import { Observable } from "rxjs";
 import secp256k1 from "secp256k1";
 import { getCurrencyExchangeConfig } from "../";
 import { getAccountCurrency, getMainAccount } from "../../account";
 import { getAccountBridge } from "../../bridge";
 import { TransactionRefusedOnDevice } from "../../errors";
+import { handleHederaTrustedFlow } from "../../families/hedera/exchange";
 import { withDevicePromise } from "../../hw/deviceAccess";
 import { delay } from "../../promise";
 import { CompleteExchangeStep, convertTransportError } from "../error";
@@ -34,8 +36,16 @@ const completeExchange = (
   input: CompleteExchangeInputSwap,
 ): Observable<CompleteExchangeRequestEvent> => {
   let { transaction } = input; // TODO build a tx from the data
-
-  const { deviceId, exchange, provider, binaryPayload, signature, rateType, exchangeType } = input;
+  const {
+    deviceId,
+    deviceModelId,
+    exchange,
+    provider,
+    binaryPayload,
+    signature,
+    rateType,
+    exchangeType,
+  } = input;
 
   const { fromAccount, fromParentAccount } = exchange;
   const { toAccount, toParentAccount } = exchange;
@@ -152,6 +162,22 @@ const completeExchange = (
         await exchange.checkTransactionSignature(goodSign);
         if (unsubscribed) return;
 
+        // Hedera swap payload is filled with user account address,
+        // but the device app requires the related public key for verification.
+        // Since this key is stored on-chain, we use the TrustedService
+        // to fetch a signed descriptor linking the address to its public key.
+        const hederaAccount = (() => {
+          if (payoutAccount.currency.family === "hedera") return payoutAccount;
+          if (refundAccount.currency.family === "hedera") return refundAccount;
+          return null;
+        })();
+
+        if (hederaAccount) {
+          invariant(deviceModelId, "hedera: deviceModelId is not available");
+          await handleHederaTrustedFlow({ exchange, hederaAccount, deviceModelId });
+          if (unsubscribed) return;
+        }
+
         const payoutAddressParameters = payoutAccountBridge.getSerializedAddressParameters(
           payoutAccount,
           mainPayoutCurrency.id,
diff --git a/libs/ledger-live-common/src/exchange/swap/getIncompatibleCurrencyKeys.ts b/libs/ledger-live-common/src/exchange/swap/getIncompatibleCurrencyKeys.ts
index 97b5dc04e2b..59cd8518ee8 100644
--- a/libs/ledger-live-common/src/exchange/swap/getIncompatibleCurrencyKeys.ts
+++ b/libs/ledger-live-common/src/exchange/swap/getIncompatibleCurrencyKeys.ts
@@ -59,6 +59,10 @@ const INCOMPATIBLE_NANO_S_CURRENCY_KEYS: Keys = {
     title: "swap.incompatibility.cosmos_title",
     description: "swap.incompatibility.cosmos_description",
   },
+  hedera: {
+    title: "swap.incompatibility.hedera_title",
+    description: "swap.incompatibility.hedera_description",
+  },
   osmo: {
     title: "swap.incompatibility.osmo_title",
     description: "swap.incompatibility.osmo_description",
diff --git a/libs/ledger-live-common/src/families/hedera/exchange.ts b/libs/ledger-live-common/src/families/hedera/exchange.ts
new file mode 100644
index 00000000000..4c965b3fce4
--- /dev/null
+++ b/libs/ledger-live-common/src/families/hedera/exchange.ts
@@ -0,0 +1,48 @@
+import { LatestFirmwareVersionRequired, TransportStatusError } from "@ledgerhq/errors";
+import Exchange from "@ledgerhq/hw-app-exchange";
+import { loadPKI } from "@ledgerhq/hw-bolos";
+import calService from "@ledgerhq/ledger-cal-service";
+import trustService from "@ledgerhq/ledger-trust-service";
+import { getEnv } from "@ledgerhq/live-env";
+import { DeviceModelId } from "@ledgerhq/types-devices";
+import { Account } from "@ledgerhq/types-live";
+
+function isPKIUnsupportedError(err: unknown): err is TransportStatusError {
+  return err instanceof TransportStatusError && err.message.includes("0x6a81");
+}
+
+export async function handleHederaTrustedFlow({
+  exchange,
+  hederaAccount,
+  deviceModelId,
+}: {
+  exchange: Exchange;
+  hederaAccount: Account;
+  deviceModelId: DeviceModelId;
+}) {
+  const serviceEnv = getEnv("MOCK_EXCHANGE_TEST_CONFIG") ? "test" : "prod";
+
+  const cert = await calService.getCertificate(deviceModelId, "trusted_name", "latest", {
+    env: serviceEnv,
+    signatureKind: serviceEnv,
+  });
+
+  try {
+    await loadPKI(exchange.transport, "TRUSTED_NAME", cert.descriptor, cert.signature);
+  } catch (err) {
+    if (isPKIUnsupportedError(err)) {
+      throw new LatestFirmwareVersionRequired("LatestFirmwareVersionRequired");
+    }
+  }
+
+  const challenge = await exchange.getChallenge();
+  const hexChallenge = `${challenge.toString(16)}`;
+
+  const trustServiceResult = await trustService.hedera.getPublicKey(
+    hederaAccount.freshAddress,
+    hexChallenge,
+  );
+  const signedDescriptorBuffer = Buffer.from(trustServiceResult.signedDescriptor, "hex");
+
+  await exchange.sendTrustedDescriptor(signedDescriptorBuffer);
+}
diff --git a/libs/ledger-live-common/src/hw/actions/completeExchange.ts b/libs/ledger-live-common/src/hw/actions/completeExchange.ts
index b4eeac99c5a..208ee8693a6 100644
--- a/libs/ledger-live-common/src/hw/actions/completeExchange.ts
+++ b/libs/ledger-live-common/src/hw/actions/completeExchange.ts
@@ -3,6 +3,7 @@ import { scan, tap } from "rxjs/operators";
 import { useEffect, useState } from "react";
 import type { Action, Device } from "./types";
 import type { AppState } from "./app";
+import type { DeviceModelId } from "@ledgerhq/devices";
 import { log } from "@ledgerhq/logs";
 import { Exchange } from "../../exchange/types";
 import { Transaction } from "../../generated/types";
@@ -18,6 +19,7 @@ type State = {
 
 type CompleteExchangeState = AppState & State;
 type CompleteExchangeRequest = {
+  deviceModelId?: DeviceModelId;
   deviceId?: string;
   provider: string;
   transaction: Transaction;
@@ -130,6 +132,7 @@ export const createAction = (
         }),
         completeExchangeExec({
           deviceId: reduxDeviceFrozen?.deviceId,
+          deviceModelId: reduxDeviceFrozen?.modelId,
           provider,
           transaction,
           binaryPayload,
diff --git a/libs/ledger-services/trust/src/hedera.integ.test.ts b/libs/ledger-services/trust/src/hedera.integ.test.ts
new file mode 100644
index 00000000000..16131a1c7f8
--- /dev/null
+++ b/libs/ledger-services/trust/src/hedera.integ.test.ts
@@ -0,0 +1,16 @@
+import { getPublicKey } from "./hedera";
+
+describe("getPublicKey", () => {
+  it("returns expected public key info", async () => {
+    // When
+    const result = await getPublicKey("0.0.751515", "1", "test");
+
+    // Then
+    expect(result).toEqual(
+      expect.objectContaining({
+        account: "0.0.751515",
+        key: "0xe645c093bab64b4d076e82a85fd11bbfac24af0d827e7dafa8c49e04395970eb",
+      }),
+    );
+  });
+});
diff --git a/libs/ledger-services/trust/src/hedera.test.ts b/libs/ledger-services/trust/src/hedera.test.ts
new file mode 100644
index 00000000000..d8e7a42c680
--- /dev/null
+++ b/libs/ledger-services/trust/src/hedera.test.ts
@@ -0,0 +1,59 @@
+import network from "@ledgerhq/live-network";
+import { getPublicKey } from "./hedera";
+
+jest.mock("@ledgerhq/live-network");
+
+describe("hedera", () => {
+  beforeEach(() => {
+    jest.resetModules();
+    jest.clearAllMocks();
+  });
+
+  describe("getPublicKey", () => {
+    it.each([
+      ["prod", "https://nft.api.live.ledger.com"],
+      [undefined, "https://nft.api.live.ledger.com"],
+      ["test", "https://nft.api.live.ledger-test.com"],
+    ])("fetch the correct %s service environment", async (env, baseUrl) => {
+      // Given
+      const accountId = "HEDERA_ACCOUNT_ID";
+      const challenge = "WHATEVER_CHALLENGE";
+      const mockResponse = {};
+      (network as jest.Mock).mockResolvedValue({ data: mockResponse });
+
+      // When
+      await getPublicKey(accountId, challenge, env as "prod" | "test");
+
+      // Then
+      expect(network).toHaveBeenCalledWith({
+        method: "GET",
+        url: `${baseUrl}/v2/hedera/pubkey/${accountId}?challenge=${challenge}`,
+      });
+    });
+
+    it("transforms data as expected", async () => {
+      // Given
+      const accountId = "HEDERA_ACCOUNT_ID";
+      const publicKey = "HEDERA_PUBLIC_KEY";
+      const challenge = "WHATEVER_CHALLENGE";
+      const mockResponse = {
+        descriptorType: "TrustedDomainName",
+        descriptorVersion: 3,
+        account: accountId,
+        key: publicKey,
+        signedDescriptor: "SIGNATURE",
+      };
+      (network as jest.Mock).mockResolvedValue({ data: mockResponse });
+
+      // When
+      const result = await getPublicKey(accountId, challenge);
+
+      // Then
+      expect(result).toEqual({
+        accountId,
+        publicKey,
+        signedDescriptor: "SIGNATURE",
+      });
+    });
+  });
+});
diff --git a/libs/ledger-services/trust/src/hedera.ts b/libs/ledger-services/trust/src/hedera.ts
new file mode 100644
index 00000000000..95503069e03
--- /dev/null
+++ b/libs/ledger-services/trust/src/hedera.ts
@@ -0,0 +1,35 @@
+import network from "@ledgerhq/live-network";
+import { getTrustedDomain } from "./common";
+
+type PublicKeyResponse = {
+  descriptorType: "TrustedDomainName";
+  descriptorVersion: number;
+  account: string;
+  key: string;
+  signedDescriptor: string;
+  keyId: "domain_metadata_key";
+  keyUsage: "trusted_name";
+};
+
+type PublicKeyInfo = {
+  accountId: string;
+  publicKey: string;
+  signedDescriptor: string;
+};
+
+export async function getPublicKey(
+  accountId: string,
+  challenge: string,
+  env: "prod" | "test" = "prod",
+): Promise<PublicKeyInfo> {
+  const { data } = await network<PublicKeyResponse>({
+    method: "GET",
+    url: `${getTrustedDomain(env)}/v2/hedera/pubkey/${accountId}?challenge=${challenge}`,
+  });
+
+  return {
+    accountId: data.account,
+    publicKey: data.key,
+    signedDescriptor: data.signedDescriptor,
+  };
+}
diff --git a/libs/ledger-services/trust/src/index.ts b/libs/ledger-services/trust/src/index.ts
index 6484c85c34e..f498d009c44 100644
--- a/libs/ledger-services/trust/src/index.ts
+++ b/libs/ledger-services/trust/src/index.ts
@@ -4,9 +4,13 @@
  * Use only exposed methods below outside of this module.
  */
 
+import { getPublicKey } from "./hedera";
 import { computedTokenAddress, getOwnerAddress } from "./solana";
 
 export default {
   computedTokenAddress,
   getOwnerAddress,
+  hedera: {
+    getPublicKey,
+  },
 };
diff --git a/pnpm-lock.yaml b/pnpm-lock.yaml
index ada19ef5539..a6a9ef03f22 100644
--- a/pnpm-lock.yaml
+++ b/pnpm-lock.yaml
@@ -5139,6 +5139,9 @@ importers:
       '@ledgerhq/hw-app-xrp':
         specifier: workspace:^
         version: link:../ledgerjs/packages/hw-app-xrp
+      '@ledgerhq/hw-bolos':
+        specifier: workspace:^
+        version: link:../ledgerjs/packages/hw-bolos
       '@ledgerhq/hw-transport':
         specifier: workspace:*
         version: link:../ledgerjs/packages/hw-transport
@@ -5148,6 +5151,9 @@ importers:
       '@ledgerhq/ledger-cal-service':
         specifier: workspace:^
         version: link:../ledger-services/cal
+      '@ledgerhq/ledger-trust-service':
+        specifier: workspace:^
+        version: link:../ledger-services/trust
       '@ledgerhq/live-app-sdk':
         specifier: ^0.8.1
         version: 0.8.2
