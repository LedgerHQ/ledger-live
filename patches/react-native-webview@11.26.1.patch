diff --git a/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java b/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
index 9cfe821f29921b6007e4bdd5267bfb0330246863..f85b0cfb42fce06d8f66a879f3ea4a101665b7b8 100644
--- a/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
+++ b/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
@@ -160,6 +160,7 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
 
   protected RNCWebChromeClient mWebChromeClient = null;
   protected boolean mAllowsFullscreenVideo = false;
+  protected boolean mAllowsUnsecureHttps = false;
   protected boolean mAllowsProtectedMedia = false;
   protected @Nullable String mUserAgent = null;
   protected @Nullable String mUserAgentWithApplicationName = null;
@@ -625,6 +626,15 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     setupWebChromeClient((ReactContext)view.getContext(), view);
   }
 
+  @ReactProp(name = "allowsUnsecureHttps")
+  public void setAllowsUnsecureHttps(
+    WebView view,
+    @Nullable Boolean allowsUnsecureHttps) {
+    mAllowsUnsecureHttps = allowsUnsecureHttps != null && allowsUnsecureHttps;
+
+    ((RNCWebView) view).setAllowsUnsecureHttps(mAllowsUnsecureHttps);
+  }
+
   @ReactProp(name = "allowFileAccess")
   public void setAllowFileAccess(
     WebView view,
@@ -908,6 +918,7 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
   protected static class RNCWebViewClient extends WebViewClient {
 
     protected boolean mLastLoadFailed = false;
+    protected boolean mAllowsUnsecureHttps = false;
     protected @Nullable
     ReadableArray mUrlPrefixesForDefaultIntent;
     protected RNCWebView.ProgressChangedFilter progressChangedFilter = null;
@@ -922,6 +933,10 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
       basicAuthCredential = credential;
     }
 
+    public void setAllowsUnsecureHttps(boolean allowsUnsecureHttps) {
+      mAllowsUnsecureHttps = allowsUnsecureHttps;
+    }
+
     @Override
     public void onPageFinished(WebView webView, String url) {
       super.onPageFinished(webView, url);
@@ -935,6 +950,17 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
       }
     }
 
+    @Override
+    public void doUpdateVisitedHistory(WebView webView, String url, boolean isReload) {
+      super.doUpdateVisitedHistory(webView, url, isReload);
+
+      if (!mLastLoadFailed) {
+        RNCWebView reactWebView = (RNCWebView) webView;
+
+        emitFinishEvent(webView, url);
+      }
+    }
+
     @Override
     public void onPageStarted(WebView webView, String url, Bitmap favicon) {
       super.onPageStarted(webView, url, favicon);
@@ -1027,7 +1053,11 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
         // Cancel request after obtaining top-level URL.
         // If request is cancelled before obtaining top-level URL, undesired behavior may occur.
         // Undesired behavior: Return value of WebView.getUrl() may be the current URL instead of the failing URL.
-        handler.cancel();
+        if (mAllowsUnsecureHttps) {
+          handler.proceed();
+        } else {
+          handler.cancel();
+        }
 
         if (!topWindowUrl.equalsIgnoreCase(failingUrl)) {
           // If error is not due to top-level navigation, then do not call onReceivedError()
@@ -1567,6 +1597,10 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
       mRNCWebViewClient.setBasicAuthCredential(credential);
     }
 
+    public void setAllowsUnsecureHttps(boolean allowsUnsecureHttps) {
+      mRNCWebViewClient.setAllowsUnsecureHttps(allowsUnsecureHttps);
+    }
+
     public void setSendContentSizeChangeEvents(boolean sendContentSizeChangeEvents) {
       this.sendContentSizeChangeEvents = sendContentSizeChangeEvents;
     }
diff --git a/apple/RNCWebView.h b/apple/RNCWebView.h
index 90c9d62abd249c2cab80fd248f4756801069bd5f..742a0a8a07bfc225eefb3607dd224d91bddc36df 100644
--- a/apple/RNCWebView.h
+++ b/apple/RNCWebView.h
@@ -50,6 +50,7 @@ shouldStartLoadForRequest:(NSMutableDictionary<NSString *, id> *_Nonnull)request
 @property (nonatomic, assign) BOOL pagingEnabled;
 @property (nonatomic, assign) CGFloat decelerationRate;
 @property (nonatomic, assign) BOOL allowsInlineMediaPlayback;
+@property (nonatomic, assign) BOOL allowsUnsecureHttps;
 @property (nonatomic, assign) BOOL allowsAirPlayForMediaPlayback;
 @property (nonatomic, assign) BOOL bounces;
 @property (nonatomic, assign) BOOL mediaPlaybackRequiresUserAction;
@@ -58,6 +59,7 @@ shouldStartLoadForRequest:(NSMutableDictionary<NSString *, id> *_Nonnull)request
 #endif
 @property (nonatomic, assign) UIEdgeInsets contentInset;
 @property (nonatomic, assign) BOOL automaticallyAdjustContentInsets;
+@property (nonatomic, assign) BOOL setSupportMultipleWindows;
 @property (nonatomic, assign) BOOL keyboardDisplayRequiresUserAction;
 @property (nonatomic, assign) BOOL hideKeyboardAccessoryView;
 @property (nonatomic, assign) BOOL allowsBackForwardNavigationGestures;
diff --git a/apple/RNCWebView.m b/apple/RNCWebView.m
index 7570d8dc5456b4a48c72c0549099bec289f45578..76d910723c53aea6ebc276d5b47913eefd813382 100644
--- a/apple/RNCWebView.m
+++ b/apple/RNCWebView.m
@@ -130,6 +130,7 @@ RCTAutoInsetsProtocol>
     _showsVerticalScrollIndicator = YES;
     _directionalLockEnabled = YES;
     _automaticallyAdjustContentInsets = YES;
+    _setSupportMultipleWindows = YES;
     _autoManageStatusBarEnabled = YES;
     _contentInset = UIEdgeInsetsZero;
     _savedKeyboardDisplayRequiresUserAction = YES;
@@ -312,9 +313,13 @@ RCTAutoInsetsProtocol>
  */
 - (WKWebView *)webView:(WKWebView *)webView createWebViewWithConfiguration:(WKWebViewConfiguration *)configuration forNavigationAction:(WKNavigationAction *)navigationAction windowFeatures:(WKWindowFeatures *)windowFeatures
 {
-  if (!navigationAction.targetFrame.isMainFrame) {
+  if (_setSupportMultipleWindows == NO && !navigationAction.targetFrame.isMainFrame) {
     [webView loadRequest:navigationAction.request];
   }
+  if (_setSupportMultipleWindows == YES) {
+    NSURL* url = [[NSURL alloc] initWithString: (navigationAction.request.URL).absoluteString];
+    [[UIApplication sharedApplication] openURL: url];
+  }
   return nil;
 }
 
@@ -975,6 +980,12 @@ RCTAutoInsetsProtocol>
     completionHandler(NSURLSessionAuthChallengeUseCredential, clientAuthenticationCredential);
     return;
   }
+  if (_allowsUnsecureHttps == true) {
+    SecTrustRef trust = [[challenge protectionSpace] serverTrust];
+    NSURLCredential *useCredential = [NSURLCredential credentialForTrust:trust];
+    completionHandler(NSURLSessionAuthChallengeUseCredential, useCredential);
+    return;
+  }
   if ([[challenge protectionSpace] serverTrust] != nil && customCertificatesForHost != nil && host != nil) {
     SecCertificateRef localCertificate = (__bridge SecCertificateRef)([customCertificatesForHost objectForKey:host]);
     if (localCertificate != nil) {
diff --git a/apple/RNCWebViewManager.m b/apple/RNCWebViewManager.m
index 401e40e017ee7340881e85806d3927c93e056ba4..acfc4924a82bc1d55ae7965e9fdb546eaddd7ced 100644
--- a/apple/RNCWebViewManager.m
+++ b/apple/RNCWebViewManager.m
@@ -71,6 +71,7 @@ RCT_EXPORT_VIEW_PROPERTY(javaScriptCanOpenWindowsAutomatically, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(allowFileAccessFromFileURLs, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(allowUniversalAccessFromFileURLs, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(allowsInlineMediaPlayback, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(allowsUnsecureHttps, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(allowsAirPlayForMediaPlayback, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(mediaPlaybackRequiresUserAction, BOOL)
 #if WEBKIT_IOS_10_APIS_AVAILABLE
@@ -78,6 +79,7 @@ RCT_EXPORT_VIEW_PROPERTY(dataDetectorTypes, WKDataDetectorTypes)
 #endif
 RCT_EXPORT_VIEW_PROPERTY(contentInset, UIEdgeInsets)
 RCT_EXPORT_VIEW_PROPERTY(automaticallyAdjustContentInsets, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(setSupportMultipleWindows, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(autoManageStatusBarEnabled, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(hideKeyboardAccessoryView, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(allowsBackForwardNavigationGestures, BOOL)
diff --git a/lib/WebViewTypes.d.ts b/lib/WebViewTypes.d.ts
index 74e14ef5dedabbcf1330e1830d7b053599308ee5..ddd33549d6bea9d7fa6f227d97114ebee2674d53 100644
--- a/lib/WebViewTypes.d.ts
+++ b/lib/WebViewTypes.d.ts
@@ -406,6 +406,11 @@ export interface IOSWebViewProps extends WebViewSharedProps {
      * @platform ios
      */
     allowsInlineMediaPlayback?: boolean;
+     /**
+     * A Boolean value indicating whether unsecure https is allowed. The default value is `false`.
+     * @platform ios
+     */
+    allowsUnsecureHttps?: boolean;    
     /**
      * A Boolean value indicating whether AirPlay is allowed. The default value is `false`.
      * @platform ios
diff --git a/windows/.gitignore b/windows/.gitignore
deleted file mode 100644
index a57fdbbc37f41b02b03a4cd12d45d618a01ddeed..0000000000000000000000000000000000000000