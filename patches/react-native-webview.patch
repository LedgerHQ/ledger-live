diff --git a/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java b/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
index 5932fc189d192cfd1209509170c816ddcaed0a10..f5d00db2d8d4c10dc254328277f4aaef72a1ebf1 100644
--- a/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
+++ b/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
@@ -99,6 +99,10 @@ public class RNCWebView extends WebView implements LifecycleEventListener {
         mRNCWebViewClient.setBasicAuthCredential(credential);
     }
 
+    public void setAllowsUnsecureHttps(boolean allowsUnsecureHttps) {
+        mRNCWebViewClient.setAllowsUnsecureHttps(allowsUnsecureHttps);
+    }
+
     public void setSendContentSizeChangeEvents(boolean sendContentSizeChangeEvents) {
         this.sendContentSizeChangeEvents = sendContentSizeChangeEvents;
     }
diff --git a/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewClient.java b/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewClient.java
index 251939e56ac24832e6272f77b324eb2d51442ad7..43f2426fdd1e433c5f87b8db6958bdd90e4defb1 100644
--- a/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewClient.java
+++ b/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewClient.java
@@ -41,6 +41,7 @@ public class RNCWebViewClient extends WebViewClient {
     protected static final int SHOULD_OVERRIDE_URL_LOADING_TIMEOUT = 250;
 
     protected boolean mLastLoadFailed = false;
+    protected boolean mAllowsUnsecureHttps = false;
     protected RNCWebView.ProgressChangedFilter progressChangedFilter = null;
     protected @Nullable String ignoreErrFailedForThisURL = null;
     protected @Nullable RNCBasicAuthCredential basicAuthCredential = null;
@@ -53,6 +54,10 @@ public class RNCWebViewClient extends WebViewClient {
         basicAuthCredential = credential;
     }
 
+    public void setAllowsUnsecureHttps(boolean allowsUnsecureHttps) {
+        mAllowsUnsecureHttps = allowsUnsecureHttps;
+    }
+
     @Override
     public void onPageFinished(WebView webView, String url) {
         super.onPageFinished(webView, url);
@@ -171,7 +176,11 @@ public class RNCWebViewClient extends WebViewClient {
         // Cancel request after obtaining top-level URL.
         // If request is cancelled before obtaining top-level URL, undesired behavior may occur.
         // Undesired behavior: Return value of WebView.getUrl() may be the current URL instead of the failing URL.
-        handler.cancel();
+        if (mAllowsUnsecureHttps) {
+          handler.proceed();
+        } else {
+          handler.cancel();
+        }
 
         if (!topWindowUrl.equalsIgnoreCase(failingUrl)) {
             // If error is not due to top-level navigation, then do not call onReceivedError()
diff --git a/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt b/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
index 51338df91864ef20bba811265a8019fbbf83f931..e6f969bf80f61e610e357cbbe445c20c03d8cacb 100644
--- a/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
+++ b/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManagerImpl.kt
@@ -564,6 +564,10 @@ class RNCWebViewManagerImpl(private val newArch: Boolean = false) {
         setupWebChromeClient(view)
     }
 
+    fun setAllowsUnsecureHttps(viewWrapper: RNCWebViewWrapper, value: Boolean) {
+        viewWrapper.webView.setAllowsUnsecureHttps(value)
+    }
+
     fun setAndroidLayerType(viewWrapper: RNCWebViewWrapper, layerTypeString: String?) {
         val view = viewWrapper.webView
         val layerType = when (layerTypeString) {          
diff --git a/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java b/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java
index ff2cba5f710988acafe9dbc42ca814ea8622d8c3..110740ae11fc1e825b0457923be8c1336061b26f 100644
--- a/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java
+++ b/android/src/newarch/com/reactnativecommunity/webview/RNCWebViewManager.java
@@ -87,6 +87,12 @@ public class RNCWebViewManager extends ViewGroupManager<RNCWebViewWrapper>
         mRNCWebViewManagerImpl.setAllowsFullscreenVideo(view, value);
     }
 
+    @Override
+    @ReactProp(name = "allowsUnsecureHttps")
+    public void setAllowsUnsecureHttps(RNCWebViewWrapper view, boolean value) {
+        mRNCWebViewManagerImpl.setAllowsUnsecureHttps(view, value);
+    }
+
     @Override
     @ReactProp(name = "allowsProtectedMedia")
     public void setAllowsProtectedMedia(RNCWebViewWrapper view, boolean value) {
diff --git a/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java b/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java
index 78fba18a66c325f0ac3c423f7fd760b2dff2779e..421d545c5eebca2438d654c47d84f13f572c0397 100644
--- a/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java
+++ b/android/src/oldarch/com/reactnativecommunity/webview/RNCWebViewManager.java
@@ -66,6 +66,11 @@ public class RNCWebViewManager extends ViewGroupManager<RNCWebViewWrapper> {
         mRNCWebViewManagerImpl.setAllowsFullscreenVideo(view, value);
     }
 
+    @ReactProp(name = "allowsUnsecureHttps")
+    public void setAllowsUnsecureHttps(RNCWebViewWrapper view, boolean value) {
+        mRNCWebViewManagerImpl.setAllowsUnsecureHttps(view, value);
+    }
+
     @ReactProp(name = "allowsProtectedMedia")
     public void setAllowsProtectedMedia(RNCWebViewWrapper view, boolean value) {
         mRNCWebViewManagerImpl.setAllowsProtectedMedia(view, value);
diff --git a/apple/RNCWebViewImpl.h b/apple/RNCWebViewImpl.h
index 6246c45ef70c63ff1c05da489c0703f86a74109c..03a87930fd000ceb70ef6d037a4182e8ffd8e7bf 100644
--- a/apple/RNCWebViewImpl.h
+++ b/apple/RNCWebViewImpl.h
@@ -82,6 +82,7 @@ shouldStartLoadForRequest:(NSMutableDictionary<NSString *, id> *)request
 @property (nonatomic, assign) BOOL allowsInlineMediaPlayback;
 @property (nonatomic, assign) BOOL allowsPictureInPictureMediaPlayback;
 @property (nonatomic, assign) BOOL webviewDebuggingEnabled;
+@property (nonatomic, assign) BOOL allowsUnsecureHttps;
 @property (nonatomic, assign) BOOL allowsAirPlayForMediaPlayback;
 @property (nonatomic, assign) BOOL bounces;
 @property (nonatomic, assign) BOOL mediaPlaybackRequiresUserAction;
diff --git a/apple/RNCWebViewImpl.m b/apple/RNCWebViewImpl.m
index d2923edf7f1470a09ed9e090287bf6e234b95554..0027e25c7215428177fdaae311351c3fb71cf96c 100644
--- a/apple/RNCWebViewImpl.m
+++ b/apple/RNCWebViewImpl.m
@@ -1139,6 +1139,14 @@ RCTAutoInsetsProtocol>
     completionHandler(NSURLSessionAuthChallengeUseCredential, clientAuthenticationCredential);
     return;
   }
+
+  if (_allowsUnsecureHttps == true) {
+    SecTrustRef trust = [[challenge protectionSpace] serverTrust];
+    NSURLCredential *useCredential = [NSURLCredential credentialForTrust:trust];
+    completionHandler(NSURLSessionAuthChallengeUseCredential, useCredential);
+    return;
+  }
+
   if ([[challenge protectionSpace] serverTrust] != nil && customCertificatesForHost != nil && host != nil) {
     SecCertificateRef localCertificate = (__bridge SecCertificateRef)([customCertificatesForHost objectForKey:host]);
     if (localCertificate != nil) {
diff --git a/apple/RNCWebViewManager.mm b/apple/RNCWebViewManager.mm
index a0e0d00630d13a92e27ec8de7714597a378928e3..3e723e6844d764d15a3f697de11fc53e96c6677a 100644
--- a/apple/RNCWebViewManager.mm
+++ b/apple/RNCWebViewManager.mm
@@ -64,6 +64,7 @@ RCT_EXPORT_VIEW_PROPERTY(allowUniversalAccessFromFileURLs, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(allowsInlineMediaPlayback, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(allowsPictureInPictureMediaPlayback, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(webviewDebuggingEnabled, BOOL)
+RCT_EXPORT_VIEW_PROPERTY(allowsUnsecureHttps, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(allowsAirPlayForMediaPlayback, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(mediaPlaybackRequiresUserAction, BOOL)
 RCT_EXPORT_VIEW_PROPERTY(dataDetectorTypes, WKDataDetectorTypes)
diff --git a/lib/WebViewTypes.d.ts b/lib/WebViewTypes.d.ts
index b31398ba49962960fa8b28f06a74178176e74ec0..bf909df0e058fa3e1527ba85b831b5e6b409c7b6 100644
--- a/lib/WebViewTypes.d.ts
+++ b/lib/WebViewTypes.d.ts
@@ -1,5 +1,5 @@
-import { ReactElement, Component, ComponentProps } from 'react';
-import { NativeSyntheticEvent, ViewProps, StyleProp, ViewStyle, NativeMethodsMixin, UIManagerStatic, NativeScrollEvent } from 'react-native';
+import { Component, ComponentProps, ReactElement } from 'react';
+import { NativeMethodsMixin, NativeScrollEvent, NativeSyntheticEvent, StyleProp, UIManagerStatic, ViewProps, ViewStyle } from 'react-native';
 import type NativeWebViewComponent from './RNCWebViewNativeComponent';
 type WebViewCommands = 'goForward' | 'goBack' | 'reload' | 'stopLoading' | 'postMessage' | 'injectJavaScript' | 'loadUrl' | 'requestFocus' | 'clearCache';
 type AndroidWebViewCommands = 'clearHistory' | 'clearFormData';
@@ -744,6 +744,11 @@ export interface MacOSWebViewProps extends WebViewSharedProps {
      * @platform macos
      */
     allowUniversalAccessFromFileURLs?: boolean;
+    /**
+     * A Boolean value indicating whether unsecure https is allowed. The default value is `false`.
+     * @platform ios
+     */
+    allowsUnsecureHttps?: boolean;
     /**
      * Function that is invoked when the WebKit WebView content process gets terminated.
      * @platform macos
@@ -880,6 +885,11 @@ export interface AndroidWebViewProps extends WebViewSharedProps {
      * Sets ability to open fullscreen videos on Android devices.
      */
     allowsFullscreenVideo?: boolean;
+    /**
+     * A Boolean value indicating whether unsecure https is allowed. The default value is `false`.
+     * @platform android
+     */
+    allowsUnsecureHttps?: boolean;
     /**
      * Configuring Dark Theme
      *
